{"version":3,"file":"index.es.mjs","sources":["../lib/types/enums.ts","../lib/utils/carousel-utils.ts","../lib/utils/match-media.ts","../lib/utils/index.ts","../lib/components/props.ts","../lib/components/VSlickArrow.vue","../lib/components/VSlickTrack.vue","../lib/components/VSlickDots.vue","../lib/components/VSlickCarousel.vue"],"sourcesContent":["export enum PlayingType {\n  play = 'play',\n  playing = 'playing',\n  paused = 'paused',\n  hovered = 'hovered',\n  focused = 'focused',\n  update = 'update',\n  leave = 'leave',\n  blur = 'blur'\n}\n\nexport enum LazyLoadType {\n  ondemand = 'ondemand',\n  progressive = 'progressive'\n}\n\nexport enum SwipeDirection {\n  left = 'left',\n  right = 'right',\n  up = 'up',\n  down = 'down',\n  vertical = 'vertical'\n}\n\nexport enum SlideNavigation {\n  next = 'next',\n  previous = 'previous'\n}\n\nexport enum WidthDetection {\n  auto = 'auto',\n  manual = 'manual'\n}\n","import { VNode } from 'vue'\r\nimport {\r\n  CloneInfoSpec,\r\n  GoNextSpec,\r\n  GoPrevSpec,\r\n  LazyInfoSpec,\r\n  NavigableSpec,\r\n  OnSlideSpec,\r\n  PlayingType,\r\n  SlideGroupChangeOptions,\r\n  SlideGroupChangeSpec,\r\n  SlideGroupCountSpec,\r\n  SlideNavigation,\r\n  SliderState,\r\n  SliderStateInfoSpec,\r\n  SwipeDirection,\r\n  SwipeEndSpec,\r\n  SwipeEndState,\r\n  SwipeEvent,\r\n  SwipeMoveSpec,\r\n  SwipeMoveState,\r\n  TouchObject,\r\n  TrackInfoSpec\r\n} from '../types'\r\nimport { MarkRequiredWithPartialBase } from '@lib/types/helpers'\r\n\r\nexport const extractSlides = (vnodes: VNode[]): VNode[] => {\r\n  return vnodes.flatMap((vnode) =>\r\n    isSlide(vnode)\r\n      ? [vnode]\r\n      : Array.isArray(vnode.children) && vnode.children.length > 0\r\n        ? extractSlides(vnode.children as VNode[])\r\n        : []\r\n  )\r\n}\r\n\r\nfunction isSlide(vnode: VNode): boolean {\r\n  return !vnode.type.toString().startsWith('Symbol')\r\n}\r\n\r\nexport const getNavigationOnKeyType = (\r\n  e: KeyboardEvent,\r\n  accessibility: boolean,\r\n  rtl: boolean\r\n) => {\r\n  if (\r\n    (e.target as HTMLElement)?.tagName.match('TEXTAREA|INPUT|SELECT') ||\r\n    !accessibility\r\n  )\r\n    return ''\r\n  if (e.key === 'ArrowLeft')\r\n    return rtl ? SlideNavigation.next : SlideNavigation.previous\r\n  if (e.key === 'ArrowRight')\r\n    return rtl ? SlideNavigation.previous : SlideNavigation.next\r\n  return ''\r\n}\r\n\r\nexport const getChangedSlideGroupIndex = (\r\n  spec: SlideGroupChangeSpec,\r\n  options: SlideGroupChangeOptions\r\n) => {\r\n  let indexOffset,\r\n    previousInt,\r\n    slideGroupOffset,\r\n    unevenOffset,\r\n    targetSlideGroupIndex\r\n  const {\r\n    groupsToScroll,\r\n    groupsToShow,\r\n    slideGroupCount,\r\n    currentSlideGroupIndex,\r\n    lazyLoad,\r\n    infinite\r\n  } = spec\r\n  unevenOffset = slideGroupCount % groupsToScroll !== 0\r\n  indexOffset = unevenOffset\r\n    ? 0\r\n    : (slideGroupCount - currentSlideGroupIndex) % groupsToScroll\r\n\r\n  if (options.message === SlideNavigation.previous) {\r\n    slideGroupOffset =\r\n      indexOffset === 0 ? groupsToScroll : groupsToShow - indexOffset\r\n    targetSlideGroupIndex = currentSlideGroupIndex - slideGroupOffset\r\n    if (lazyLoad && !infinite) {\r\n      previousInt = currentSlideGroupIndex - slideGroupOffset\r\n      targetSlideGroupIndex =\r\n        previousInt === -1 ? slideGroupCount - 1 : previousInt\r\n    }\r\n  } else if (options.message === SlideNavigation.next) {\r\n    slideGroupOffset = indexOffset === 0 ? groupsToScroll : indexOffset\r\n    targetSlideGroupIndex = currentSlideGroupIndex + slideGroupOffset\r\n    if (lazyLoad && !infinite) {\r\n      targetSlideGroupIndex =\r\n        ((currentSlideGroupIndex + groupsToScroll) % slideGroupCount) +\r\n        indexOffset\r\n    }\r\n  } else if (options.message === 'dots') {\r\n    // Click on dots\r\n    targetSlideGroupIndex = (options.index || 0) * groupsToScroll\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n  } else if (options.message === 'children') {\r\n    // Click on the slides\r\n    targetSlideGroupIndex = options.index || 0\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n    if (infinite) {\r\n      let direction = siblingDirection({ ...spec, targetSlideGroupIndex })\r\n      if (\r\n        targetSlideGroupIndex > currentSlideGroupIndex &&\r\n        direction === 'left'\r\n      ) {\r\n        targetSlideGroupIndex = targetSlideGroupIndex - slideGroupCount\r\n      } else if (\r\n        targetSlideGroupIndex < currentSlideGroupIndex &&\r\n        direction === 'right'\r\n      ) {\r\n        targetSlideGroupIndex = targetSlideGroupIndex + slideGroupCount\r\n      }\r\n    }\r\n  } else if (options.message === 'index') {\r\n    targetSlideGroupIndex = Number(options.index)\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n  }\r\n  return targetSlideGroupIndex\r\n}\r\n\r\nexport const siblingDirection = (\r\n  spec: SlideGroupChangeSpec & { targetSlideGroupIndex: number }\r\n) => {\r\n  if (spec.targetSlideGroupIndex > spec.currentSlideGroupIndex) {\r\n    if (\r\n      spec.targetSlideGroupIndex >\r\n      spec.currentSlideGroupIndex + totalVisibleGroupsOnRightOfCurrGroup(spec)\r\n    ) {\r\n      return 'left'\r\n    }\r\n    return 'right'\r\n  } else {\r\n    if (\r\n      spec.targetSlideGroupIndex <\r\n      spec.currentSlideGroupIndex - totalVisibleGroupsOnLeftOfCurrGroup(spec)\r\n    ) {\r\n      return 'right'\r\n    }\r\n    return 'left'\r\n  }\r\n}\r\n\r\nconst totalVisibleGroupsOnRightOfCurrGroup = ({\r\n  groupsToShow,\r\n  centerMode,\r\n  rtl,\r\n  centerPadding\r\n}: SlideGroupChangeSpec) => {\r\n  if (centerMode) {\r\n    let right = (groupsToShow - 1) / 2 + 1\r\n    if (parseInt(centerPadding) > 0) right += 1\r\n    if (rtl && groupsToShow % 2 === 0) right += 1\r\n    return right\r\n  }\r\n  if (rtl) {\r\n    return 0\r\n  }\r\n  return groupsToShow - 1\r\n}\r\n\r\nconst totalVisibleGroupsOnLeftOfCurrGroup = ({\r\n  groupsToShow,\r\n  centerMode,\r\n  rtl,\r\n  centerPadding\r\n}: SlideGroupChangeSpec) => {\r\n  if (centerMode) {\r\n    let left = (groupsToShow - 1) / 2 + 1\r\n    if (parseInt(centerPadding) > 0) left += 1\r\n    if (!rtl && groupsToShow % 2 === 0) left += 1\r\n    return left\r\n  }\r\n  if (rtl) {\r\n    return groupsToShow - 1\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getNavigableIndexes = (spec: NavigableSpec) => {\r\n  let max = spec.infinite ? spec.slideGroupCount * 2 : spec.slideGroupCount\r\n  let breakpoint = spec.infinite ? spec.groupsToShow * -1 : 0\r\n  let counter = spec.infinite ? spec.groupsToShow * -1 : 0\r\n  let indexes = []\r\n  while (breakpoint < max) {\r\n    indexes.push(breakpoint)\r\n    breakpoint = counter + spec.groupsToScroll\r\n    counter += Math.min(spec.groupsToScroll, spec.groupsToShow)\r\n  }\r\n  return indexes\r\n}\r\n\r\nexport const checkNavigable = (spec: NavigableSpec, index: number) => {\r\n  const navigables = getNavigableIndexes(spec)\r\n  let prevNavigable = 0\r\n  if (index > navigables[navigables.length - 1]) {\r\n    index = navigables[navigables.length - 1]\r\n  } else {\r\n    for (let n in navigables) {\r\n      if (index < navigables[n]) {\r\n        index = prevNavigable\r\n        break\r\n      }\r\n      prevNavigable = navigables[n]\r\n    }\r\n  }\r\n  return index\r\n}\r\n\r\nexport const getSwipeStartState = (\r\n  e: SwipeEvent,\r\n  swipe: boolean,\r\n  draggable: boolean\r\n) => {\r\n  if (!swipe || (!draggable && e.type.indexOf('mouse') !== -1)) return\r\n  return {\r\n    dragging: true,\r\n    touchObject: {\r\n      startX:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageX\r\n          : (e as MouseEvent).clientX,\r\n      startY:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageY\r\n          : (e as MouseEvent).clientY,\r\n      curX:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageX\r\n          : (e as MouseEvent).clientX,\r\n      curY:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageY\r\n          : (e as MouseEvent).clientY\r\n    }\r\n  }\r\n}\r\n\r\nexport const getTraversedSlideGroupCount = (spec: SlideGroupCountSpec) => {\r\n  const centerOffset = spec.centerMode\r\n    ? +spec.slideGroupWidth * Math.floor(spec.groupsToShow / 2)\r\n    : 0\r\n  let swipedSlideGroup\r\n  const slickList = spec.listEl\r\n  const slideGroups = slickList.querySelectorAll<HTMLElement>(\r\n    '.v-slick-slide-group'\r\n  )\r\n  Array.from(slideGroups).every((grp) => {\r\n    if (!spec.vertical) {\r\n      if (\r\n        grp.offsetLeft - centerOffset + grp.offsetWidth / 2 >\r\n        spec.swipeLeft * -1\r\n      ) {\r\n        swipedSlideGroup = grp\r\n        return false\r\n      }\r\n    } else {\r\n      if (grp.offsetTop + grp.offsetHeight / 2 > spec.swipeLeft * -1) {\r\n        swipedSlideGroup = grp\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  })\r\n\r\n  if (!swipedSlideGroup) {\r\n    return 0\r\n  }\r\n  const currentIndex =\r\n    spec.rtl === true\r\n      ? spec.slideGroupCount - spec.currentSlideGroupIndex\r\n      : spec.currentSlideGroupIndex\r\n  const swipedSlideGroupIndex = (swipedSlideGroup as HTMLElement)?.dataset\r\n    ?.index\r\n  const groupsTraversed = Math.abs(\r\n    swipedSlideGroupIndex ? parseInt(swipedSlideGroupIndex) : 0 - currentIndex\r\n  )\r\n  return groupsTraversed\r\n}\r\n\r\nexport const getSwipeDirection = (\r\n  touchObject: TouchObject,\r\n  verticalSwiping = false\r\n): SwipeDirection => {\r\n  let xDist, yDist, r, swipeAngle\r\n  xDist = touchObject.startX - touchObject.curX\r\n  yDist = touchObject.startY - touchObject.curY\r\n  r = Math.atan2(yDist, xDist)\r\n  swipeAngle = Math.round((r * 180) / Math.PI)\r\n  if (swipeAngle < 0) {\r\n    swipeAngle = 360 - Math.abs(swipeAngle)\r\n  }\r\n  if (\r\n    (swipeAngle <= 45 && swipeAngle >= 0) ||\r\n    (swipeAngle <= 360 && swipeAngle >= 315)\r\n  ) {\r\n    return SwipeDirection.left\r\n  }\r\n  if (swipeAngle >= 135 && swipeAngle <= 225) {\r\n    return SwipeDirection.right\r\n  }\r\n  if (verticalSwiping === true) {\r\n    if (swipeAngle >= 35 && swipeAngle <= 135) {\r\n      return SwipeDirection.up\r\n    } else {\r\n      return SwipeDirection.down\r\n    }\r\n  }\r\n\r\n  return SwipeDirection.vertical\r\n}\r\n\r\nexport const getSwipeEndState = (\r\n  e: SwipeEvent,\r\n  spec: SwipeEndSpec\r\n): SwipeEndState | undefined => {\r\n  const {\r\n    dragging,\r\n    swipe,\r\n    touchObject,\r\n    listWidth,\r\n    touchThreshold,\r\n    verticalSwiping,\r\n    listHeight,\r\n    currentSlideGroupIndex,\r\n    swipeToSlide,\r\n    scrolling,\r\n    onSwipe,\r\n    rtl\r\n  } = spec\r\n  if (!dragging) {\r\n    if (swipe) e.preventDefault()\r\n    return\r\n  }\r\n  let minSwipe = verticalSwiping\r\n    ? listHeight / touchThreshold\r\n    : listWidth / touchThreshold\r\n  let swipeDirection = getSwipeDirection(touchObject, verticalSwiping)\r\n  if (rtl) {\r\n    if (swipeDirection === SwipeDirection.left) {\r\n      swipeDirection = SwipeDirection.right\r\n    } else if (swipeDirection === SwipeDirection.right) {\r\n      swipeDirection = SwipeDirection.left\r\n    }\r\n  }\r\n  // reset the state of touch related state variables.\r\n  let state: SwipeEndState = {\r\n    dragging: false,\r\n    edgeDragged: false,\r\n    scrolling: false,\r\n    swiping: false,\r\n    swiped: false,\r\n    swipeLeft: null,\r\n    touchObject: {}\r\n  }\r\n  if (scrolling) {\r\n    return state\r\n  }\r\n  if (!touchObject.swipeLength) {\r\n    return state\r\n  }\r\n  if (touchObject.swipeLength > minSwipe) {\r\n    e.preventDefault()\r\n    if (onSwipe) {\r\n      onSwipe(swipeDirection)\r\n    }\r\n    let slideGroupCount, newSlideGroupIndex\r\n    switch (swipeDirection) {\r\n      case 'left':\r\n      case 'up':\r\n        newSlideGroupIndex = spec.swipeToSlide\r\n          ? getTraversedSlideGroupCount(spec)\r\n          : currentSlideGroupIndex + spec.groupsToScroll\r\n        slideGroupCount = swipeToSlide\r\n          ? checkNavigable(spec, newSlideGroupIndex)\r\n          : newSlideGroupIndex\r\n        state.currentDirection = 0\r\n        break\r\n      case 'right':\r\n      case 'down':\r\n        newSlideGroupIndex = spec.swipeToSlide\r\n          ? getTraversedSlideGroupCount(spec)\r\n          : currentSlideGroupIndex - spec.groupsToScroll\r\n        slideGroupCount = swipeToSlide\r\n          ? checkNavigable(spec, newSlideGroupIndex)\r\n          : newSlideGroupIndex\r\n        state.currentDirection = 1\r\n        break\r\n      default:\r\n        slideGroupCount = currentSlideGroupIndex\r\n    }\r\n    state.triggerSlideGroupHandler = slideGroupCount\r\n  } else {\r\n    // Adjust the track back to its original position.\r\n    let currentLeft = getTrackLeft(spec)\r\n    state.trackStyle = getTrackAnimateCSS(spec, currentLeft)\r\n  }\r\n  return state\r\n}\r\n\r\nexport function getLazySlidesOnLeft(spec: LazyInfoSpec) {\r\n  return spec.centerMode\r\n    ? Math.floor(spec.groupsToShow / 2) +\r\n        (parseInt(spec.centerPadding) > 0 ? 1 : 0)\r\n    : 0\r\n}\r\n\r\nexport function getLazySlidesOnRight(spec: LazyInfoSpec) {\r\n  return spec.centerMode\r\n    ? Math.floor((spec.groupsToShow - 1) / 2) +\r\n        1 +\r\n        (parseInt(spec.centerPadding) > 0 ? 1 : 0)\r\n    : spec.groupsToShow\r\n}\r\n\r\nexport function getLazyStartIndex(spec: LazyInfoSpec) {\r\n  return spec.currentSlideGroupIndex - getLazySlidesOnLeft(spec)\r\n}\r\n\r\nexport function getLazyEndIndex(spec: LazyInfoSpec) {\r\n  return spec.currentSlideGroupIndex + getLazySlidesOnRight(spec)\r\n}\r\n\r\nexport function getOnDemandLazySlideGroups(spec: LazyInfoSpec) {\r\n  let onDemandSlideGroups = []\r\n  const startIndex = getLazyStartIndex(spec)\r\n  const endIndex = getLazyEndIndex(spec)\r\n  for (\r\n    let slideGroupIndex = startIndex;\r\n    slideGroupIndex < endIndex;\r\n    slideGroupIndex++\r\n  ) {\r\n    if (spec.lazyLoadedList?.indexOf(slideGroupIndex) < 0) {\r\n      onDemandSlideGroups.push(slideGroupIndex)\r\n    }\r\n  }\r\n  return onDemandSlideGroups\r\n}\r\n\r\nexport function getTrackCSS(spec: TrackInfoSpec, left: number) {\r\n  let trackWidth, trackHeight\r\n  const trackChildren = spec.slideGroupCount + 2 * spec.groupsToShow\r\n  if (!spec.vertical) {\r\n    trackWidth =\r\n      getTotalSlideGroups(spec) * parseInt(`${spec.slideGroupWidth || 0}`)\r\n  } else {\r\n    trackHeight = trackChildren * parseInt(`${spec.slideGroupHeight || 0}`)\r\n  }\r\n  let style: Record<string, string | number> = {\r\n    opacity: 1,\r\n    transition: ''\r\n  }\r\n  if (spec.useCSSTransform) {\r\n    let transform = !spec.vertical\r\n      ? 'translate3d(' + left + 'px, 0px, 0px)'\r\n      : 'translate3d(0px, ' + left + 'px, 0px)'\r\n    style = {\r\n      ...style,\r\n      transform\r\n    }\r\n  } else {\r\n    if (spec.vertical) {\r\n      style['top'] = left\r\n    } else {\r\n      style['left'] = left\r\n    }\r\n  }\r\n  if (spec.fade) style = { opacity: 1 }\r\n  if (trackWidth) style.width = trackWidth + 'px'\r\n  if (trackHeight) style.height = trackHeight + 'px'\r\n\r\n  return style\r\n}\r\n\r\nexport function getTotalSlideGroups(spec: TrackInfoSpec) {\r\n  return spec.slideGroupCount <= spec.groupsToShow\r\n    ? spec.slideGroupCount\r\n    : getTotalPreClones(spec) + spec.slideGroupCount + getTotalPostClones(spec)\r\n}\r\n\r\nexport function getTrackAnimateCSS(spec: TrackInfoSpec, left: number) {\r\n  let style = getTrackCSS(spec, left)\r\n  // useCSS is true by default so it can be undefined\r\n  if (spec.useCSSTransform) {\r\n    style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase\r\n  } else {\r\n    if (spec.vertical) {\r\n      style.transition = 'top ' + spec.speed + 'ms ' + spec.cssEase\r\n    } else {\r\n      style.transition = 'left ' + spec.speed + 'ms ' + spec.cssEase\r\n    }\r\n  }\r\n  if (spec.ignorePrefersReducedMotion) {\r\n    style.transition += ' !important'\r\n  }\r\n  return style\r\n}\r\n\r\nexport function getTrackLeft(spec: TrackInfoSpec) {\r\n  let {\r\n    centerPadding,\r\n    currentSlideGroupIndex,\r\n    trackEl,\r\n    infinite,\r\n    centerMode,\r\n    slideGroupCount,\r\n    groupsToShow,\r\n    groupsToScroll,\r\n    slideGroupWidth,\r\n    listWidth,\r\n    variableWidth,\r\n    slideGroupHeight,\r\n    fade,\r\n    vertical,\r\n    rtl\r\n  } = spec\r\n  listWidth = listWidth || 0\r\n  slideGroupWidth = slideGroupWidth || 0\r\n  slideGroupHeight = slideGroupHeight || 0\r\n\r\n  let slideGroupOffset = 0\r\n  let targetLeft\r\n  let targetSlide: HTMLElement | undefined\r\n  let verticalOffset = 0\r\n\r\n  if (fade || slideGroupCount === 1) {\r\n    return 0\r\n  }\r\n\r\n  let slidesToOffset = 0\r\n  if (infinite) {\r\n    slidesToOffset = -getTotalPreClones(spec) // bring active slide to the beginning of visible area\r\n    // if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting groupsToScroll children\r\n    if (\r\n      slideGroupCount % groupsToScroll !== 0 &&\r\n      currentSlideGroupIndex + groupsToScroll > slideGroupCount\r\n    ) {\r\n      slidesToOffset = -(currentSlideGroupIndex > slideGroupCount\r\n        ? groupsToShow - (currentSlideGroupIndex - slideGroupCount)\r\n        : slideGroupCount % groupsToScroll)\r\n    }\r\n    // in center mode, shift current slide group to the center of the frame\r\n    if (centerMode) {\r\n      slidesToOffset += Math.floor(groupsToShow / 2)\r\n    }\r\n  } else {\r\n    if (\r\n      slideGroupCount % groupsToScroll !== 0 &&\r\n      currentSlideGroupIndex + groupsToScroll > slideGroupCount\r\n    ) {\r\n      slidesToOffset = groupsToShow - (slideGroupCount % groupsToScroll)\r\n    }\r\n    if (centerMode) {\r\n      slidesToOffset = Math.floor(groupsToShow / 2)\r\n    }\r\n  }\r\n  slideGroupOffset = slidesToOffset * parseInt(`${slideGroupWidth}`)\r\n  verticalOffset = slidesToOffset * parseInt(`${slideGroupHeight}`)\r\n\r\n  if (!vertical) {\r\n    targetLeft =\r\n      currentSlideGroupIndex * parseInt(`${slideGroupWidth}`) * -1 +\r\n      slideGroupOffset\r\n  } else {\r\n    targetLeft =\r\n      currentSlideGroupIndex * parseInt(`${slideGroupHeight}`) * -1 +\r\n      verticalOffset\r\n  }\r\n\r\n  if (variableWidth === true) {\r\n    let targetSlideIndex\r\n    targetSlideIndex = currentSlideGroupIndex + getTotalPreClones(spec)\r\n    targetSlide =\r\n      trackEl && (trackEl.childNodes[targetSlideIndex] as HTMLElement)\r\n    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0\r\n    if (centerMode === true) {\r\n      targetSlideIndex = infinite\r\n        ? currentSlideGroupIndex + getTotalPreClones(spec)\r\n        : currentSlideGroupIndex\r\n      targetLeft = 0\r\n      if (trackEl) {\r\n        targetSlide = trackEl.children[targetSlideIndex] as HTMLElement\r\n        for (let slide = 0; slide < targetSlideIndex; slide++) {\r\n          if (!trackEl.children[slide]) continue\r\n          targetLeft -= (trackEl.children[slide] as HTMLElement).offsetWidth\r\n        }\r\n      }\r\n      targetLeft -= parseInt(centerPadding)\r\n      if (targetSlide) {\r\n        targetLeft += listWidth - targetSlide.offsetWidth / 2\r\n      }\r\n    }\r\n  }\r\n\r\n  if (rtl) targetLeft = -targetLeft\r\n\r\n  return targetLeft\r\n}\r\n\r\nexport const canGoPrev = (spec: GoPrevSpec) => {\r\n  return (\r\n    spec.infinite ||\r\n    (spec.currentSlideGroupIndex !== 0 &&\r\n      spec.slideGroupCount > spec.groupsToShow)\r\n  )\r\n}\r\n\r\nexport const canGoNext = (spec: GoNextSpec) => {\r\n  let canGo = true\r\n  if (!spec.infinite) {\r\n    if (spec.centerMode) {\r\n      canGo = spec.currentSlideGroupIndex < spec.slideGroupCount - 1\r\n    } else if (\r\n      spec.slideGroupCount <= spec.groupsToShow ||\r\n      spec.currentSlideGroupIndex >= spec.slideGroupCount - spec.groupsToShow\r\n    ) {\r\n      canGo = false\r\n    }\r\n  }\r\n  return canGo\r\n}\r\n\r\nexport const getStatesOnSlide = (spec: OnSlideSpec) => {\r\n  let {\r\n    waitForAnimate,\r\n    animating,\r\n    fade,\r\n    infinite,\r\n    index,\r\n    slideGroupCount,\r\n    lazyLoadedList,\r\n    lazyLoad,\r\n    currentSlideGroupIndex,\r\n    centerMode,\r\n    groupsToScroll,\r\n    groupsToShow,\r\n    useCSSTransitions\r\n  } = spec\r\n  if (\r\n    (waitForAnimate && animating) ||\r\n    (fade && !infinite && (index < 0 || index >= slideGroupCount))\r\n  )\r\n    return\r\n  let animationSlideGroupIndex = index,\r\n    finalSlideGroupIndex\r\n  let slidingState: Partial<SliderState> = {},\r\n    afterSlidingState: Partial<SliderState> = {}\r\n  if (fade) {\r\n    if (index < 0) {\r\n      animationSlideGroupIndex += slideGroupCount\r\n    } else if (index >= slideGroupCount) {\r\n      animationSlideGroupIndex -= slideGroupCount\r\n    }\r\n    if (lazyLoad && lazyLoadedList.indexOf(animationSlideGroupIndex) < 0) {\r\n      lazyLoadedList.push(animationSlideGroupIndex)\r\n    }\r\n    slidingState = {\r\n      animating: true,\r\n      currentSlideGroupIndex: animationSlideGroupIndex,\r\n      lazyLoadedList\r\n    }\r\n    afterSlidingState = { animating: false }\r\n    return {\r\n      slidingState,\r\n      afterSlidingState\r\n    }\r\n  }\r\n  finalSlideGroupIndex = animationSlideGroupIndex\r\n  if (animationSlideGroupIndex < 0) {\r\n    finalSlideGroupIndex = animationSlideGroupIndex + slideGroupCount\r\n    if (!infinite) finalSlideGroupIndex = 0\r\n    else if (slideGroupCount % groupsToScroll !== 0)\r\n      finalSlideGroupIndex =\r\n        slideGroupCount - (slideGroupCount % groupsToScroll)\r\n  } else if (\r\n    !canGoNext(spec) &&\r\n    animationSlideGroupIndex > currentSlideGroupIndex\r\n  ) {\r\n    animationSlideGroupIndex = finalSlideGroupIndex = currentSlideGroupIndex\r\n  } else if (centerMode && animationSlideGroupIndex >= slideGroupCount) {\r\n    animationSlideGroupIndex = infinite ? slideGroupCount : slideGroupCount - 1\r\n    finalSlideGroupIndex = infinite ? 0 : slideGroupCount - 1\r\n  } else if (animationSlideGroupIndex >= slideGroupCount) {\r\n    finalSlideGroupIndex = animationSlideGroupIndex - slideGroupCount\r\n    if (!infinite) finalSlideGroupIndex = slideGroupCount - groupsToShow\r\n    else if (slideGroupCount % groupsToScroll !== 0) finalSlideGroupIndex = 0\r\n  }\r\n  let finalLeft = getTrackLeft({\r\n    ...spec,\r\n    currentSlideGroupIndex: finalSlideGroupIndex\r\n  })\r\n  let animationLeft = getTrackLeft({\r\n    ...spec,\r\n    currentSlideGroupIndex: animationSlideGroupIndex\r\n  })\r\n  if (!infinite) {\r\n    if (animationLeft === finalLeft)\r\n      animationSlideGroupIndex = finalSlideGroupIndex\r\n    animationLeft = finalLeft\r\n  }\r\n  if (lazyLoad)\r\n    lazyLoadedList = lazyLoadedList.concat(\r\n      getOnDemandLazySlideGroups({\r\n        ...spec,\r\n        currentSlideGroupIndex: animationSlideGroupIndex\r\n      })\r\n    )\r\n  if (!useCSSTransitions) {\r\n    slidingState = {\r\n      currentSlideGroupIndex: finalSlideGroupIndex,\r\n      trackStyle: getTrackCSS(spec, finalLeft),\r\n      lazyLoadedList\r\n    }\r\n    return {\r\n      slidingState,\r\n      afterSlidingState\r\n    }\r\n  }\r\n  slidingState = {\r\n    animating: true,\r\n    currentSlideGroupIndex: finalSlideGroupIndex,\r\n    trackStyle: getTrackAnimateCSS(spec, animationLeft),\r\n    lazyLoadedList\r\n  }\r\n  afterSlidingState = {\r\n    animating: false,\r\n    currentSlideGroupIndex: finalSlideGroupIndex,\r\n    trackStyle: getTrackCSS(spec, finalLeft),\r\n    swipeLeft: undefined\r\n  }\r\n  return { slidingState, afterSlidingState }\r\n}\r\n\r\nexport function getTotalPreClones(spec: CloneInfoSpec) {\r\n  if (!spec.infinite) {\r\n    return 0\r\n  }\r\n  if (spec.variableWidth) {\r\n    return spec.slideGroupCount\r\n  }\r\n  return spec.groupsToShow + (spec.centerMode ? 1 : 0)\r\n}\r\n\r\nexport function getTotalPostClones(spec: CloneInfoSpec) {\r\n  if (!spec.infinite) {\r\n    return 0\r\n  }\r\n  return spec.slideGroupCount\r\n}\r\n\r\nexport const getSwipeMoveState = (\r\n  e: SwipeEvent,\r\n  spec: SwipeMoveSpec\r\n): SwipeMoveState | undefined => {\r\n  const {\r\n    scrolling,\r\n    animating,\r\n    vertical,\r\n    swipeToSlide,\r\n    verticalSwiping,\r\n    rtl,\r\n    currentSlideGroupIndex,\r\n    edgeFriction,\r\n    edgeDragged,\r\n    onEdge,\r\n    swiped,\r\n    swiping,\r\n    slideGroupCount,\r\n    groupsToScroll,\r\n    infinite,\r\n    touchObject,\r\n    swipeEvent,\r\n    listHeight,\r\n    listWidth\r\n  } = spec\r\n  if (scrolling) return\r\n  if (animating) {\r\n    e.preventDefault()\r\n    return\r\n  }\r\n  if (vertical && swipeToSlide && verticalSwiping) e.preventDefault()\r\n  let swipeLeft,\r\n    state: SwipeMoveState = {}\r\n  let curLeft = getTrackLeft(spec)\r\n  touchObject.curX =\r\n    window.TouchEvent && e instanceof TouchEvent\r\n      ? e.touches[0].pageX\r\n      : (e as MouseEvent).clientX\r\n  touchObject.curY =\r\n    window.TouchEvent && e instanceof TouchEvent\r\n      ? e.touches[0].pageY\r\n      : (e as MouseEvent).clientY\r\n  touchObject.swipeLength = Math.round(\r\n    Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2))\r\n  )\r\n  let verticalSwipeLength = Math.round(\r\n    Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2))\r\n  )\r\n  if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {\r\n    return { scrolling: true }\r\n  }\r\n  if (verticalSwiping) touchObject.swipeLength = verticalSwipeLength\r\n  let positionOffset =\r\n    (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1)\r\n  if (verticalSwiping)\r\n    positionOffset = touchObject.curY > touchObject.startY ? 1 : -1\r\n\r\n  let dotCount = Math.ceil(slideGroupCount / groupsToScroll)\r\n  let swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping)\r\n  let touchSwipeLength = touchObject.swipeLength\r\n  if (!infinite) {\r\n    if (\r\n      (currentSlideGroupIndex === 0 && swipeDirection === 'right') ||\r\n      (currentSlideGroupIndex + 1 >= dotCount && swipeDirection === 'left') ||\r\n      (!canGoNext(spec) && swipeDirection === 'left')\r\n    ) {\r\n      touchSwipeLength = Math.round(touchObject.swipeLength * edgeFriction)\r\n      if (edgeDragged === false && onEdge) {\r\n        onEdge(swipeDirection)\r\n        state.edgeDragged = true\r\n      }\r\n    }\r\n  }\r\n  if (!swiped && swipeEvent) {\r\n    swipeEvent(swipeDirection)\r\n    state.swiped = true\r\n  }\r\n  if (!vertical) {\r\n    if (!rtl) {\r\n      swipeLeft = curLeft + touchSwipeLength * positionOffset\r\n    } else {\r\n      swipeLeft = curLeft - touchSwipeLength * positionOffset\r\n    }\r\n  } else {\r\n    swipeLeft =\r\n      curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset\r\n  }\r\n  if (verticalSwiping) {\r\n    swipeLeft = curLeft + touchSwipeLength * positionOffset\r\n  }\r\n  state = {\r\n    ...state,\r\n    touchObject,\r\n    swipeLeft,\r\n    trackStyle: getTrackCSS(spec, swipeLeft),\r\n    swipeDirection\r\n  }\r\n  if (\r\n    Math.abs(touchObject.curX - touchObject.startX) <\r\n    Math.abs(touchObject.curY - touchObject.startY) * 0.8\r\n  ) {\r\n    return state\r\n  }\r\n  if (touchObject.swipeLength > 10) {\r\n    state.swiping = true\r\n    e.preventDefault()\r\n  }\r\n  return state\r\n}\r\n\r\nexport function getSlideGroupCount(slideCount: number, groupsToShow: number) {\r\n  return Math.ceil(slideCount / groupsToShow)\r\n}\r\n\r\nexport function getSliderState(spec: SliderStateInfoSpec) {\r\n  let slideGroupCount = getSlideGroupCount(\r\n    spec.slides.length,\r\n    spec.groupsToShow\r\n  )\r\n  let listWidth = Math.ceil(spec.listEl?.offsetWidth || 0)\r\n  let trackWidth = Math.ceil(spec.trackEl?.offsetWidth || 0)\r\n  let slideGroupWidth\r\n  if (!spec.vertical) {\r\n    let centerPaddingAdj = spec.centerMode\r\n      ? parseInt(spec.centerPadding) * 2\r\n      : 0\r\n    if (\r\n      typeof spec.centerPadding === 'string' &&\r\n      spec.centerPadding.slice(-1) === '%'\r\n    ) {\r\n      centerPaddingAdj *= listWidth / 100\r\n    }\r\n    slideGroupWidth = Math.ceil(\r\n      (listWidth - centerPaddingAdj) / spec.groupsToShow\r\n    )\r\n  } else {\r\n    slideGroupWidth = listWidth\r\n  }\r\n  let slideGroupHeight =\r\n    spec.listEl && spec.listEl.querySelector('[data-index=\"0\"]')\r\n      ? spec.listEl.querySelector<HTMLElement>('[data-index=\"0\"]')\r\n          ?.offsetHeight || 0\r\n      : 0\r\n  let listHeight = slideGroupHeight * spec.groupsToShow\r\n  let currentSlideGroupIndex =\r\n    spec.currentSlideGroupIndex === undefined\r\n      ? spec.initialGroupIndex\r\n      : spec.currentSlideGroupIndex\r\n  if (spec.rtl && spec.currentSlideGroupIndex === undefined) {\r\n    currentSlideGroupIndex = slideGroupCount - 1 - spec.initialGroupIndex\r\n  }\r\n  let lazyLoadedList = spec.lazyLoadedList || []\r\n  let slideGroupsToLoad = getOnDemandLazySlideGroups(spec as LazyInfoSpec)\r\n  lazyLoadedList.concat(slideGroupsToLoad)\r\n\r\n  let sliderState: MarkRequiredWithPartialBase<\r\n    SliderState,\r\n    | 'currentSlideGroupIndex'\r\n    | 'listWidth'\r\n    | 'slideGroupHeight'\r\n    | 'slideGroupWidth'\r\n  > & { slideGroupCount: number } = {\r\n    slideGroupCount,\r\n    slideGroupWidth,\r\n    listWidth,\r\n    trackWidth,\r\n    currentSlideGroupIndex,\r\n    slideGroupHeight,\r\n    listHeight,\r\n    lazyLoadedList\r\n  }\r\n\r\n  if (spec.autoplaying === null && spec.autoplay) {\r\n    sliderState.autoplaying = PlayingType.playing\r\n  }\r\n\r\n  return sliderState\r\n}\r\n","export class MatchMedia {\r\n  mqlRecords: Record<string, MediaQueryList> = {}\r\n\r\n  register(query: string, handler: (predicate: { matches: boolean }) => void) {\r\n    if (this.mqlRecords[query]) {\r\n      this.addMqlListener(query, handler)\r\n    } else {\r\n      this.mqlRecords[query] = window.matchMedia(query)\r\n      this.addMqlListener(query, handler)\r\n    }\r\n    if (this.mqlRecords[query].matches) {\r\n      handler({ matches: true })\r\n    }\r\n  }\r\n\r\n  unregister(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    if (this.mqlRecords[query]) {\r\n      this.removeMqlListener(query, handler)\r\n    }\r\n  }\r\n\r\n  private addMqlListener(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    try {\r\n      this.mqlRecords[query].addEventListener('change', handler)\r\n    } catch (_) {\r\n      try {\r\n        this.mqlRecords[query].addListener(handler)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n  }\r\n\r\n  private removeMqlListener(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    try {\r\n      this.mqlRecords[query].removeEventListener('change', handler)\r\n    } catch (_) {\r\n      try {\r\n        this.mqlRecords[query].removeListener(handler)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n  }\r\n}\r\n","export * from './carousel-utils'\r\nexport * from './match-media'\r\n\r\nexport const canUseDOM = () =>\r\n  !!(\r\n    typeof window !== 'undefined' &&\r\n    window.document &&\r\n    window.document.createElement\r\n  )\r\n\r\nexport const filterUndefined = <T extends object>(props: T) =>\r\n  Object.keys(props)\r\n    .filter((key) => props[key as keyof T] !== undefined)\r\n    .reduce((acc, key) => {\r\n      acc[key as keyof T] = props[key as keyof T]\r\n      return acc\r\n    }, {} as T)\r\n\r\nexport function clearSelection() {\r\n  if (!window.getSelection) return\r\n  if (window.getSelection()?.empty) {\r\n    window.getSelection()!.empty()\r\n  } else if (window.getSelection()?.removeAllRanges) {\r\n    window.getSelection()!.removeAllRanges()\r\n  }\r\n}\r\n\r\nexport function json2mq(obj: Record<string, any>) {\r\n  const conditions = Object.keys(obj).map((key) => {\r\n    let value = obj[key]\r\n    if (Array.isArray(value)) {\r\n      value = value.join(' and ')\r\n    }\r\n    return `(${key}: ${value})`\r\n  })\r\n  return conditions.join(' and ')\r\n}\r\n\r\nexport function debounce(\r\n  callback: () => Promise<void>,\r\n  wait: number\r\n): { cancel: () => void } {\r\n  const timeoutId = setTimeout(callback, wait)\r\n  return { cancel: () => clearTimeout(timeoutId) }\r\n}\r\n","import { PropType, VNode } from 'vue'\r\nimport {\r\n  ArrowProps,\r\n  DotsProps,\r\n  Props,\r\n  Responsive,\r\n  SlideNavigation,\r\n  SliderState,\r\n  TrackProps,\r\n  WidthDetection\r\n} from '../types'\r\n\r\ntype VuePropDef<T extends string> = Record<\r\n  T,\r\n  { type: PropType<unknown>; default: unknown }\r\n>\r\n\r\nconst makeDefaultProps = (selectFields?: string[]) => {\r\n  const defaultProps = {\r\n    accessibility: { type: Boolean, default: true },\r\n    adaptiveHeight: { type: Boolean, default: false },\r\n    arrows: { type: Boolean, default: true },\r\n    asNavFor: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    autoplay: { type: Boolean, default: false },\r\n    autoplaySpeed: { type: Number, default: 3000 },\r\n    centerMode: { type: Boolean, default: false },\r\n    centerPadding: { type: String, default: '50px' },\r\n    cssEase: { type: String, default: 'ease' },\r\n    dots: { type: Boolean, default: false },\r\n    draggable: { type: Boolean, default: true },\r\n    edgeFriction: { type: Number, default: 0.35 },\r\n    fade: { type: Boolean, default: false },\r\n    focusOnSelect: { type: Boolean, default: false },\r\n    ignorePrefersReducedMotion: { type: Boolean, default: false },\r\n    infinite: { type: Boolean, default: true },\r\n    initialGroupIndex: { type: Number, default: 0 },\r\n    lazyLoad: { type: String, default: null },\r\n    nextArrowLabel: { type: String, default: 'Next' },\r\n    pauseOnDotsHover: { type: Boolean, default: false },\r\n    pauseOnFocus: { type: Boolean, default: false },\r\n    pauseOnHover: { type: Boolean, default: true },\r\n    prevArrowLabel: { type: String, default: 'Previous' },\r\n    responsive: { type: Array as PropType<Responsive[]>, default: [] },\r\n    rtl: { type: Boolean, default: false },\r\n    slidesPerGroup: { type: Number, default: 1 },\r\n    groupsToScroll: { type: Number, default: 1 },\r\n    groupsToShow: { type: Number, default: 1 },\r\n    speed: { type: Number, default: 500 },\r\n    swipe: { type: Boolean, default: true },\r\n    swipeToSlide: { type: Boolean, default: false },\r\n    touchMove: { type: Boolean, default: true },\r\n    touchThreshold: { type: Number, default: 5 },\r\n    useCSSTransitions: { type: Boolean, default: true },\r\n    useCSSTransform: { type: Boolean, default: true },\r\n    variableWidth: { type: Boolean, default: false },\r\n    vertical: { type: Boolean, default: false },\r\n    verticalSwiping: { type: Boolean, default: false },\r\n    waitForAnimate: { type: Boolean, default: true },\r\n    widthDetection: { type: String, default: WidthDetection.auto }\r\n  } satisfies VuePropDef<keyof Props>\r\n  if (!selectFields) return defaultProps\r\n  return Object.keys(defaultProps).reduce<{\r\n    [key: string]: { type: PropType<unknown>; default: unknown }\r\n  }>((acc, key) => {\r\n    if (selectFields.includes(key)) {\r\n      acc[key as keyof Props] = (defaultProps as any)[key]\r\n    }\r\n    return acc\r\n  }, {}) as typeof defaultProps\r\n}\r\n\r\nexport const defaultProps = makeDefaultProps() satisfies VuePropDef<keyof Props>\r\n\r\nexport const defaultPropValues = Object.keys(defaultProps).reduce<{\r\n  [key: string]: unknown\r\n}>((acc, key) => {\r\n  acc[key] = (defaultProps as any)[key].default\r\n  return acc\r\n}, {}) as {\r\n  [K in keyof Props]: unknown\r\n} as Props\r\n\r\nexport const makeDefaultSliderState: () => SliderState = () => ({\r\n  animating: false,\r\n  autoplaying: null,\r\n  autoplayTimer: null,\r\n  currentDirection: 0,\r\n  currentLeft: null,\r\n  currentSlideGroupIndex: 0,\r\n  detectingWidth: false,\r\n  direction: 1,\r\n  dragging: false,\r\n  edgeDragged: false,\r\n  initialized: false,\r\n  lazyLoadedList: [],\r\n  listHeight: undefined,\r\n  listWidth: undefined,\r\n  scrolling: false,\r\n  slideGroupHeight: undefined,\r\n  slideGroupWidth: undefined,\r\n  swipeLeft: undefined,\r\n  swiped: false,\r\n  swiping: false,\r\n  touchObject: { startX: 0, startY: 0, curX: 0, curY: 0, swipeLength: 0 },\r\n  trackStyle: {},\r\n  trackWidth: 0\r\n})\r\n\r\nexport const defaultTrackProps = {\r\n  ...makeDefaultProps([\r\n    'centerMode',\r\n    'centerPadding',\r\n    'cssEase',\r\n    'fade',\r\n    'ignorePrefersReducedMotion',\r\n    'infinite',\r\n    'lazyLoad',\r\n    'rtl',\r\n    'groupsToScroll',\r\n    'groupsToShow',\r\n    'speed',\r\n    'variableWidth',\r\n    'vertical'\r\n  ]),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    detectingWidth: { type: Boolean, default: false },\r\n    lazyLoadedList: {\r\n      type: Array as PropType<number[]>,\r\n      default: []\r\n    },\r\n    listHeight: { type: Number, default: undefined },\r\n    trackStyle: { type: Object, default: {} },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    rawSlideGroups: { type: Array as PropType<VNode[][]>, default: [] },\r\n    slideGroupHeight: { type: [String, Number], default: undefined },\r\n    slideGroupWidth: { type: [String, Number], default: undefined }\r\n  }\r\n} satisfies VuePropDef<keyof TrackProps>\r\n\r\nexport const defaultArrowProps = {\r\n  ...makeDefaultProps([\r\n    'centerMode',\r\n    'infinite',\r\n    'groupsToShow',\r\n    'prevArrowLabel',\r\n    'nextArrowLabel'\r\n  ]),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    disabled: { type: Boolean, default: false },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    type: { type: String as PropType<SlideNavigation>, default: 'prev' }\r\n  }\r\n} satisfies VuePropDef<keyof ArrowProps>\r\n\r\nexport const defaultDotsProps = {\r\n  ...makeDefaultProps(['infinite', 'groupsToScroll', 'groupsToShow']),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    pageCount: { type: Number, default: 0 }\r\n  }\r\n} satisfies VuePropDef<keyof DotsProps>\r\n","<template>\n  <template v-if=\"type === SlideNavigation.previous\">\n    <slot name=\"prevArrow\" v-bind=\"arrowSlotProps\">\n      <button\n        type=\"button\"\n        data-role=\"none\"\n        class=\"v-slick-arrow prev\"\n        :class=\"{ disabled }\"\n        @click=\"clickHandler\"\n      >\n        {{ prevArrowLabel }}\n      </button>\n    </slot>\n  </template>\n  <template v-else>\n    <slot name=\"nextArrow\" v-bind=\"arrowSlotProps\">\n      <button\n        type=\"button\"\n        data-role=\"none\"\n        class=\"v-slick-arrow next\"\n        :class=\"{ disabled }\"\n        @click=\"clickHandler\"\n      >\n        {{ nextArrowLabel }}\n      </button>\n    </slot>\n  </template>\n</template>\n<script setup lang=\"ts\">\nimport { ArrowSlotProps, SlideNavigation } from '@lib/types'\nimport { computed } from 'vue'\nimport { defaultArrowProps } from './props'\n\nconst props = defineProps(defaultArrowProps)\nconst emit = defineEmits([SlideNavigation.previous, SlideNavigation.next])\nconst clickHandler = computed(() => () => {\n  if (props.disabled) return\n  emit(props.type)\n})\nconst arrowSlotProps = computed<ArrowSlotProps>(() => ({\n  currentSlideGroupIndex: props.currentSlideGroupIndex,\n  slideGroupCount: props.slideGroupCount,\n  onClick: clickHandler.value,\n  disabled: !props.disabled\n}))\n</script>\n<style scoped>\n.v-slick-arrow {\n  display: block;\n}\n</style>\n","<template>\n  <div\n    class=\"v-slick-track\"\n    :class=\"{ center: centerMode, vertical: vertical }\"\n    :style=\"[trackStyle, detectingWidth ? { width: '0 !important' } : {}]\"\n  >\n    <div\n      v-for=\"(slideGroup, i) in preCloneSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      class=\"v-slick-slide-group clone\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n    <div\n      v-for=\"(slideGroup, i) in originalSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      class=\"v-slick-slide-group\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n    <div\n      v-for=\"(slideGroup, i) in postCloneSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      class=\"v-slick-slide-group clone\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { defaultTrackProps } from './props'\nimport {\n  ChildClickPayload,\n  CloneInfoSpec,\n  LazyInfoSpec,\n  SlideGroup,\n  TrackProps\n} from '@lib/types'\nimport {\n  getLazyEndIndex,\n  getLazyStartIndex,\n  getTotalPreClones\n} from '@lib/utils'\n\nconst props = defineProps(defaultTrackProps) as TrackProps\nconst emit = defineEmits<{\n  childClick: [payload: ChildClickPayload]\n}>()\n\nconst getSlideGroupClasses = (index: number) => {\n  let isActive = false,\n    isCenter = false,\n    isCurrent = false,\n    centerOffset: number\n  if (props.centerMode) {\n    centerOffset = Math.floor(props.groupsToShow / 2)\n    isCenter =\n      (index - props.currentSlideGroupIndex) % props.slideGroupCount === 0\n    if (\n      index > props.currentSlideGroupIndex - centerOffset - 1 &&\n      index <= props.currentSlideGroupIndex + centerOffset\n    ) {\n      isActive = true\n    }\n  } else {\n    isActive =\n      props.currentSlideGroupIndex <= index &&\n      index < props.currentSlideGroupIndex + props.groupsToShow\n  }\n  isCurrent = index === props.currentSlideGroupIndex\n  return Object.entries({\n    active: isActive,\n    center: isCenter,\n    current: isCurrent\n  })\n    .filter(([, value]) => value)\n    .map(([key]) => key)\n}\n\nconst getSlideGroupStyle = (index: number) => {\n  let style: {\n    width?: string\n    position?: string\n    top?: string\n    left?: string\n    opacity?: number\n    transition?: string\n  } = {}\n\n  if (props.variableWidth === undefined || props.variableWidth === false) {\n    style.width =\n      typeof props.slideGroupWidth === 'number'\n        ? `${props.slideGroupWidth}px`\n        : props.slideGroupWidth\n  }\n\n  if (props.fade) {\n    style.position = 'relative'\n    if (props.vertical) {\n      const slideGroupHeight = !props.slideGroupHeight\n        ? 0\n        : typeof props.slideGroupHeight === 'string'\n          ? parseFloat(props.slideGroupHeight)\n          : props.slideGroupHeight\n      style.top = `${-index * slideGroupHeight}px`\n    } else {\n      const slideGroupWidth = !props.slideGroupWidth\n        ? 0\n        : typeof props.slideGroupWidth === 'string'\n          ? parseFloat(props.slideGroupWidth)\n          : props.slideGroupWidth\n\n      const left = props.rtl\n        ? index * slideGroupWidth\n        : -index * slideGroupWidth\n      style.left = `${left}px`\n    }\n    style.opacity = props.currentSlideGroupIndex === index ? 1 : 0\n    style.transition =\n      'opacity ' +\n      props.speed +\n      'ms ' +\n      props.cssEase +\n      ', ' +\n      'visibility ' +\n      props.speed +\n      'ms ' +\n      props.cssEase\n    if (props.ignorePrefersReducedMotion) {\n      style.transition += ' !important'\n    }\n  }\n\n  return style\n}\n\nconst originalSlideGroups = computed<SlideGroup[]>(() => {\n  const slideGroups = props.rawSlideGroups.map((rawSlideGroup, index) => {\n    const style = getSlideGroupStyle(index)\n    const classes = getSlideGroupClasses(index)\n    if (props.fade && classes.includes('active')) {\n      Object.assign(style, { zIndex: 1 })\n    }\n    const slideGroup: SlideGroup = {\n      slides: [],\n      key: `original-${index}`,\n      class: classes,\n      style,\n      attrs: {\n        'data-index': index,\n        'aria-hidden': `${!classes.includes('active')}`\n      },\n      onClick: () => {\n        emit('childClick', {\n          index:\n            props.rtl && props.infinite ? props.slideGroupCount + index : index\n        })\n      }\n    }\n    if (\n      !props.lazyLoad ||\n      (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n    ) {\n      slideGroup.slides = rawSlideGroup\n    }\n    return slideGroup\n  })\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n\nconst preCloneSlideGroups = computed<SlideGroup[]>(() => {\n  if (\n    !props.infinite ||\n    props.fade ||\n    props.slideGroupCount <= props.groupsToShow\n  ) {\n    return []\n  }\n  const slideGroups = props.rawSlideGroups\n    .map((rawSlideGroup, index) => {\n      const preCloneNo = props.slideGroupCount - index\n      if (preCloneNo > getTotalPreClones(props as CloneInfoSpec)) return\n      const key = -preCloneNo\n      const slideGroup: SlideGroup = {\n        slides: [],\n        key: `preclone-${key}`,\n        class: getSlideGroupClasses(key),\n        style: getSlideGroupStyle(index),\n        attrs: {\n          'data-index': key,\n          'aria-hidden': 'true'\n        },\n        onClick: () => {\n          emit('childClick', {\n            index: key\n          })\n        }\n      }\n      if (\n        key >= getLazyStartIndex(props as LazyInfoSpec) ||\n        !props.lazyLoad ||\n        (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n      ) {\n        slideGroup.slides = rawSlideGroup\n      }\n      return slideGroup\n    })\n    .filter((slideGroup) => slideGroup) as SlideGroup[]\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n\nconst postCloneSlideGroups = computed<SlideGroup[]>(() => {\n  if (\n    !props.infinite ||\n    props.fade ||\n    props.slideGroupCount <= props.groupsToShow\n  ) {\n    return []\n  }\n  const slideGroups = props.rawSlideGroups.map((rawSlideGroup, index) => {\n    const key = props.slideGroupCount + index\n    const slideGroup: SlideGroup = {\n      slides: [],\n      key: `postclone-${key}`,\n      class: getSlideGroupClasses(key),\n      style: getSlideGroupStyle(index),\n      attrs: {\n        'data-index': key,\n        'aria-hidden':\n          props.infinite &&\n          props.slideGroupCount - props.currentSlideGroupIndex <\n            props.groupsToShow &&\n          index <\n            props.groupsToShow -\n              (props.slideGroupCount - props.currentSlideGroupIndex)\n            ? 'false'\n            : 'true'\n      },\n      onClick: () => {\n        emit('childClick', {\n          index: props.rtl ? props.slideGroupCount + key : key\n        })\n      }\n    }\n    if (\n      key < getLazyEndIndex(props as LazyInfoSpec) ||\n      !props.lazyLoad ||\n      (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n    ) {\n      slideGroup.slides = rawSlideGroup\n    }\n    return slideGroup\n  })\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n</script>\n\n<style scoped lang=\"scss\">\n.v-slick-track {\n  position: relative;\n  top: 0;\n  left: 0;\n  display: flex;\n  transform: translate3d(0, 0, 0);\n  &.center {\n    margin-left: auto;\n    margin-right: auto;\n  }\n  &.vertical {\n    flex-direction: column;\n    .v-slick-slide-group {\n      flex-direction: row;\n      height: auto;\n      & > * {\n        flex-grow: 1;\n      }\n    }\n  }\n  &.dragging img {\n    pointer-events: none;\n  }\n}\n.v-slick-slide-group {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  min-height: 1px;\n  flex-shrink: 0;\n  outline: none;\n}\n</style>\n","<template>\r\n  <ul\r\n    class=\"v-slick-dots\"\r\n    style=\"display: block\"\r\n    @mouseenter=\"$emit('dotsLeave')\"\r\n    @mouseleave=\"$emit('dotsLeave')\"\r\n    @mouseover=\"$emit('dotsOver')\"\r\n  >\r\n    <li\r\n      v-for=\"i in pageCount\"\r\n      :key=\"i\"\r\n      :class=\"{ active: isActive(i - 1) }\"\r\n      @click=\"\r\n        $emit('dotClick', {\r\n          index: i - 1,\r\n          groupsToScroll\r\n        })\r\n      \"\r\n    >\r\n      <slot name=\"customPaging\" :page=\"i - 1\">\r\n        <button>{{ i }}</button>\r\n      </slot>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script setup lang=\"ts\">\r\nimport { DotClickPayload } from '@lib/types'\r\nimport { defaultDotsProps } from './props'\r\n\r\ndefineEmits<{\r\n  dotClick: [payload: DotClickPayload]\r\n  dotsOver: []\r\n  dotsLeave: []\r\n}>()\r\nconst props = defineProps(defaultDotsProps)\r\nconst isActive = (i: number) => {\r\n  const leftBound = i * props.groupsToScroll\r\n  const rightBound = leftBound + props.groupsToScroll - 1\r\n  return (\r\n    props.currentSlideGroupIndex >= leftBound &&\r\n    props.currentSlideGroupIndex <= rightBound\r\n  )\r\n}\r\n</script>\r\n","<template>\r\n  <div\r\n    ref=\"vSlickCarouselRef\"\r\n    class=\"v-slick-carousel\"\r\n    :style=\"\r\n      widthDetection === WidthDetection.manual\r\n        ? state.detectingWidth\r\n          ? { width: '100%' }\r\n          : vSlickCarouselStyle\r\n        : {}\r\n    \"\r\n  >\r\n    <div class=\"v-slick-slider\" :dir=\"settings.rtl ? 'rtl' : 'ltr'\">\r\n      <VSlickArrow\r\n        v-if=\"settings.arrows\"\r\n        :type=\"SlideNavigation.previous\"\r\n        :center-mode=\"settings.centerMode\"\r\n        :infinite=\"settings.infinite\"\r\n        :groups-to-show=\"settings.groupsToShow\"\r\n        :slide-group-count=\"slideGroupCount\"\r\n        :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n        :disabled=\"!canGoPrev\"\r\n        @previous=\"handlePrevVSlickArrow\"\r\n      >\r\n        <template #prevArrow=\"arrowSlotProps\">\r\n          <slot name=\"prevArrow\" v-bind=\"arrowSlotProps\" />\r\n        </template>\r\n      </VSlickArrow>\r\n      <div\r\n        ref=\"vSlickListRef\"\r\n        class=\"v-slick-list\"\r\n        :class=\"{ dragging: state.dragging }\"\r\n        :style=\"vSlickListStyle\"\r\n        @click=\"handleClickVSlickList\"\r\n        @mousedown=\"handleMouseDownOrTouchStartVSlickList\"\r\n        @touchstart=\"handleMouseDownOrTouchStartVSlickList\"\r\n        @keydown=\"handleKeyDownVSlickList\"\r\n      >\r\n        <VSlickTrack\r\n          ref=\"vSlickTrackRef\"\r\n          :center-mode=\"settings.centerMode\"\r\n          :center-padding=\"settings.centerPadding\"\r\n          :raw-slide-groups=\"rawSlideGroups\"\r\n          :css-ease=\"cssEase\"\r\n          :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n          :detecting-width=\"state.detectingWidth\"\r\n          :fade=\"settings.fade\"\r\n          :ignore-prefers-reduced-motion=\"settings.ignorePrefersReducedMotion\"\r\n          :infinite=\"settings.infinite\"\r\n          :lazy-load=\"settings.lazyLoad\"\r\n          :lazy-loaded-list=\"state.lazyLoadedList\"\r\n          :list-height=\"state.listHeight\"\r\n          :rtl=\"settings.rtl\"\r\n          :slide-group-count=\"slideGroupCount\"\r\n          :slide-group-height=\"state.slideGroupHeight\"\r\n          :slide-group-width=\"state.slideGroupWidth\"\r\n          :groups-to-scroll=\"settings.groupsToScroll\"\r\n          :groups-to-show=\"settings.groupsToShow\"\r\n          :speed=\"settings.speed\"\r\n          :track-style=\"state.trackStyle\"\r\n          :variable-width=\"settings.variableWidth\"\r\n          :vertical=\"settings.vertical\"\r\n          @mouseenter=\"handleMouseEnterOrOverVSlickTrack\"\r\n          @mouseleave=\"handleMouseLeaveVSlickTrack\"\r\n          @mouseover=\"handleMouseEnterOrOverVSlickTrack\"\r\n          @child-click=\"handleChildClickVSlickTrack\"\r\n        />\r\n      </div>\r\n      <VSlickArrow\r\n        v-if=\"settings.arrows\"\r\n        :type=\"SlideNavigation.next\"\r\n        :center-mode=\"settings.centerMode\"\r\n        :infinite=\"settings.infinite\"\r\n        :groups-to-show=\"settings.groupsToShow\"\r\n        :slide-group-count=\"slideGroupCount\"\r\n        :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n        :disabled=\"!canGoNext\"\r\n        @next=\"handleNextVSlickArrow\"\r\n      >\r\n        <template #nextArrow=\"arrowSlotProps\">\r\n          <slot name=\"nextArrow\" v-bind=\"arrowSlotProps\" />\r\n        </template>\r\n      </VSlickArrow>\r\n    </div>\r\n    <VSlickDots\r\n      v-if=\"settings.dots\"\r\n      :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n      :infinite=\"settings.infinite\"\r\n      :slide-group-count=\"slideGroupCount\"\r\n      :groups-to-scroll=\"settings.groupsToScroll\"\r\n      :groups-to-show=\"settings.groupsToShow\"\r\n      :page-count=\"pageCount\"\r\n      @dot-click=\"handleClickDot\"\r\n      @dots-over=\"handleOverDots\"\r\n      @dots-leave=\"handleLeaveDots\"\r\n    >\r\n      <template #customPaging=\"paging\">\r\n        <slot name=\"customPaging\" v-bind=\"paging\" />\r\n      </template>\r\n    </VSlickDots>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  computed,\r\n  watch,\r\n  VNode,\r\n  useSlots,\r\n  getCurrentInstance,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n  onUpdated\r\n} from 'vue'\r\nimport {\r\n  ChildClickPayload,\r\n  DotClickPayload,\r\n  LazyLoadType,\r\n  PlayingType,\r\n  Props,\r\n  SwipeDirection,\r\n  SwipeEndSpec,\r\n  SwipeMoveSpec,\r\n  TrackInfoSpec,\r\n  VSlickCarouselInstance,\r\n  SwipeEvent,\r\n  SlideNavigation,\r\n  SlideGroupChangeOptions,\r\n  SlideGroupChangeSpec,\r\n  OnSlideSpec,\r\n  WidthDetection\r\n} from '@lib/types'\r\nimport {\r\n  canUseDOM,\r\n  clearSelection,\r\n  filterUndefined,\r\n  getChangedSlideGroupIndex,\r\n  json2mq,\r\n  MatchMedia,\r\n  debounce\r\n} from '@lib/utils'\r\nimport {\r\n  defaultPropValues,\r\n  defaultProps,\r\n  makeDefaultSliderState\r\n} from './props'\r\nimport VSlickArrow from './VSlickArrow.vue'\r\nimport VSlickTrack from './VSlickTrack.vue'\r\nimport VSlickDots from './VSlickDots.vue'\r\nimport {\r\n  canGoNext as checkCanGoNext,\r\n  canGoPrev as checkCanGoPrev,\r\n  extractSlides,\r\n  getNavigationOnKeyType,\r\n  getOnDemandLazySlideGroups,\r\n  getSlideGroupCount,\r\n  getSliderState,\r\n  getStatesOnSlide,\r\n  getSwipeEndState,\r\n  getSwipeMoveState,\r\n  getSwipeStartState,\r\n  getTotalPostClones,\r\n  getTotalPreClones,\r\n  getTrackCSS,\r\n  getTrackLeft\r\n} from '@lib/utils/carousel-utils'\r\n\r\nconst props = defineProps(defaultProps) as Props\r\ndefineOptions({ inheritAttrs: false })\r\n\r\nconst emit = defineEmits([\r\n  'init',\r\n  'beforeChange',\r\n  'afterChange',\r\n  'lazyLoad',\r\n  'lazyLoadError',\r\n  'reInit',\r\n  'edge',\r\n  'swipe'\r\n])\r\n\r\nconst slots = useSlots()\r\nconst enquire = canUseDOM() ? new MatchMedia() : undefined\r\n\r\nconst DEBOUNCE_RESIZE_DURATION = 50\r\n\r\nlet triggerSlideGroupHandler: number | undefined\r\nlet animationEndCallback: NodeJS.Timeout | null = null\r\nlet lazyLoadTimer: NodeJS.Timeout | null = null\r\nlet callbackTimers: NodeJS.Timeout[] = []\r\n\r\nconst vSlickListStyle = ref({\r\n  ...(getCurrentInstance()?.vnode?.props?.style || {})\r\n})\r\n\r\nlet isVSlickListClickable = true\r\nlet debouncedResize: ReturnType<typeof debounce> | null = null\r\nlet ro: ResizeObserver | null = null\r\n\r\nlet responsiveMediaHandlers: {\r\n  query: string\r\n  handler: (predicate: { matches: boolean }) => void\r\n}[] = []\r\n\r\nconst media = (\r\n  query: string,\r\n  handler: () => void,\r\n  previousHandler: () => void\r\n) => {\r\n  if (!enquire) return\r\n\r\n  const newHandler = (predicate: { matches: boolean }) => {\r\n    if (predicate.matches) {\r\n      handler()\r\n    } else {\r\n      previousHandler()\r\n    }\r\n  }\r\n\r\n  enquire.register(query, newHandler)\r\n  responsiveMediaHandlers.push({ query, handler: newHandler })\r\n}\r\n\r\nconst clearBreakpoints = () => {\r\n  responsiveMediaHandlers.forEach(({ query, handler }) =>\r\n    enquire?.unregister(query, handler)\r\n  )\r\n  responsiveMediaHandlers = []\r\n}\r\n\r\nconst makeBreakpoints = () => {\r\n  if (!props.responsive.length) return\r\n  const breakpoints = props.responsive.map((item) => item.breakpoint)\r\n  breakpoints.sort((a, b) => a - b)\r\n  breakpoints.forEach((_breakpoint, index) => {\r\n    const mediaQuery = json2mq({\r\n      'min-width': `${_breakpoint}px`\r\n    })\r\n    media(\r\n      mediaQuery,\r\n      () => {\r\n        breakpoint.value = _breakpoint\r\n      },\r\n      () => {\r\n        breakpoint.value = index === 0 ? undefined : breakpoints[index - 1]\r\n      }\r\n    )\r\n  })\r\n}\r\n\r\nconst swipeStart = (e: SwipeEvent) => {\r\n  // setTimout is used here to prevent disabling the scroll prematurely\r\n  setTimeout(() => {\r\n    e.preventDefault()\r\n  })\r\n  const swipeStartState = getSwipeStartState(\r\n    e,\r\n    settings.value.swipe,\r\n    settings.value.draggable\r\n  )\r\n  Object.assign(state.value, swipeStartState)\r\n}\r\n\r\nconst swipeEnd = (e: SwipeEvent) => {\r\n  const swipeEndState = getSwipeEndState(e, {\r\n    ...settings.value,\r\n    ...state.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    listEl: vSlickListRef.value,\r\n    slideGroupIndex: state.value.currentSlideGroupIndex,\r\n    slideGroupCount: slideGroupCount.value\r\n  } as SwipeEndSpec)\r\n  if (!swipeEndState) return\r\n  const { triggerSlideGroupHandler: newTriggerSlideGroupHandler, ...rest } =\r\n    swipeEndState\r\n  triggerSlideGroupHandler = newTriggerSlideGroupHandler\r\n  Object.assign(state.value, rest)\r\n  if (triggerSlideGroupHandler !== undefined) {\r\n    slideGroupHandler(triggerSlideGroupHandler)\r\n  }\r\n}\r\n\r\nconst swipeMove = (e: SwipeEvent) => {\r\n  clearSelection()\r\n  const { swipeDirection, ...swipeMoveState } =\r\n    getSwipeMoveState(e, {\r\n      ...settings.value,\r\n      ...state.value,\r\n      trackEl: vSlickTrackRef.value?.$el,\r\n      listEl: vSlickListRef.value,\r\n      slideGroupIndex: state.value.currentSlideGroupIndex,\r\n      slideGroupCount: slideGroupCount.value,\r\n      onEdge: (e: SwipeDirection | keyof typeof SwipeDirection) =>\r\n        emit('edge', e),\r\n      swipeEvent: (e: SwipeDirection | keyof typeof SwipeDirection) =>\r\n        emit('swipe', e)\r\n    } as SwipeMoveSpec) || ({} as any)\r\n  if (\r\n    (settings.value.verticalSwiping && swipeDirection === SwipeDirection.up) ||\r\n    swipeDirection === SwipeDirection.down ||\r\n    (!settings.value.verticalSwiping &&\r\n      swipeDirection === SwipeDirection.left) ||\r\n    swipeDirection === SwipeDirection.right\r\n  ) {\r\n    e.preventDefault()\r\n  }\r\n  if (!swipeMoveState) return\r\n  if (swipeMoveState.swiping) {\r\n    isVSlickListClickable = false\r\n  }\r\n  Object.assign(state.value, swipeMoveState)\r\n}\r\n\r\nconst play = () => {\r\n  let nextIndex\r\n  if (settings.value.rtl) {\r\n    nextIndex =\r\n      state.value.currentSlideGroupIndex - settings.value.groupsToScroll\r\n  } else {\r\n    if (canGoNext.value) {\r\n      nextIndex =\r\n        state.value.currentSlideGroupIndex + settings.value.groupsToScroll\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  slideGroupHandler(nextIndex)\r\n}\r\n\r\nconst pause = (\r\n  pauseType: null | PlayingType | keyof typeof PlayingType = null\r\n) => {\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n    state.value.autoplayTimer = null\r\n  }\r\n  const autoplaying = state.value.autoplaying\r\n  if (pauseType === PlayingType.paused) {\r\n    state.value.autoplaying = PlayingType.paused\r\n  } else if (\r\n    pauseType === PlayingType.focused &&\r\n    (autoplaying === PlayingType.hovered || autoplaying === PlayingType.playing)\r\n  ) {\r\n    state.value.autoplaying = PlayingType.focused\r\n  } else if (autoplaying === PlayingType.playing) {\r\n    state.value.autoplaying = PlayingType.hovered\r\n  } else if (autoplaying === null) {\r\n    state.value.autoplaying = null\r\n  }\r\n}\r\n\r\nconst autoPlay = (playType: PlayingType | keyof typeof PlayingType) => {\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n  }\r\n  const autoplaying = state.value.autoplaying\r\n  if (playType === PlayingType.update) {\r\n    if (\r\n      autoplaying === PlayingType.hovered ||\r\n      autoplaying === PlayingType.focused ||\r\n      autoplaying === PlayingType.paused\r\n    ) {\r\n      return\r\n    }\r\n  } else if (playType === PlayingType.leave) {\r\n    if (\r\n      autoplaying === PlayingType.paused ||\r\n      autoplaying === PlayingType.focused\r\n    ) {\r\n      return\r\n    }\r\n  } else if (playType === PlayingType.blur) {\r\n    if (\r\n      autoplaying === PlayingType.paused ||\r\n      autoplaying === PlayingType.hovered\r\n    ) {\r\n      return\r\n    }\r\n  }\r\n  state.value.autoplayTimer = setInterval(\r\n    play,\r\n    settings.value.autoplaySpeed + 50\r\n  )\r\n  state.value.autoplaying = PlayingType.playing\r\n}\r\n\r\nconst adaptHeight = () => {\r\n  if (settings.value.adaptiveHeight && vSlickListRef.value) {\r\n    const activeSlideGroups = vSlickListRef.value.querySelectorAll<HTMLElement>(\r\n      '.v-slick-slide-group.active'\r\n    )\r\n    let maxHeight = 0\r\n    activeSlideGroups.forEach((slideGroup) => {\r\n      maxHeight = Math.max(maxHeight, slideGroup.offsetHeight)\r\n    })\r\n    vSlickListRef.value.style.height = maxHeight + 'px'\r\n  }\r\n}\r\n\r\nconst onTrackOver = () => {\r\n  if (settings.value.autoplay) pause(PlayingType.hovered)\r\n}\r\n\r\nconst onTrackLeave = () => {\r\n  if (\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.hovered\r\n  )\r\n    autoPlay(PlayingType.leave)\r\n}\r\n\r\nconst handleClickVSlickList = (e: Event) => {\r\n  if (isVSlickListClickable === false) {\r\n    e.stopPropagation()\r\n    e.preventDefault()\r\n  }\r\n  isVSlickListClickable = true\r\n}\r\n\r\nconst handleChildClickVSlickTrack = ({ index }: ChildClickPayload) => {\r\n  if (!settings.value.focusOnSelect) return\r\n  changeSlideGroup({\r\n    message: 'children',\r\n    index\r\n  })\r\n}\r\n\r\nconst handleKeyDownVSlickList = (e: KeyboardEvent) => {\r\n  if (!settings.value.accessibility) return\r\n  const navigation = getNavigationOnKeyType(\r\n    e,\r\n    settings.value.accessibility,\r\n    settings.value.rtl\r\n  )\r\n  if (!navigation) return\r\n  changeSlideGroup({ message: navigation as SlideNavigation })\r\n}\r\n\r\nconst handleMouseDownOrTouchStartVSlickList = (e: SwipeEvent) => {\r\n  if (!settings.value.touchMove) return\r\n  const target = e.target as HTMLElement | null\r\n  if (target?.classList.contains('no-swipe')) return\r\n  swipeStart(e)\r\n}\r\n\r\nconst handleMouseMoveOrTouchMoveVSlickList = (e: SwipeEvent) => {\r\n  if (!state.value.dragging || !settings.value.touchMove) return\r\n  const target = e.target as HTMLElement | null\r\n  if (target?.classList.contains('no-swipe')) return\r\n  swipeMove(e)\r\n}\r\n\r\nconst handleMouseUpOrTouchEndVSlickList = (e: SwipeEvent) => {\r\n  if (!settings.value.touchMove) return\r\n  swipeEnd(e)\r\n}\r\n\r\nconst handleMouseLeaveOrTouchCancelVSlickList = (e: SwipeEvent) => {\r\n  if (!state.value.dragging || !settings.value.touchMove) return\r\n  swipeEnd(e)\r\n}\r\n\r\nconst handleMouseEnterOrOverVSlickTrack = () => {\r\n  if (!settings.value.pauseOnHover) return\r\n  onTrackOver()\r\n}\r\n\r\nconst handleMouseLeaveVSlickTrack = () => {\r\n  if (!settings.value.pauseOnHover) return\r\n  onTrackLeave()\r\n}\r\n\r\nconst handleOverDots = () => {\r\n  if (settings.value.pauseOnDotsHover && settings.value.autoplay)\r\n    pause(PlayingType.hovered)\r\n}\r\nconst handleLeaveDots = () => {\r\n  if (\r\n    settings.value.pauseOnDotsHover &&\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.hovered\r\n  )\r\n    autoPlay(PlayingType.leave)\r\n}\r\n\r\nconst handleClickDot = ({ index }: DotClickPayload) => {\r\n  changeSlideGroup({\r\n    message: 'dots',\r\n    index\r\n  })\r\n}\r\n\r\nconst handleNextVSlickArrow = () => {\r\n  changeSlideGroup({\r\n    message: SlideNavigation.next\r\n  })\r\n}\r\n\r\nconst handlePrevVSlickArrow = () => {\r\n  changeSlideGroup({\r\n    message: SlideNavigation.previous\r\n  })\r\n}\r\n\r\nconst changeSlideGroup = (\r\n  options: SlideGroupChangeOptions,\r\n  dontAnimate = false\r\n) => {\r\n  const spec = {\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const targetSlideGroupIndex = getChangedSlideGroupIndex(\r\n    spec as SlideGroupChangeSpec,\r\n    options\r\n  )\r\n  if (targetSlideGroupIndex === undefined || targetSlideGroupIndex === null)\r\n    return\r\n  slideGroupHandler(\r\n    targetSlideGroupIndex,\r\n    dontAnimate === true ? true : undefined\r\n  )\r\n}\r\n\r\nconst slideGroupHandler = async (index: number, dontAnimate = false) => {\r\n  const { asNavFor, speed } = settings.value\r\n  const currentSlideGroupIndex = state.value.currentSlideGroupIndex\r\n  const states = getStatesOnSlide({\r\n    index,\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    useCSSTransitions: settings.value.useCSSTransitions && !dontAnimate\r\n  } as OnSlideSpec)\r\n  if (!states) return\r\n  const { slidingState, afterSlidingState } = states\r\n  emit(\r\n    'beforeChange',\r\n    currentSlideGroupIndex,\r\n    slidingState.currentSlideGroupIndex\r\n  )\r\n  const slidesToLoad =\r\n    slidingState.lazyLoadedList?.filter(\r\n      (value: number) => state.value.lazyLoadedList.indexOf(value) < 0\r\n    ) || []\r\n  if (slidesToLoad.length) {\r\n    emit('lazyLoad', slidesToLoad)\r\n  }\r\n  Object.assign(state.value, slidingState)\r\n  if (asNavFor) {\r\n    ;(asNavFor as VSlickCarouselInstance).goTo(index)\r\n  }\r\n  if (!afterSlidingState) return\r\n  await new Promise<void>((resolve) => {\r\n    animationEndCallback = setTimeout(() => {\r\n      const { animating, ...firstBatch } = afterSlidingState!\r\n      if (\r\n        settings.value.waitForAnimate ||\r\n        state.value.currentSlideGroupIndex ===\r\n          slidingState.currentSlideGroupIndex\r\n      ) {\r\n        Object.assign(state.value, firstBatch)\r\n      }\r\n      callbackTimers.push(\r\n        setTimeout(() => {\r\n          state.value.animating = animating || false\r\n        })\r\n      )\r\n      emit('afterChange', slidingState.currentSlideGroupIndex)\r\n      animationEndCallback = null\r\n      resolve()\r\n    }, speed)\r\n  })\r\n}\r\n\r\nconst updateState = (shouldSetTrackStyle?: boolean) => {\r\n  const updatedState = getSliderState({\r\n    ...settings.value,\r\n    ...state.value,\r\n    listEl: vSlickListRef.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    slides: slides.value\r\n  })\r\n  const spec: TrackInfoSpec = {\r\n    ...settings.value,\r\n    ...state,\r\n    ...updatedState,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const targetLeft = getTrackLeft(spec as TrackInfoSpec)\r\n  const trackStyle = getTrackCSS(spec as TrackInfoSpec, targetLeft)\r\n  if (shouldSetTrackStyle || slideGroupCount.value !== spec.slideGroupCount) {\r\n    updatedState.trackStyle = trackStyle\r\n  }\r\n  Object.assign(state.value, updatedState)\r\n}\r\n\r\nconst resize = async (\r\n  options: { shouldSetTrackStyle?: boolean; isWindowResize?: boolean } = {\r\n    shouldSetTrackStyle: true\r\n  }\r\n) => {\r\n  if (!vSlickTrackRef.value || !vSlickTrackRef.value.$el) {\r\n    return\r\n  }\r\n  if (\r\n    settings.value.widthDetection === WidthDetection.manual &&\r\n    options.isWindowResize\r\n  ) {\r\n    await detectWidth()\r\n  }\r\n  updateState(\r\n    options.shouldSetTrackStyle ||\r\n      (settings.value.widthDetection === WidthDetection.manual &&\r\n        options.isWindowResize)\r\n  )\r\n  if (props.autoplay) {\r\n    autoPlay(PlayingType.update)\r\n  } else {\r\n    pause()\r\n  }\r\n}\r\n\r\nconst onResize = (options?: {\r\n  shouldSetTrackStyle?: boolean\r\n  isWindowResize?: boolean\r\n}) => {\r\n  debouncedResize?.cancel()\r\n  debouncedResize = debounce(() => resize(options), DEBOUNCE_RESIZE_DURATION)\r\n}\r\n\r\nconst onResizeEventListener = () =>\r\n  onResize({\r\n    isWindowResize: true\r\n  })\r\n\r\nconst onSlideGroupFocus = () => {\r\n  if (settings.value.autoplay) pause(PlayingType.focused)\r\n}\r\nconst onSlideGroupBlur = () => {\r\n  if (\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.focused\r\n  )\r\n    autoPlay(PlayingType.blur)\r\n}\r\n\r\nconst progressiveLazyLoad = () => {\r\n  const slideGroupsToLoad = []\r\n  const spec = { ...settings.value, ...state.value }\r\n  const totalPostClones = getTotalPostClones({\r\n    ...spec,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n  const totalPreClones = getTotalPreClones({\r\n    ...spec,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n  for (\r\n    let index = state.value.currentSlideGroupIndex;\r\n    index < slideGroupCount.value + totalPostClones;\r\n    index++\r\n  ) {\r\n    if (state.value.lazyLoadedList.indexOf(index) < 0) {\r\n      slideGroupsToLoad.push(index)\r\n      break\r\n    }\r\n  }\r\n  for (\r\n    let index = state.value.currentSlideGroupIndex - 1;\r\n    index >= -totalPreClones;\r\n    index--\r\n  ) {\r\n    if (state.value.lazyLoadedList.indexOf(index) < 0) {\r\n      slideGroupsToLoad.push(index)\r\n      break\r\n    }\r\n  }\r\n  if (slideGroupsToLoad.length > 0) {\r\n    state.value.lazyLoadedList =\r\n      state.value.lazyLoadedList.concat(slideGroupsToLoad)\r\n    emit('lazyLoad', slideGroupsToLoad)\r\n  } else {\r\n    if (lazyLoadTimer) {\r\n      clearInterval(lazyLoadTimer)\r\n      lazyLoadTimer = null\r\n    }\r\n  }\r\n}\r\n\r\nconst checkImagesLoad = () => {\r\n  const images = vSlickListRef.value?.querySelectorAll<HTMLImageElement>(\r\n    '.v-slick-slide-group img'\r\n  )\r\n  const imagesCount = images?.length || 0\r\n  let loadedCount = 0\r\n  images?.forEach((image) => {\r\n    const handler = () => {\r\n      if (++loadedCount >= imagesCount) {\r\n        onResize()\r\n      }\r\n    }\r\n    if (!image.onclick) {\r\n      image.onclick = () => {\r\n        ;(image.closest('.v-slick-slide-group') as HTMLElement)?.focus()\r\n      }\r\n    } else {\r\n      const prevClickHandler = image.onclick.bind(image)\r\n      image.onclick = (e) => {\r\n        prevClickHandler(e)\r\n        ;(image.closest('.v-slick-slide-group') as HTMLElement)?.focus()\r\n      }\r\n    }\r\n    if (!image.onload) {\r\n      if (!settings.value.lazyLoad) return\r\n      image.onload = () => {\r\n        adaptHeight()\r\n        callbackTimers.push(setTimeout(onResize, settings.value.speed))\r\n      }\r\n    } else {\r\n      image.onload = handler\r\n      image.onerror = () => {\r\n        handler()\r\n        emit('lazyLoadError')\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nconst detectWidth = async () => {\r\n  state.value.detectingWidth = true\r\n  return new Promise<void>((resolve) =>\r\n    setTimeout(() => {\r\n      Object.assign(vSlickCarouselStyle.value, {\r\n        width: `${vSlickCarouselRef.value?.offsetWidth}px`\r\n      })\r\n      state.value.detectingWidth = false\r\n      resolve()\r\n    })\r\n  )\r\n}\r\n\r\nconst ssrInit = () => {\r\n  const spec = {\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const preClones = getTotalPreClones(spec)\r\n  const postClones = getTotalPostClones(spec)\r\n  if (settings.value.variableWidth) {\r\n    let trackWidth = [],\r\n      trackLeft = []\r\n    const childrenWidths: number[] = []\r\n    rawSlideGroups.value.forEach((slideGroup) => {\r\n      let maxWidth = 0\r\n      slideGroup.forEach((child) => {\r\n        const { width } = child.props?.style || {}\r\n        if (width) maxWidth = Math.max(maxWidth, width)\r\n      })\r\n      childrenWidths.push(maxWidth)\r\n      trackWidth.push(maxWidth)\r\n    })\r\n    for (let i = 0; i < preClones; i++) {\r\n      trackLeft.push(childrenWidths[childrenWidths.length - 1 - i])\r\n      trackWidth.push(childrenWidths[childrenWidths.length - 1 - i])\r\n    }\r\n    for (let i = 0; i < postClones; i++) {\r\n      trackWidth.push(childrenWidths[i])\r\n    }\r\n    for (let i = 0; i < state.value.currentSlideGroupIndex; i++) {\r\n      trackLeft.push(childrenWidths[i])\r\n    }\r\n    trackWidth = trackWidth.filter((o) => o)\r\n    trackLeft = trackLeft.filter((o) => o)\r\n    const trackStyle = {\r\n      width: `calc(${trackWidth.join(' + ')})`,\r\n      left: `calc(${trackLeft.map((o) => `-${o}`).join(' + ')})`\r\n    }\r\n    if (settings.value.centerMode) {\r\n      const currentWidth = childrenWidths[state.value.currentSlideGroupIndex]\r\n      trackStyle.left = `calc(${trackLeft\r\n        .map((o) => `-${o}`)\r\n        .join(' + ')} + (100% - ${currentWidth}) / 2 )`\r\n    }\r\n    state.value.trackStyle = trackStyle\r\n  } else {\r\n    const _slideGroupCount = preClones + postClones + slideGroupCount.value\r\n    const trackWidth = (100 / settings.value.groupsToShow) * _slideGroupCount\r\n    const slideGroupWidth = 100 / _slideGroupCount\r\n    let trackLeft =\r\n      (-slideGroupWidth *\r\n        (preClones + state.value.currentSlideGroupIndex) *\r\n        trackWidth) /\r\n      100\r\n    if (settings.value.centerMode) {\r\n      trackLeft += (100 - (slideGroupWidth * trackWidth) / 100) / 2\r\n    }\r\n    state.value.slideGroupWidth = slideGroupWidth + '%'\r\n    state.value.trackStyle = {\r\n      width: trackWidth + '%',\r\n      left: trackLeft + '%'\r\n    }\r\n  }\r\n}\r\n\r\nconst breakpoint = ref<number>()\r\n\r\nconst vSlickCarouselRef = ref<HTMLElement>()\r\nconst vSlickCarouselStyle = ref({})\r\nconst vSlickListRef = ref<HTMLElement>()\r\nconst vSlickTrackRef = ref<InstanceType<typeof VSlickTrack>>()\r\n\r\nconst settings = computed<Props>(() => {\r\n  const definedProps = filterUndefined(props)\r\n  let settings = { ...defaultPropValues, ...definedProps }\r\n  if (breakpoint.value) {\r\n    const newProps = props.responsive.find(\r\n      (item) => item.breakpoint === breakpoint.value\r\n    )\r\n    settings = {\r\n      ...settings,\r\n      ...newProps?.settings\r\n    }\r\n  }\r\n  // force scrolling by one group if 'centerMode' is enabled\r\n  if (settings.centerMode) {\r\n    if (settings.groupsToScroll > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `centerMode is enabled: groupsToScroll should be 1; you are using ${settings.groupsToScroll}`\r\n      )\r\n    }\r\n    settings.groupsToScroll = 1\r\n  }\r\n  // force showing one group and scrolling by one if `fade` is enabled\r\n  if (settings.fade) {\r\n    if (settings.groupsToShow > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `fade is enabled: groupsToShow should be 1; you are using ${settings.groupsToShow}`\r\n      )\r\n    }\r\n    if (settings.groupsToScroll > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `fade is enabled: groupsToScroll should be 1; you are using ${settings.groupsToScroll}`\r\n      )\r\n    }\r\n    settings.groupsToShow = 1\r\n    settings.groupsToScroll = 1\r\n  }\r\n  // force disabling `variableWidth` if `slidesPerGroup` is bigger than 1\r\n  if (settings.slidesPerGroup > 1) {\r\n    if (settings.variableWidth && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`slidesPerGroup is bigger than 1: variableWidth is disabled`)\r\n    }\r\n    settings.variableWidth = false\r\n  }\r\n\r\n  if (settings.vertical && settings.rtl) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`vertical mode is enabled: rtl is disabled`)\r\n    }\r\n    settings.rtl = false\r\n  }\r\n\r\n  return settings\r\n})\r\n\r\nconst canGoPrev = computed(() =>\r\n  checkCanGoPrev({\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n)\r\n\r\nconst canGoNext = computed(() =>\r\n  checkCanGoNext({\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n)\r\n\r\nconst pageCount = computed(() => {\r\n  if (settings.value.infinite) {\r\n    return Math.ceil(slideGroupCount.value / settings.value.groupsToScroll)\r\n  }\r\n  let pageCount =\r\n    Math.ceil(\r\n      (slideGroupCount.value - settings.value.groupsToShow) /\r\n        settings.value.groupsToScroll\r\n    ) + 1\r\n  if (\r\n    !settings.value.infinite &&\r\n    settings.value.groupsToShow > 1 &&\r\n    settings.value.centerMode\r\n  ) {\r\n    pageCount++\r\n  }\r\n  return pageCount < 0 ? 0 : pageCount\r\n})\r\n\r\nconst slides = ref<VNode[]>(slots.default ? extractSlides(slots.default()) : [])\r\n\r\nconst state = ref({\r\n  ...makeDefaultSliderState(),\r\n  currentSlideGroupIndex: settings.value.initialGroupIndex\r\n})\r\n\r\nconst currentSlideGroupIndex = computed(\r\n  () => state.value.currentSlideGroupIndex\r\n)\r\n\r\nconst currentGroupsToShow = computed(() => settings.value.groupsToShow)\r\n\r\nconst slideGroupCount = computed(() =>\r\n  getSlideGroupCount(slides.value.length, settings.value.slidesPerGroup)\r\n)\r\n\r\nconst rawSlideGroups = computed<VNode[][]>(() => {\r\n  const slideGroups: VNode[][] = []\r\n  const slidesPerGroup = settings.value.slidesPerGroup\r\n  const slideGroupsCount = slideGroupCount.value\r\n  for (let i = 0; i < slideGroupsCount; i++) {\r\n    const startIndex = i * slidesPerGroup\r\n    const endIndex = startIndex + slidesPerGroup\r\n    slideGroups.push(slides.value.slice(startIndex, endIndex))\r\n  }\r\n  return slideGroups\r\n})\r\n\r\nwatch(\r\n  () => props.responsive,\r\n  () => {\r\n    clearBreakpoints()\r\n    makeBreakpoints()\r\n  },\r\n  { deep: true }\r\n)\r\n\r\nwatch(\r\n  settings,\r\n  (newSettings: Props, oldSettings: Props) => {\r\n    let shouldSetTrackStyle = false\r\n    for (const key of Object.keys(settings.value)) {\r\n      if (!newSettings.hasOwnProperty(key)) {\r\n        shouldSetTrackStyle = true\r\n        break\r\n      }\r\n      if (\r\n        typeof newSettings[key as keyof typeof newSettings] === 'object' ||\r\n        typeof newSettings[key as keyof typeof newSettings] === 'function'\r\n      ) {\r\n        continue\r\n      }\r\n      if (\r\n        newSettings[key as keyof typeof newSettings] !==\r\n        oldSettings[key as keyof typeof newSettings]\r\n      ) {\r\n        shouldSetTrackStyle = true\r\n        break\r\n      }\r\n    }\r\n    updateState(shouldSetTrackStyle)\r\n    if (state.value.currentSlideGroupIndex >= slideGroupCount.value) {\r\n      changeSlideGroup({\r\n        message: 'index',\r\n        index: slideGroupCount.value - newSettings.groupsToShow\r\n      })\r\n    }\r\n    if (newSettings.autoplay) {\r\n      autoPlay(PlayingType.update)\r\n    } else {\r\n      pause(PlayingType.paused)\r\n    }\r\n  },\r\n  {\r\n    deep: true\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => slots.default?.() || [],\r\n  (newSlots) => {\r\n    slides.value = extractSlides(newSlots)\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => [\r\n    state.value.listHeight,\r\n    settings.value.centerMode,\r\n    settings.value.centerPadding,\r\n    settings.value.vertical\r\n  ],\r\n  ([listHeight, centerMode, centerPadding, vertical]) => {\r\n    let verticalHeightStyle = {\r\n      height: 'auto'\r\n    }\r\n    if (vertical) {\r\n      verticalHeightStyle = {\r\n        height: `${listHeight}px`\r\n      }\r\n    }\r\n\r\n    let centerPaddingStyle\r\n    if (!centerMode) {\r\n      centerPaddingStyle = {\r\n        padding: '0'\r\n      }\r\n    } else if (vertical) {\r\n      centerPaddingStyle = {\r\n        padding: centerPadding + ' 0px'\r\n      }\r\n    } else {\r\n      centerPaddingStyle = {\r\n        padding: '0px ' + centerPadding\r\n      }\r\n    }\r\n    vSlickListStyle.value = {\r\n      ...vSlickListStyle.value,\r\n      ...filterUndefined(verticalHeightStyle),\r\n      ...centerPaddingStyle\r\n    }\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => [\r\n    settings.value.infinite,\r\n    state.value.currentSlideGroupIndex,\r\n    settings.value.groupsToShow,\r\n    slideGroupCount.value\r\n  ],\r\n  ([infinite, groupsIndex, groupToShow, slideGroupCount]) => {\r\n    if (\r\n      infinite ||\r\n      (groupsIndex as number) <=\r\n        (slideGroupCount as number) - (groupToShow as number) + 1\r\n    )\r\n      return\r\n    slideGroupHandler(pageCount.value - 1)\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => state.value.dragging,\r\n  (dragging) => {\r\n    if (!vSlickListRef.value) return\r\n    if (dragging) {\r\n      vSlickListRef.value.onmousemove = handleMouseMoveOrTouchMoveVSlickList\r\n      vSlickListRef.value.addEventListener(\r\n        'touchmove',\r\n        handleMouseMoveOrTouchMoveVSlickList,\r\n        { passive: false }\r\n      )\r\n      vSlickListRef.value.onmouseup = handleMouseUpOrTouchEndVSlickList\r\n      vSlickListRef.value.ontouchend = handleMouseUpOrTouchEndVSlickList\r\n      vSlickListRef.value.onmouseleave = handleMouseLeaveOrTouchCancelVSlickList\r\n      vSlickListRef.value.ontouchcancel =\r\n        handleMouseLeaveOrTouchCancelVSlickList\r\n    } else {\r\n      vSlickListRef.value.onmousemove = null\r\n      vSlickListRef.value.removeEventListener(\r\n        'touchmove',\r\n        handleMouseMoveOrTouchMoveVSlickList\r\n      )\r\n      vSlickListRef.value.onmouseup = null\r\n      vSlickListRef.value.ontouchend = null\r\n      vSlickListRef.value.onmouseleave = null\r\n      vSlickListRef.value.ontouchcancel = null\r\n    }\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => pageCount.value <= state.value.currentSlideGroupIndex,\r\n  (o) => {\r\n    if (o) {\r\n      state.value.currentSlideGroupIndex = 0\r\n    }\r\n  }\r\n)\r\n\r\ndefineExpose({\r\n  goTo: slideGroupHandler,\r\n  next: () => {\r\n    slideGroupHandler(\r\n      state.value.currentSlideGroupIndex + settings.value.groupsToScroll\r\n    )\r\n  },\r\n  prev: () => {\r\n    slideGroupHandler(\r\n      state.value.currentSlideGroupIndex - settings.value.groupsToScroll\r\n    )\r\n  },\r\n  canGoNext,\r\n  canGoPrev,\r\n  play,\r\n  pause,\r\n  autoPlay,\r\n  slideGroupCount,\r\n  currentSlideGroupIndex,\r\n  currentGroupsToShow,\r\n  pageCount\r\n})\r\n\r\nonMounted(async () => {\r\n  window.addEventListener('resize', onResizeEventListener)\r\n  if (settings.value.widthDetection === WidthDetection.manual) {\r\n    await detectWidth()\r\n  }\r\n  updateState(true)\r\n  adaptHeight()\r\n  if (settings.value.autoplay) {\r\n    autoPlay(PlayingType.update)\r\n  }\r\n  if (settings.value.lazyLoad === LazyLoadType.progressive) {\r\n    lazyLoadTimer = setInterval(progressiveLazyLoad, 1000)\r\n  }\r\n  ro = new ResizeObserver(() => {\r\n    if (state.value.animating) {\r\n      onResize({ shouldSetTrackStyle: false }) // do not set trackStyle so as to not break the animation\r\n      callbackTimers.push(setTimeout(() => onResize(), settings.value.speed))\r\n    } else {\r\n      onResize()\r\n    }\r\n  })\r\n  ro.observe(vSlickListRef.value as Element)\r\n  vSlickListRef.value\r\n    ?.querySelectorAll<HTMLElement>('.v-slick-slide-group')\r\n    .forEach((slideGroup) => {\r\n      slideGroup.onfocus = settings.value.pauseOnFocus\r\n        ? onSlideGroupFocus\r\n        : null\r\n      slideGroup.onblur = settings.value.pauseOnFocus ? onSlideGroupBlur : null\r\n    })\r\n})\r\n\r\nonUpdated(() => {\r\n  checkImagesLoad()\r\n  emit('reInit')\r\n  if (settings.value.lazyLoad) {\r\n    const slideGroupsToLoad = getOnDemandLazySlideGroups({\r\n      ...settings.value,\r\n      ...state.value\r\n    })\r\n    if (slideGroupsToLoad.length) {\r\n      state.value.lazyLoadedList =\r\n        state.value.lazyLoadedList.concat(slideGroupsToLoad)\r\n      emit('lazyLoad', slideGroupsToLoad)\r\n    }\r\n  }\r\n  adaptHeight()\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener('resize', onResizeEventListener)\r\n  ro?.unobserve(vSlickListRef.value as Element)\r\n  if (animationEndCallback) {\r\n    clearTimeout(animationEndCallback)\r\n  }\r\n  if (lazyLoadTimer) {\r\n    clearInterval(lazyLoadTimer)\r\n  }\r\n  if (callbackTimers.length) {\r\n    callbackTimers.forEach((timer) => clearTimeout(timer))\r\n    callbackTimers = []\r\n  }\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n  }\r\n})\r\n\r\nmakeBreakpoints()\r\nssrInit()\r\nemit('init')\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.v-slick-slider {\r\n  position: relative;\r\n  display: block;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.v-slick-list {\r\n  position: relative;\r\n  display: block;\r\n  overflow: hidden;\r\n  margin: 0;\r\n  padding: 0;\r\n  transform: translate3d(0, 0, 0);\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &.dragging {\r\n    cursor: pointer;\r\n    cursor: hand;\r\n  }\r\n}\r\n</style>\r\n"],"names":["PlayingType","LazyLoadType","SwipeDirection","SlideNavigation","WidthDetection","extractSlides","vnodes","vnode","isSlide","getNavigationOnKeyType","accessibility","rtl","_a","getChangedSlideGroupIndex","spec","options","indexOffset","previousInt","slideGroupOffset","unevenOffset","targetSlideGroupIndex","groupsToScroll","groupsToShow","slideGroupCount","currentSlideGroupIndex","lazyLoad","infinite","direction","siblingDirection","totalVisibleGroupsOnRightOfCurrGroup","totalVisibleGroupsOnLeftOfCurrGroup","centerMode","centerPadding","right","left","getNavigableIndexes","max","breakpoint","counter","indexes","checkNavigable","index","navigables","prevNavigable","getSwipeStartState","swipe","draggable","getTraversedSlideGroupCount","centerOffset","swipedSlideGroup","slideGroups","grp","currentIndex","swipedSlideGroupIndex","getSwipeDirection","touchObject","verticalSwiping","xDist","yDist","r","swipeAngle","getSwipeEndState","dragging","listWidth","touchThreshold","listHeight","swipeToSlide","scrolling","onSwipe","minSwipe","swipeDirection","state","newSlideGroupIndex","currentLeft","getTrackLeft","getTrackAnimateCSS","getLazySlidesOnLeft","getLazySlidesOnRight","getLazyStartIndex","getLazyEndIndex","getOnDemandLazySlideGroups","onDemandSlideGroups","startIndex","endIndex","slideGroupIndex","getTrackCSS","trackWidth","trackHeight","trackChildren","getTotalSlideGroups","style","transform","getTotalPreClones","getTotalPostClones","trackEl","slideGroupWidth","variableWidth","slideGroupHeight","fade","vertical","targetLeft","targetSlide","verticalOffset","slidesToOffset","targetSlideIndex","slide","canGoPrev","canGoNext","canGo","getStatesOnSlide","waitForAnimate","animating","lazyLoadedList","useCSSTransitions","animationSlideGroupIndex","finalSlideGroupIndex","slidingState","afterSlidingState","finalLeft","animationLeft","getSwipeMoveState","edgeFriction","edgeDragged","onEdge","swiped","swiping","swipeEvent","swipeLeft","curLeft","verticalSwipeLength","positionOffset","dotCount","touchSwipeLength","getSlideGroupCount","slideCount","getSliderState","_b","centerPaddingAdj","_c","slideGroupsToLoad","sliderState","MatchMedia","__publicField","query","handler","e","canUseDOM","filterUndefined","props","key","acc","clearSelection","json2mq","obj","value","debounce","callback","wait","timeoutId","makeDefaultProps","selectFields","defaultProps","defaultPropValues","makeDefaultSliderState","defaultTrackProps","defaultArrowProps","defaultDotsProps","__props","emit","__emit","clickHandler","computed","arrowSlotProps","getSlideGroupClasses","isActive","isCenter","isCurrent","getSlideGroupStyle","originalSlideGroups","rawSlideGroup","classes","slideGroup","preCloneSlideGroups","preCloneNo","postCloneSlideGroups","i","leftBound","rightBound","DEBOUNCE_RESIZE_DURATION","slots","useSlots","enquire","triggerSlideGroupHandler","animationEndCallback","lazyLoadTimer","callbackTimers","vSlickListStyle","ref","getCurrentInstance","isVSlickListClickable","debouncedResize","ro","responsiveMediaHandlers","media","previousHandler","newHandler","predicate","clearBreakpoints","makeBreakpoints","breakpoints","item","a","b","_breakpoint","mediaQuery","swipeStart","swipeStartState","settings","swipeEnd","swipeEndState","vSlickTrackRef","vSlickListRef","newTriggerSlideGroupHandler","rest","slideGroupHandler","swipeMove","swipeMoveState","play","nextIndex","pause","pauseType","autoplaying","autoPlay","playType","adaptHeight","activeSlideGroups","maxHeight","onTrackOver","onTrackLeave","handleClickVSlickList","handleChildClickVSlickTrack","changeSlideGroup","handleKeyDownVSlickList","navigation","handleMouseDownOrTouchStartVSlickList","target","handleMouseMoveOrTouchMoveVSlickList","handleMouseUpOrTouchEndVSlickList","handleMouseLeaveOrTouchCancelVSlickList","handleMouseEnterOrOverVSlickTrack","handleMouseLeaveVSlickTrack","handleOverDots","handleLeaveDots","handleClickDot","handleNextVSlickArrow","handlePrevVSlickArrow","dontAnimate","asNavFor","speed","states","slidesToLoad","resolve","firstBatch","updateState","shouldSetTrackStyle","updatedState","slides","trackStyle","resize","detectWidth","onResize","onResizeEventListener","onSlideGroupFocus","onSlideGroupBlur","progressiveLazyLoad","totalPostClones","totalPreClones","checkImagesLoad","images","imagesCount","loadedCount","image","prevClickHandler","vSlickCarouselStyle","vSlickCarouselRef","ssrInit","preClones","postClones","trackLeft","childrenWidths","rawSlideGroups","maxWidth","child","width","o","currentWidth","_slideGroupCount","definedProps","newProps","checkCanGoPrev","checkCanGoNext","pageCount","currentGroupsToShow","slidesPerGroup","slideGroupsCount","watch","newSettings","oldSettings","newSlots","verticalHeightStyle","centerPaddingStyle","groupsIndex","groupToShow","__expose","onMounted","onUpdated","onBeforeUnmount","timer"],"mappings":";;;;AAAY,IAAAA,sBAAAA,OACVA,EAAA,OAAO,QACPA,EAAA,UAAU,WACVA,EAAA,SAAS,UACTA,EAAA,UAAU,WACVA,EAAA,UAAU,WACVA,EAAA,SAAS,UACTA,EAAA,QAAQ,SACRA,EAAA,OAAO,QARGA,IAAAA,KAAA,CAAA,CAAA,GAWAC,uBAAAA,OACVA,EAAA,WAAW,YACXA,EAAA,cAAc,eAFJA,IAAAA,MAAA,CAAA,CAAA,GAKAC,sBAAAA,OACVA,EAAA,OAAO,QACPA,EAAA,QAAQ,SACRA,EAAA,KAAK,MACLA,EAAA,OAAO,QACPA,EAAA,WAAW,YALDA,IAAAA,KAAA,CAAA,CAAA,GAQAC,sBAAAA,OACVA,EAAA,OAAO,QACPA,EAAA,WAAW,YAFDA,IAAAA,KAAA,CAAA,CAAA,GAKAC,uBAAAA,OACVA,EAAA,OAAO,QACPA,EAAA,SAAS,UAFCA,IAAAA,MAAA,CAAA,CAAA;ACHC,MAAAC,KAAgB,CAACC,MACrBA,EAAO;AAAA,EAAQ,CAACC,MACrBC,GAAQD,CAAK,IACT,CAACA,CAAK,IACN,MAAM,QAAQA,EAAM,QAAQ,KAAKA,EAAM,SAAS,SAAS,IACvDF,GAAcE,EAAM,QAAmB,IACvC,CAAA;AACR;AAGF,SAASC,GAAQD,GAAuB;AACtC,SAAO,CAACA,EAAM,KAAK,SAAS,EAAE,WAAW,QAAQ;AACnD;AAEO,MAAME,KAAyB,CACpC,GACAC,GACAC,MACG;;AACH,UACGC,IAAA,EAAE,WAAF,QAAAA,EAA0B,QAAQ,MAAM,4BACzC,CAACF,IAEM,KACL,EAAE,QAAQ,cACLC,IAAMR,EAAgB,OAAOA,EAAgB,WAClD,EAAE,QAAQ,eACLQ,IAAMR,EAAgB,WAAWA,EAAgB,OACnD;AACT,GAEaU,KAA4B,CACvCC,GACAC,MACG;AACC,MAAAC,GACFC,GACAC,GACAC,GACAC;AACI,QAAA;AAAA,IACJ,gBAAAC;AAAA,IACA,cAAAC;AAAA,IACA,iBAAAC;AAAA,IACA,wBAAAC;AAAA,IACA,UAAAC;AAAA,IACA,UAAAC;AAAA,EAAA,IACEZ;AAMA,MALJK,IAAeI,IAAkBF,MAAmB,GACtCL,IAAAG,IACV,KACCI,IAAkBC,KAA0BH,GAE7CN,EAAQ,YAAYZ,EAAgB;AAEpC,IAAAe,IAAAF,MAAgB,IAAIK,IAAiBC,IAAeN,GACtDI,IAAwBI,IAAyBN,GAC7CO,KAAY,CAACC,MACfT,IAAcO,IAAyBN,GAErCE,IAAAH,MAAgB,KAAKM,IAAkB,IAAIN;AAAA,WAEtCF,EAAQ,YAAYZ,EAAgB;AAC1B,IAAAe,IAAAF,MAAgB,IAAIK,IAAiBL,GACxDI,IAAwBI,IAAyBN,GAC7CO,KAAY,CAACC,MAEXN,KAAAI,IAAyBH,KAAkBE,IAC7CP;AAAA,WAEKD,EAAQ,YAAY;AAG7B,QADyBK,KAAAL,EAAQ,SAAS,KAAKM,GAC3CD,MAA0BI;AACrB,aAAA;AAAA,aAEAT,EAAQ,YAAY,YAAY;AAGzC,QADAK,IAAwBL,EAAQ,SAAS,GACrCK,MAA0BI;AACrB,aAAA;AAET,QAAIE,GAAU;AACZ,UAAIC,IAAYC,GAAiB,EAAE,GAAGd,GAAM,uBAAAM,GAAuB;AAEjE,MAAAA,IAAwBI,KACxBG,MAAc,SAEdP,IAAwBA,IAAwBG,IAEhDH,IAAwBI,KACxBG,MAAc,YAEdP,IAAwBA,IAAwBG;AAAA,IAClD;AAAA,EACF,WACSR,EAAQ,YAAY,YACLK,IAAA,OAAOL,EAAQ,KAAK,GACxCK,MAA0BI;AACrB,WAAA;AAGJ,SAAAJ;AACT,GAEaQ,KAAmB,CAC9Bd,MAEIA,EAAK,wBAAwBA,EAAK,yBAElCA,EAAK,wBACLA,EAAK,yBAAyBe,GAAqCf,CAAI,IAEhE,SAEF,UAGLA,EAAK,wBACLA,EAAK,yBAAyBgB,GAAoChB,CAAI,IAE/D,UAEF,QAILe,KAAuC,CAAC;AAAA,EAC5C,cAAAP;AAAA,EACA,YAAAS;AAAA,EACA,KAAApB;AAAA,EACA,eAAAqB;AACF,MAA4B;AAC1B,MAAID,GAAY;AACV,QAAAE,KAASX,IAAe,KAAK,IAAI;AACrC,WAAI,SAASU,CAAa,IAAI,MAAYC,KAAA,IACtCtB,KAAOW,IAAe,MAAM,MAAYW,KAAA,IACrCA;AAAA,EAAA;AAET,SAAItB,IACK,IAEFW,IAAe;AACxB,GAEMQ,KAAsC,CAAC;AAAA,EAC3C,cAAAR;AAAA,EACA,YAAAS;AAAA,EACA,KAAApB;AAAA,EACA,eAAAqB;AACF,MAA4B;AAC1B,MAAID,GAAY;AACV,QAAAG,KAAQZ,IAAe,KAAK,IAAI;AACpC,WAAI,SAASU,CAAa,IAAI,MAAWE,KAAA,IACrC,CAACvB,KAAOW,IAAe,MAAM,MAAWY,KAAA,IACrCA;AAAA,EAAA;AAET,SAAIvB,IACKW,IAAe,IAEjB;AACT,GAEaa,KAAsB,CAACrB,MAAwB;AAC1D,MAAIsB,IAAMtB,EAAK,WAAWA,EAAK,kBAAkB,IAAIA,EAAK,iBACtDuB,IAAavB,EAAK,WAAWA,EAAK,eAAe,KAAK,GACtDwB,IAAUxB,EAAK,WAAWA,EAAK,eAAe,KAAK,GACnDyB,IAAU,CAAC;AACf,SAAOF,IAAaD;AAClB,IAAAG,EAAQ,KAAKF,CAAU,GACvBA,IAAaC,IAAUxB,EAAK,gBAC5BwB,KAAW,KAAK,IAAIxB,EAAK,gBAAgBA,EAAK,YAAY;AAErD,SAAAyB;AACT,GAEaC,KAAiB,CAAC1B,GAAqB2B,MAAkB;AAC9D,QAAAC,IAAaP,GAAoBrB,CAAI;AAC3C,MAAI6B,IAAgB;AACpB,MAAIF,IAAQC,EAAWA,EAAW,SAAS,CAAC;AAClC,IAAAD,IAAAC,EAAWA,EAAW,SAAS,CAAC;AAAA;AAExC,aAAS,KAAKA,GAAY;AACpB,UAAAD,IAAQC,EAAW,CAAC,GAAG;AACjB,QAAAD,IAAAE;AACR;AAAA,MAAA;AAEF,MAAAA,IAAgBD,EAAW,CAAC;AAAA,IAAA;AAGzB,SAAAD;AACT,GAEaG,KAAqB,CAChC,GACAC,GACAC,MACG;AACC,MAAA,GAACD,KAAU,CAACC,KAAa,EAAE,KAAK,QAAQ,OAAO,MAAM;AAClD,WAAA;AAAA,MACL,UAAU;AAAA,MACV,aAAa;AAAA,QACX,QACE,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB;AAAA,QACxB,QACE,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB;AAAA,QACxB,MACE,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB;AAAA,QACxB,MACE,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB;AAAA,MAAA;AAAA,IAE5B;AACF,GAEaC,KAA8B,CAACjC,MAA8B;;AAClE,QAAAkC,IAAelC,EAAK,aACtB,CAACA,EAAK,kBAAkB,KAAK,MAAMA,EAAK,eAAe,CAAC,IACxD;AACA,MAAAmC;AAEJ,QAAMC,IADYpC,EAAK,OACO;AAAA,IAC5B;AAAA,EACF;AAoBA,MAnBA,MAAM,KAAKoC,CAAW,EAAE,MAAM,CAACC,MAAQ;AACjC,QAACrC,EAAK;AASR,UAAIqC,EAAI,YAAYA,EAAI,eAAe,IAAIrC,EAAK,YAAY;AACvC,eAAAmC,IAAAE,GACZ;AAAA,eATPA,EAAI,aAAaH,IAAeG,EAAI,cAAc,IAClDrC,EAAK,YAAY;AAEE,aAAAmC,IAAAE,GACZ;AASJ,WAAA;AAAA,EAAA,CACR,GAEG,CAACF;AACI,WAAA;AAEH,QAAAG,IACJtC,EAAK,QAAQ,KACTA,EAAK,kBAAkBA,EAAK,yBAC5BA,EAAK,wBACLuC,KAAyBzC,IAAAqC,KAAA,gBAAAA,EAAkC,YAAlC,gBAAArC,EAC3B;AAIG,SAHiB,KAAK;AAAA,IAC3ByC,IAAwB,SAASA,CAAqB,IAAI,IAAID;AAAA,EAChE;AAEF,GAEaE,KAAoB,CAC/BC,GACAC,IAAkB,OACC;AACf,MAAAC,GAAOC,GAAOC,GAAGC;AAQrB,SAPQH,IAAAF,EAAY,SAASA,EAAY,MACjCG,IAAAH,EAAY,SAASA,EAAY,MACrCI,IAAA,KAAK,MAAMD,GAAOD,CAAK,GAC3BG,IAAa,KAAK,MAAOD,IAAI,MAAO,KAAK,EAAE,GACvCC,IAAa,MACFA,IAAA,MAAM,KAAK,IAAIA,CAAU,IAGrCA,KAAc,MAAMA,KAAc,KAClCA,KAAc,OAAOA,KAAc,MAE7B1D,EAAe,OAEpB0D,KAAc,OAAOA,KAAc,MAC9B1D,EAAe,QAEpBsD,MAAoB,KAClBI,KAAc,MAAMA,KAAc,MAC7B1D,EAAe,KAEfA,EAAe,OAInBA,EAAe;AACxB,GAEa2D,KAAmB,CAC9B,GACA/C,MAC8B;AACxB,QAAA;AAAA,IACJ,UAAAgD;AAAA,IACA,OAAAjB;AAAA,IACA,aAAAU;AAAA,IACA,WAAAQ;AAAA,IACA,gBAAAC;AAAA,IACA,iBAAAR;AAAA,IACA,YAAAS;AAAA,IACA,wBAAAzC;AAAA,IACA,cAAA0C;AAAA,IACA,WAAAC;AAAA,IACA,SAAAC;AAAA,IACA,KAAAzD;AAAA,EAAA,IACEG;AACJ,MAAI,CAACgD,GAAU;AACT,IAAAjB,OAAS,eAAe;AAC5B;AAAA,EAAA;AAEF,MAAIwB,IAAWb,IACXS,IAAaD,IACbD,IAAYC,GACZM,IAAiBhB,GAAkBC,GAAaC,CAAe;AACnE,EAAI7C,MACE2D,MAAmBpE,EAAe,OACpCoE,IAAiBpE,EAAe,QACvBoE,MAAmBpE,EAAe,UAC3CoE,IAAiBpE,EAAe;AAIpC,MAAIqE,IAAuB;AAAA,IACzB,UAAU;AAAA,IACV,aAAa;AAAA,IACb,WAAW;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,aAAa,CAAA;AAAA,EACf;AAII,MAHAJ,KAGA,CAACZ,EAAY;AACR,WAAAgB;AAEL,MAAAhB,EAAY,cAAcc,GAAU;AACtC,MAAE,eAAe,GACbD,KACFA,EAAQE,CAAc;AAExB,QAAI/C,GAAiBiD;AACrB,YAAQF,GAAgB;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AACH,QAAAE,IAAqB1D,EAAK,eACtBiC,GAA4BjC,CAAI,IAChCU,IAAyBV,EAAK,gBAClCS,IAAkB2C,IACd1B,GAAe1B,GAAM0D,CAAkB,IACvCA,GACJD,EAAM,mBAAmB;AACzB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,QAAAC,IAAqB1D,EAAK,eACtBiC,GAA4BjC,CAAI,IAChCU,IAAyBV,EAAK,gBAClCS,IAAkB2C,IACd1B,GAAe1B,GAAM0D,CAAkB,IACvCA,GACJD,EAAM,mBAAmB;AACzB;AAAA,MACF;AACoB,QAAAhD,IAAAC;AAAA,IAAA;AAEtB,IAAA+C,EAAM,2BAA2BhD;AAAA,EAAA,OAC5B;AAED,QAAAkD,IAAcC,GAAa5D,CAAI;AAC7B,IAAAyD,EAAA,aAAaI,GAAmB7D,GAAM2D,CAAW;AAAA,EAAA;AAElD,SAAAF;AACT;AAEO,SAASK,GAAoB9D,GAAoB;AACtD,SAAOA,EAAK,aACR,KAAK,MAAMA,EAAK,eAAe,CAAC,KAC7B,SAASA,EAAK,aAAa,IAAI,IAAI,IAAI,KAC1C;AACN;AAEO,SAAS+D,GAAqB/D,GAAoB;AACvD,SAAOA,EAAK,aACR,KAAK,OAAOA,EAAK,eAAe,KAAK,CAAC,IACpC,KACC,SAASA,EAAK,aAAa,IAAI,IAAI,IAAI,KAC1CA,EAAK;AACX;AAEO,SAASgE,GAAkBhE,GAAoB;AAC7C,SAAAA,EAAK,yBAAyB8D,GAAoB9D,CAAI;AAC/D;AAEO,SAASiE,GAAgBjE,GAAoB;AAC3C,SAAAA,EAAK,yBAAyB+D,GAAqB/D,CAAI;AAChE;AAEO,SAASkE,GAA2BlE,GAAoB;;AAC7D,MAAImE,IAAsB,CAAC;AACrB,QAAAC,IAAaJ,GAAkBhE,CAAI,GACnCqE,IAAWJ,GAAgBjE,CAAI;AACrC,WACMsE,IAAkBF,GACtBE,IAAkBD,GAClBC;AAEA,MAAIxE,IAAAE,EAAK,mBAAL,gBAAAF,EAAqB,QAAQwE,MAAmB,KAClDH,EAAoB,KAAKG,CAAe;AAGrC,SAAAH;AACT;AAEgB,SAAAI,GAAYvE,GAAqBoB,GAAc;AAC7D,MAAIoD,GAAYC;AAChB,QAAMC,IAAgB1E,EAAK,kBAAkB,IAAIA,EAAK;AAClD,EAACA,EAAK,WAIRyE,IAAcC,IAAgB,SAAS,GAAG1E,EAAK,oBAAoB,CAAC,EAAE,IAFpEwE,IAAAG,GAAoB3E,CAAI,IAAI,SAAS,GAAGA,EAAK,mBAAmB,CAAC,EAAE;AAIvE,MAAI4E,IAAyC;AAAA,IAC3C,SAAS;AAAA,IACT,YAAY;AAAA,EACd;AACA,MAAI5E,EAAK,iBAAiB;AACpB,QAAA6E,IAAa7E,EAAK,WAElB,sBAAsBoB,IAAO,aAD7B,iBAAiBA,IAAO;AAEpB,IAAAwD,IAAA;AAAA,MACN,GAAGA;AAAA,MACH,WAAAC;AAAA,IACF;AAAA,EAAA;AAEA,IAAI7E,EAAK,WACP4E,EAAM,MAASxD,IAEfwD,EAAM,OAAUxD;AAGpB,SAAIpB,EAAK,SAAc4E,IAAA,EAAE,SAAS,EAAE,IAChCJ,MAAkBI,EAAA,QAAQJ,IAAa,OACvCC,MAAmBG,EAAA,SAASH,IAAc,OAEvCG;AACT;AAEO,SAASD,GAAoB3E,GAAqB;AACvD,SAAOA,EAAK,mBAAmBA,EAAK,eAChCA,EAAK,kBACL8E,EAAkB9E,CAAI,IAAIA,EAAK,kBAAkB+E,GAAmB/E,CAAI;AAC9E;AAEgB,SAAA6D,GAAmB7D,GAAqBoB,GAAc;AAChE,MAAAwD,IAAQL,GAAYvE,GAAMoB,CAAI;AAElC,SAAIpB,EAAK,kBACP4E,EAAM,aAAa,eAAe5E,EAAK,QAAQ,QAAQA,EAAK,UAExDA,EAAK,WACP4E,EAAM,aAAa,SAAS5E,EAAK,QAAQ,QAAQA,EAAK,UAEtD4E,EAAM,aAAa,UAAU5E,EAAK,QAAQ,QAAQA,EAAK,SAGvDA,EAAK,+BACP4E,EAAM,cAAc,gBAEfA;AACT;AAEO,SAAShB,GAAa5D,GAAqB;AAC5C,MAAA;AAAA,IACF,eAAAkB;AAAA,IACA,wBAAAR;AAAA,IACA,SAAAsE;AAAA,IACA,UAAApE;AAAA,IACA,YAAAK;AAAA,IACA,iBAAAR;AAAA,IACA,cAAAD;AAAA,IACA,gBAAAD;AAAA,IACA,iBAAA0E;AAAA,IACA,WAAAhC;AAAA,IACA,eAAAiC;AAAA,IACA,kBAAAC;AAAA,IACA,MAAAC;AAAA,IACA,UAAAC;AAAA,IACA,KAAAxF;AAAA,EAAA,IACEG;AACJ,EAAAiD,IAAYA,KAAa,GACzBgC,IAAkBA,KAAmB,GACrCE,IAAmBA,KAAoB;AAEvC,MAAI/E,IAAmB,GACnBkF,GACAC,GACAC,IAAiB;AAEjB,MAAAJ,KAAQ3E,MAAoB;AACvB,WAAA;AAGT,MAAIgF,IAAiB;AAwCrB,MAvCI7E,KACe6E,IAAA,CAACX,EAAkB9E,CAAI,GAGtCS,IAAkBF,MAAmB,KACrCG,IAAyBH,IAAiBE,MAE1CgF,IAAiB,EAAE/E,IAAyBD,IACxCD,KAAgBE,IAAyBD,KACzCA,IAAkBF,KAGpBU,MACgBwE,KAAA,KAAK,MAAMjF,IAAe,CAAC,OAI7CC,IAAkBF,MAAmB,KACrCG,IAAyBH,IAAiBE,MAE1CgF,IAAiBjF,IAAgBC,IAAkBF,IAEjDU,MACewE,IAAA,KAAK,MAAMjF,IAAe,CAAC,KAGhDJ,IAAmBqF,IAAiB,SAAS,GAAGR,CAAe,EAAE,GACjEO,IAAiBC,IAAiB,SAAS,GAAGN,CAAgB,EAAE,GAE3DE,IAKHC,IACE5E,IAAyB,SAAS,GAAGyE,CAAgB,EAAE,IAAI,KAC3DK,IANFF,IACE5E,IAAyB,SAAS,GAAGuE,CAAe,EAAE,IAAI,KAC1D7E,GAOA8E,MAAkB,IAAM;AACtB,QAAAQ;AAKJ,QAJmBA,IAAAhF,IAAyBoE,EAAkB9E,CAAI,GAEhEuF,IAAAP,KAAYA,EAAQ,WAAWU,CAAgB,GACpCJ,IAAAC,IAAcA,EAAY,aAAa,KAAK,GACrDtE,MAAe,IAAM;AAKvB,UAJAyE,IAAmB9E,IACfF,IAAyBoE,EAAkB9E,CAAI,IAC/CU,GACS4E,IAAA,GACTN,GAAS;AACG,QAAAO,IAAAP,EAAQ,SAASU,CAAgB;AAC/C,iBAASC,IAAQ,GAAGA,IAAQD,GAAkBC;AAC5C,UAAKX,EAAQ,SAASW,CAAK,MACZL,KAAAN,EAAQ,SAASW,CAAK,EAAkB;AAAA,MACzD;AAEF,MAAAL,KAAc,SAASpE,CAAa,GAChCqE,MACYD,KAAArC,IAAYsC,EAAY,cAAc;AAAA,IACtD;AAAA,EACF;AAGE,SAAA1F,UAAkB,CAACyF,IAEhBA;AACT;AAEa,MAAAM,KAAY,CAAC5F,MAEtBA,EAAK,YACJA,EAAK,2BAA2B,KAC/BA,EAAK,kBAAkBA,EAAK,cAIrB6F,KAAY,CAAC7F,MAAqB;AAC7C,MAAI8F,IAAQ;AACR,SAAC9F,EAAK,aACJA,EAAK,aACC8F,IAAA9F,EAAK,yBAAyBA,EAAK,kBAAkB,KAE7DA,EAAK,mBAAmBA,EAAK,gBAC7BA,EAAK,0BAA0BA,EAAK,kBAAkBA,EAAK,kBAEnD8F,IAAA,MAGLA;AACT,GAEaC,KAAmB,CAAC/F,MAAsB;AACjD,MAAA;AAAA,IACF,gBAAAgG;AAAA,IACA,WAAAC;AAAA,IACA,MAAAb;AAAA,IACA,UAAAxE;AAAA,IACA,OAAAe;AAAA,IACA,iBAAAlB;AAAA,IACA,gBAAAyF;AAAA,IACA,UAAAvF;AAAA,IACA,wBAAAD;AAAA,IACA,YAAAO;AAAA,IACA,gBAAAV;AAAA,IACA,cAAAC;AAAA,IACA,mBAAA2F;AAAA,EAAA,IACEnG;AACJ,MACGgG,KAAkBC,KAClBb,KAAQ,CAACxE,MAAae,IAAQ,KAAKA,KAASlB;AAE7C;AACF,MAAI2F,IAA2BzE,GAC7B0E,GACEC,IAAqC,IACvCC,IAA0C,CAAC;AAC7C,MAAInB;AACF,WAAIzD,IAAQ,IACkByE,KAAA3F,IACnBkB,KAASlB,MACU2F,KAAA3F,IAE1BE,KAAYuF,EAAe,QAAQE,CAAwB,IAAI,KACjEF,EAAe,KAAKE,CAAwB,GAE/BE,IAAA;AAAA,MACb,WAAW;AAAA,MACX,wBAAwBF;AAAA,MACxB,gBAAAF;AAAA,IACF,GACoBK,IAAA,EAAE,WAAW,GAAM,GAChC;AAAA,MACL,cAAAD;AAAA,MACA,mBAAAC;AAAA,IACF;AAEqB,EAAAF,IAAAD,GACnBA,IAA2B,KAC7BC,IAAuBD,IAA2B3F,GAC7CG,IACIH,IAAkBF,MAAmB,MAC5C8F,IACE5F,IAAmBA,IAAkBF,KAHH8F,IAAA,KAKtC,CAACR,GAAU7F,CAAI,KACfoG,IAA2B1F,IAE3B0F,IAA2BC,IAAuB3F,IACzCO,KAAcmF,KAA4B3F,KACxB2F,IAAAxF,IAAWH,IAAkBA,IAAkB,GACnD4F,IAAAzF,IAAW,IAAIH,IAAkB,KAC/C2F,KAA4B3F,MACrC4F,IAAuBD,IAA2B3F,GAC7CG,IACIH,IAAkBF,MAAmB,MAA0B8F,IAAA,KADzDA,IAAuB5F,IAAkBD;AAG1D,MAAIgG,IAAY5C,GAAa;AAAA,IAC3B,GAAG5D;AAAA,IACH,wBAAwBqG;AAAA,EAAA,CACzB,GACGI,IAAgB7C,GAAa;AAAA,IAC/B,GAAG5D;AAAA,IACH,wBAAwBoG;AAAA,EAAA,CACzB;AAaD,SAZKxF,MACC6F,MAAkBD,MACOJ,IAAAC,IACbI,IAAAD,IAEd7F,MACFuF,IAAiBA,EAAe;AAAA,IAC9BhC,GAA2B;AAAA,MACzB,GAAGlE;AAAA,MACH,wBAAwBoG;AAAA,IACzB,CAAA;AAAA,EACH,IACGD,KAWUG,IAAA;AAAA,IACb,WAAW;AAAA,IACX,wBAAwBD;AAAA,IACxB,YAAYxC,GAAmB7D,GAAMyG,CAAa;AAAA,IAClD,gBAAAP;AAAA,EACF,GACoBK,IAAA;AAAA,IAClB,WAAW;AAAA,IACX,wBAAwBF;AAAA,IACxB,YAAY9B,GAAYvE,GAAMwG,CAAS;AAAA,IACvC,WAAW;AAAA,EACb,GACO,EAAE,cAAAF,GAAc,mBAAAC,EAAkB,MAtBxBD,IAAA;AAAA,IACb,wBAAwBD;AAAA,IACxB,YAAY9B,GAAYvE,GAAMwG,CAAS;AAAA,IACvC,gBAAAN;AAAA,EACF,GACO;AAAA,IACL,cAAAI;AAAA,IACA,mBAAAC;AAAA,EACF;AAeJ;AAEO,SAASzB,EAAkB9E,GAAqB;AACjD,SAACA,EAAK,WAGNA,EAAK,gBACAA,EAAK,kBAEPA,EAAK,gBAAgBA,EAAK,aAAa,IAAI,KALzC;AAMX;AAEO,SAAS+E,GAAmB/E,GAAqB;AAClD,SAACA,EAAK,WAGHA,EAAK,kBAFH;AAGX;AAEa,MAAA0G,KAAoB,CAC/B,GACA1G,MAC+B;AACzB,QAAA;AAAA,IACJ,WAAAqD;AAAA,IACA,WAAA4C;AAAA,IACA,UAAAZ;AAAA,IACA,cAAAjC;AAAA,IACA,iBAAAV;AAAA,IACA,KAAA7C;AAAA,IACA,wBAAAa;AAAA,IACA,cAAAiG;AAAA,IACA,aAAAC;AAAA,IACA,QAAAC;AAAA,IACA,QAAAC;AAAA,IACA,SAAAC;AAAA,IACA,iBAAAtG;AAAA,IACA,gBAAAF;AAAA,IACA,UAAAK;AAAA,IACA,aAAA6B;AAAA,IACA,YAAAuE;AAAA,IACA,YAAA7D;AAAA,IACA,WAAAF;AAAA,EAAA,IACEjD;AACJ,MAAIqD,EAAW;AACf,MAAI4C,GAAW;AACb,MAAE,eAAe;AACjB;AAAA,EAAA;AAEF,EAAIZ,KAAYjC,KAAgBV,KAAiB,EAAE,eAAe;AAC9D,MAAAuE,GACFxD,IAAwB,CAAC,GACvByD,IAAUtD,GAAa5D,CAAI;AACnB,EAAAyC,EAAA,OACV,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB,SACZA,EAAA,OACV,OAAO,cAAc,aAAa,aAC9B,EAAE,QAAQ,CAAC,EAAE,QACZ,EAAiB,SACxBA,EAAY,cAAc,KAAK;AAAA,IAC7B,KAAK,KAAK,KAAK,IAAIA,EAAY,OAAOA,EAAY,QAAQ,CAAC,CAAC;AAAA,EAC9D;AACA,MAAI0E,IAAsB,KAAK;AAAA,IAC7B,KAAK,KAAK,KAAK,IAAI1E,EAAY,OAAOA,EAAY,QAAQ,CAAC,CAAC;AAAA,EAC9D;AACA,MAAI,CAACC,KAAmB,CAACqE,KAAWI,IAAsB;AACjD,WAAA,EAAE,WAAW,GAAK;AAEvB,EAAAzE,QAA6B,cAAcyE;AAC3C,MAAAC,KACAvH,IAAU,KAAJ,MAAW4C,EAAY,OAAOA,EAAY,SAAS,IAAI;AAC7D,EAAAC,MACF0E,IAAiB3E,EAAY,OAAOA,EAAY,SAAS,IAAI;AAE/D,MAAI4E,KAAW,KAAK,KAAK5G,IAAkBF,CAAc,GACrDiD,IAAiBhB,GAAkBxC,EAAK,aAAa0C,CAAe,GACpE4E,IAAmB7E,EAAY;AAsCnC,SArCK7B,MAEAF,MAA2B,KAAK8C,MAAmB,WACnD9C,IAAyB,KAAK2G,MAAY7D,MAAmB,UAC7D,CAACqC,GAAU7F,CAAI,KAAKwD,MAAmB,YAExC8D,IAAmB,KAAK,MAAM7E,EAAY,cAAckE,CAAY,GAChEC,MAAgB,MAASC,MAC3BA,EAAOrD,CAAc,GACrBC,EAAM,cAAc,MAItB,CAACqD,KAAUE,MACbA,EAAWxD,CAAc,GACzBC,EAAM,SAAS,KAEZ4B,IAQD4B,IAAAC,IAAUI,KAAoBnE,IAAaF,KAAamE,IAPrDvH,IAGHoH,IAAYC,IAAUI,IAAmBF,IAFzCH,IAAYC,IAAUI,IAAmBF,GAQzC1E,MACFuE,IAAYC,IAAUI,IAAmBF,IAEnC3D,IAAA;AAAA,IACN,GAAGA;AAAA,IACH,aAAAhB;AAAA,IACA,WAAAwE;AAAA,IACA,YAAY1C,GAAYvE,GAAMiH,CAAS;AAAA,IACvC,gBAAAzD;AAAA,EACF,GAEE,KAAK,IAAIf,EAAY,OAAOA,EAAY,MAAM,IAC9C,KAAK,IAAIA,EAAY,OAAOA,EAAY,MAAM,IAAI,OAIhDA,EAAY,cAAc,OAC5BgB,EAAM,UAAU,IAChB,EAAE,eAAe,IAEZA;AACT;AAEgB,SAAA8D,GAAmBC,GAAoBhH,GAAsB;AACpE,SAAA,KAAK,KAAKgH,IAAahH,CAAY;AAC5C;AAEO,SAASiH,GAAezH,GAA2B;;AACxD,MAAIS,IAAkB8G;AAAA,IACpBvH,EAAK,OAAO;AAAA,IACZA,EAAK;AAAA,EACP,GACIiD,IAAY,KAAK,OAAKnD,IAAAE,EAAK,WAAL,gBAAAF,EAAa,gBAAe,CAAC,GACnD0E,IAAa,KAAK,OAAKkD,IAAA1H,EAAK,YAAL,gBAAA0H,EAAc,gBAAe,CAAC,GACrDzC;AACA,MAACjF,EAAK;AAcU,IAAAiF,IAAAhC;AAAA,OAdA;AAClB,QAAI0E,IAAmB3H,EAAK,aACxB,SAASA,EAAK,aAAa,IAAI,IAC/B;AAEF,IAAA,OAAOA,EAAK,iBAAkB,YAC9BA,EAAK,cAAc,MAAM,EAAE,MAAM,QAEjC2H,KAAoB1E,IAAY,MAElCgC,IAAkB,KAAK;AAAA,OACpBhC,IAAY0E,KAAoB3H,EAAK;AAAA,IACxC;AAAA,EAAA;AAIF,MAAImF,IACFnF,EAAK,UAAUA,EAAK,OAAO,cAAc,kBAAkB,OACvD4H,IAAA5H,EAAK,OAAO,cAA2B,kBAAkB,MAAzD,gBAAA4H,EACI,iBAAgB,GAEtBzE,IAAagC,IAAmBnF,EAAK,cACrCU,IACFV,EAAK,2BAA2B,SAC5BA,EAAK,oBACLA,EAAK;AACX,EAAIA,EAAK,OAAOA,EAAK,2BAA2B,WACrBU,IAAAD,IAAkB,IAAIT,EAAK;AAElD,MAAAkG,IAAiBlG,EAAK,kBAAkB,CAAC,GACzC6H,IAAoB3D,GAA2BlE,CAAoB;AACvE,EAAAkG,EAAe,OAAO2B,CAAiB;AAEvC,MAAIC,IAM8B;AAAA,IAChC,iBAAArH;AAAA,IACA,iBAAAwE;AAAA,IACA,WAAAhC;AAAA,IACA,YAAAuB;AAAA,IACA,wBAAA9D;AAAA,IACA,kBAAAyE;AAAA,IACA,YAAAhC;AAAA,IACA,gBAAA+C;AAAA,EACF;AAEA,SAAIlG,EAAK,gBAAgB,QAAQA,EAAK,aACpC8H,EAAY,cAAc5I,EAAY,UAGjC4I;AACT;AC16BO,MAAMC,GAAW;AAAA,EAAjB;AACL,IAAAC,GAAA,oBAA6C,CAAC;AAAA;AAAA,EAE9C,SAASC,GAAeC,GAAoD;AACtE,IAAA,KAAK,WAAWD,CAAK,IAClB,KAAA,eAAeA,GAAOC,CAAO,KAElC,KAAK,WAAWD,CAAK,IAAI,OAAO,WAAWA,CAAK,GAC3C,KAAA,eAAeA,GAAOC,CAAO,IAEhC,KAAK,WAAWD,CAAK,EAAE,WACjBC,EAAA,EAAE,SAAS,IAAM;AAAA,EAC3B;AAAA,EAGF,WACED,GACAC,GACA;AACI,IAAA,KAAK,WAAWD,CAAK,KAClB,KAAA,kBAAkBA,GAAOC,CAAO;AAAA,EACvC;AAAA,EAGM,eACND,GACAC,GACA;AACI,QAAA;AACF,WAAK,WAAWD,CAAK,EAAE,iBAAiB,UAAUC,CAAO;AAAA,YAC/C;AACN,UAAA;AACF,aAAK,WAAWD,CAAK,EAAE,YAAYC,CAAO;AAAA,eACnCC,GAAG;AACV,gBAAQ,MAAMA,CAAC;AAAA,MAAA;AAAA,IACjB;AAAA,EACF;AAAA,EAGM,kBACNF,GACAC,GACA;AACI,QAAA;AACF,WAAK,WAAWD,CAAK,EAAE,oBAAoB,UAAUC,CAAO;AAAA,YAClD;AACN,UAAA;AACF,aAAK,WAAWD,CAAK,EAAE,eAAeC,CAAO;AAAA,eACtCC,GAAG;AACV,gBAAQ,MAAMA,CAAC;AAAA,MAAA;AAAA,IACjB;AAAA,EACF;AAEJ;AClDa,MAAAC,KAAY,MACvB,CAAC,EACC,OAAO,SAAW,OAClB,OAAO,YACP,OAAO,SAAS,gBAGPC,KAAkB,CAAmBC,MAChD,OAAO,KAAKA,CAAK,EACd,OAAO,CAACC,MAAQD,EAAMC,CAAc,MAAM,MAAS,EACnD,OAAO,CAACC,GAAKD,OACRC,EAAAD,CAAc,IAAID,EAAMC,CAAc,GACnCC,IACN,EAAO;AAEP,SAASC,KAAiB;;AAC3B,EAAC,OAAO,kBACR3I,IAAA,OAAO,aAAa,MAApB,QAAAA,EAAuB,QAClB,OAAA,eAAgB,MAAM,KACpB4H,IAAA,OAAO,aAAa,MAApB,QAAAA,EAAuB,mBACzB,OAAA,eAAgB,gBAAgB;AAE3C;AAEO,SAASgB,GAAQC,GAA0B;AAQzC,SAPY,OAAO,KAAKA,CAAG,EAAE,IAAI,CAACJ,MAAQ;AAC3C,QAAAK,IAAQD,EAAIJ,CAAG;AACf,WAAA,MAAM,QAAQK,CAAK,MACbA,IAAAA,EAAM,KAAK,OAAO,IAErB,IAAIL,CAAG,KAAKK,CAAK;AAAA,EAAA,CACzB,EACiB,KAAK,OAAO;AAChC;AAEgB,SAAAC,GACdC,GACAC,GACwB;AAClB,QAAAC,IAAY,WAAWF,GAAUC,CAAI;AAC3C,SAAO,EAAE,QAAQ,MAAM,aAAaC,CAAS,EAAE;AACjD;AC3BA,MAAMC,KAAmB,CAACC,MAA4B;AACpD,QAAMC,IAAe;AAAA,IACnB,eAAe,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAC9C,gBAAgB,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAChD,QAAQ,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IACvC,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,UAAU,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC1C,eAAe,EAAE,MAAM,QAAQ,SAAS,IAAK;AAAA,IAC7C,YAAY,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC5C,eAAe,EAAE,MAAM,QAAQ,SAAS,OAAO;AAAA,IAC/C,SAAS,EAAE,MAAM,QAAQ,SAAS,OAAO;AAAA,IACzC,MAAM,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IACtC,WAAW,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAC1C,cAAc,EAAE,MAAM,QAAQ,SAAS,KAAK;AAAA,IAC5C,MAAM,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IACtC,eAAe,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC/C,4BAA4B,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC5D,UAAU,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IACzC,mBAAmB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,IAC9C,UAAU,EAAE,MAAM,QAAQ,SAAS,KAAK;AAAA,IACxC,gBAAgB,EAAE,MAAM,QAAQ,SAAS,OAAO;AAAA,IAChD,kBAAkB,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAClD,cAAc,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC9C,cAAc,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAC7C,gBAAgB,EAAE,MAAM,QAAQ,SAAS,WAAW;AAAA,IACpD,YAAY,EAAE,MAAM,OAAiC,SAAS,CAAA,EAAG;AAAA,IACjE,KAAK,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IACrC,gBAAgB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,IAC3C,gBAAgB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,IAC3C,cAAc,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,IACzC,OAAO,EAAE,MAAM,QAAQ,SAAS,IAAI;AAAA,IACpC,OAAO,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IACtC,cAAc,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC9C,WAAW,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAC1C,gBAAgB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,IAC3C,mBAAmB,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAClD,iBAAiB,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAChD,eAAe,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC/C,UAAU,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IAC1C,iBAAiB,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,IACjD,gBAAgB,EAAE,MAAM,SAAS,SAAS,GAAK;AAAA,IAC/C,gBAAgB,EAAE,MAAM,QAAQ,SAAS7J,GAAe,KAAK;AAAA,EAC/D;AACI,SAAC4J,IACE,OAAO,KAAKC,CAAY,EAAE,OAE9B,CAACX,GAAKD,OACHW,EAAa,SAASX,CAAG,MACvBC,EAAAD,CAAkB,IAAKY,EAAqBZ,CAAG,IAE9CC,IACN,EAAE,IARqBW;AAS5B,GAEaA,KAAeF,GAAiB,GAEhCG,KAAoB,OAAO,KAAKD,EAAY,EAAE,OAExD,CAACX,GAAKD,OACPC,EAAID,CAAG,IAAKY,GAAqBZ,CAAG,EAAE,SAC/BC,IACN,EAAE,GAIQa,KAA4C,OAAO;AAAA,EAC9D,WAAW;AAAA,EACX,aAAa;AAAA,EACb,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,aAAa;AAAA,EACb,gBAAgB,CAAC;AAAA,EACjB,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,aAAa,EAAE,QAAQ,GAAG,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAG,aAAa,EAAE;AAAA,EACtE,YAAY,CAAC;AAAA,EACb,YAAY;AACd,IAEaC,KAAoB;AAAA,EAC/B,GAAGL,GAAiB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAAA,EAEC,wBAAwB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EACnD,gBAAgB,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,EAChD,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,SAAS,CAAA;AAAA,EACX;AAAA,EACA,YAAY,EAAE,MAAM,QAAQ,SAAS,OAAU;AAAA,EAC/C,YAAY,EAAE,MAAM,QAAQ,SAAS,CAAA,EAAG;AAAA,EACxC,iBAAiB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EAC5C,gBAAgB,EAAE,MAAM,OAA8B,SAAS,CAAA,EAAG;AAAA,EAClE,kBAAkB,EAAE,MAAM,CAAC,QAAQ,MAAM,GAAG,SAAS,OAAU;AAAA,EAC/D,iBAAiB,EAAE,MAAM,CAAC,QAAQ,MAAM,GAAG,SAAS,OAAU;AAElE,GAEaM,KAAoB;AAAA,EAC/B,GAAGN,GAAiB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAAA,EAEC,wBAAwB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EACnD,UAAU,EAAE,MAAM,SAAS,SAAS,GAAM;AAAA,EAC1C,iBAAiB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EAC5C,MAAM,EAAE,MAAM,QAAqC,SAAS,OAAO;AAEvE,GAEaO,KAAmB;AAAA,EAC9B,GAAGP,GAAiB,CAAC,YAAY,kBAAkB,cAAc,CAAC;AAAA,EAEhE,wBAAwB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EACnD,iBAAiB,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EAC5C,WAAW,EAAE,MAAM,QAAQ,SAAS,EAAE;AAE1C;;;;;ACrIA,UAAMX,IAAQmB,GACRC,IAAOC,GACPC,IAAeC,EAAS,MAAM,MAAM;AACxC,MAAIvB,EAAM,YACVoB,EAAKpB,EAAM,IAAI;AAAA,IAAA,CAChB,GACKwB,IAAiBD,EAAyB,OAAO;AAAA,MACrD,wBAAwBvB,EAAM;AAAA,MAC9B,iBAAiBA,EAAM;AAAA,MACvB,SAASsB,EAAa;AAAA,MACtB,UAAU,CAACtB,EAAM;AAAA,IAAA,EACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6BF,UAAMA,IAAQmB,GACRC,IAAOC,GAIPI,IAAuB,CAACpI,MAAkB;AAC9C,UAAIqI,IAAW,IACbC,IAAW,IACXC,IAAY,IACZhI;AACF,aAAIoG,EAAM,cACRpG,IAAe,KAAK,MAAMoG,EAAM,eAAe,CAAC,GAChD2B,KACGtI,IAAQ2G,EAAM,0BAA0BA,EAAM,oBAAoB,GAEnE3G,IAAQ2G,EAAM,yBAAyBpG,IAAe,KACtDP,KAAS2G,EAAM,yBAAyBpG,MAE7B8H,IAAA,OAGbA,IACE1B,EAAM,0BAA0B3G,KAChCA,IAAQ2G,EAAM,yBAAyBA,EAAM,cAEjD4B,IAAYvI,MAAU2G,EAAM,wBACrB,OAAO,QAAQ;AAAA,QACpB,QAAQ0B;AAAA,QACR,QAAQC;AAAA,QACR,SAASC;AAAA,MACV,CAAA,EACE,OAAO,CAAC,CAAG,EAAAtB,CAAK,MAAMA,CAAK,EAC3B,IAAI,CAAC,CAACL,CAAG,MAAMA,CAAG;AAAA,IACvB,GAEM4B,IAAqB,CAACxI,MAAkB;AAC5C,UAAIiD,IAOA,CAAC;AASL,WAPI0D,EAAM,kBAAkB,UAAaA,EAAM,kBAAkB,QACzD1D,EAAA,QACJ,OAAO0D,EAAM,mBAAoB,WAC7B,GAAGA,EAAM,eAAe,OACxBA,EAAM,kBAGVA,EAAM,MAAM;AAEd,YADA1D,EAAM,WAAW,YACb0D,EAAM,UAAU;AAClB,gBAAMnD,IAAoBmD,EAAM,mBAE5B,OAAOA,EAAM,oBAAqB,WAChC,WAAWA,EAAM,gBAAgB,IACjCA,EAAM,mBAHR;AAIJ,UAAA1D,EAAM,MAAM,GAAG,CAACjD,IAAQwD,CAAgB;AAAA,QAAA,OACnC;AACL,gBAAMF,IAAmBqD,EAAM,kBAE3B,OAAOA,EAAM,mBAAoB,WAC/B,WAAWA,EAAM,eAAe,IAChCA,EAAM,kBAHR,GAKElH,IAAOkH,EAAM,MACf3G,IAAQsD,IACR,CAACtD,IAAQsD;AACP,UAAAL,EAAA,OAAO,GAAGxD,CAAI;AAAA,QAAA;AAEtB,QAAAwD,EAAM,UAAU0D,EAAM,2BAA2B3G,IAAQ,IAAI,GACvDiD,EAAA,aACJ,aACA0D,EAAM,QACN,QACAA,EAAM,UACN,kBAEAA,EAAM,QACN,QACAA,EAAM,SACJA,EAAM,+BACR1D,EAAM,cAAc;AAAA,MACtB;AAGK,aAAAA;AAAA,IACT,GAEMwF,IAAsBP,EAAuB,MAC7BvB,EAAM,eAAe,IAAI,CAAC+B,GAAe1I,MAAU;AAC/D,YAAAiD,IAAQuF,EAAmBxI,CAAK,GAChC2I,IAAUP,EAAqBpI,CAAK;AAC1C,MAAI2G,EAAM,QAAQgC,EAAQ,SAAS,QAAQ,KACzC,OAAO,OAAO1F,GAAO,EAAE,QAAQ,GAAG;AAEpC,YAAM2F,IAAyB;AAAA,QAC7B,QAAQ,CAAC;AAAA,QACT,KAAK,YAAY5I,CAAK;AAAA,QACtB,OAAO2I;AAAA,QACP,OAAA1F;AAAA,QACA,OAAO;AAAA,UACL,cAAcjD;AAAA,UACd,eAAe,GAAG,CAAC2I,EAAQ,SAAS,QAAQ,CAAC;AAAA,QAC/C;AAAA,QACA,SAAS,MAAM;AACb,UAAAZ,EAAK,cAAc;AAAA,YACjB,OACEpB,EAAM,OAAOA,EAAM,WAAWA,EAAM,kBAAkB3G,IAAQA;AAAA,UAAA,CACjE;AAAA,QAAA;AAAA,MAEL;AAEE,cAAA,CAAC2G,EAAM,YACNA,EAAM,YAAYA,EAAM,eAAe,QAAQ3G,CAAK,KAAK,OAE1D4I,EAAW,SAASF,IAEfE;AAAA,IAAA,CACR,CAGF,GAEKC,IAAsBX,EAAuB,MAE/C,CAACvB,EAAM,YACPA,EAAM,QACNA,EAAM,mBAAmBA,EAAM,eAExB,CAAC,IAEUA,EAAM,eACvB,IAAI,CAAC+B,GAAe1I,MAAU;AACvB,YAAA8I,IAAanC,EAAM,kBAAkB3G;AACvC,UAAA8I,IAAa3F,EAAkBwD,CAAsB,EAAG;AAC5D,YAAMC,IAAM,CAACkC,GACPF,IAAyB;AAAA,QAC7B,QAAQ,CAAC;AAAA,QACT,KAAK,YAAYhC,CAAG;AAAA,QACpB,OAAOwB,EAAqBxB,CAAG;AAAA,QAC/B,OAAO4B,EAAmBxI,CAAK;AAAA,QAC/B,OAAO;AAAA,UACL,cAAc4G;AAAA,UACd,eAAe;AAAA,QACjB;AAAA,QACA,SAAS,MAAM;AACb,UAAAmB,EAAK,cAAc;AAAA,YACjB,OAAOnB;AAAA,UAAA,CACR;AAAA,QAAA;AAAA,MAEL;AACA,cACEA,KAAOvE,GAAkBsE,CAAqB,KAC9C,CAACA,EAAM,YACNA,EAAM,YAAYA,EAAM,eAAe,QAAQ3G,CAAK,KAAK,OAE1D4I,EAAW,SAASF,IAEfE;AAAA,IACR,CAAA,EACA,OAAO,CAACA,MAAeA,CAAU,CAGrC,GAEKG,IAAuBb,EAAuB,MAEhD,CAACvB,EAAM,YACPA,EAAM,QACNA,EAAM,mBAAmBA,EAAM,eAExB,CAAC,IAEUA,EAAM,eAAe,IAAI,CAAC+B,GAAe1I,MAAU;AAC/D,YAAA4G,IAAMD,EAAM,kBAAkB3G,GAC9B4I,IAAyB;AAAA,QAC7B,QAAQ,CAAC;AAAA,QACT,KAAK,aAAahC,CAAG;AAAA,QACrB,OAAOwB,EAAqBxB,CAAG;AAAA,QAC/B,OAAO4B,EAAmBxI,CAAK;AAAA,QAC/B,OAAO;AAAA,UACL,cAAc4G;AAAA,UACd,eACED,EAAM,YACNA,EAAM,kBAAkBA,EAAM,yBAC5BA,EAAM,gBACR3G,IACE2G,EAAM,gBACHA,EAAM,kBAAkBA,EAAM,0BAC/B,UACA;AAAA,QACR;AAAA,QACA,SAAS,MAAM;AACb,UAAAoB,EAAK,cAAc;AAAA,YACjB,OAAOpB,EAAM,MAAMA,EAAM,kBAAkBC,IAAMA;AAAA,UAAA,CAClD;AAAA,QAAA;AAAA,MAEL;AACA,cACEA,IAAMtE,GAAgBqE,CAAqB,KAC3C,CAACA,EAAM,YACNA,EAAM,YAAYA,EAAM,eAAe,QAAQ3G,CAAK,KAAK,OAE1D4I,EAAW,SAASF,IAEfE;AAAA,IAAA,CACR,CAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5PD,UAAMjC,IAAQmB,GACRO,IAAW,CAACW,MAAc;AACxB,YAAAC,IAAYD,IAAIrC,EAAM,gBACtBuC,IAAaD,IAAYtC,EAAM,iBAAiB;AACtD,aACEA,EAAM,0BAA0BsC,KAChCtC,EAAM,0BAA0BuC;AAAA,IAEpC;;;;;;;;;;;;;;;;;;;;;;;;kBC+IMC,KAA2B;;;;;;;;;;;;;;;;AAjBjC,UAAMxC,IAAQmB,GAGRC,IAAOC,GAWPoB,IAAQC,GAAS,GACjBC,IAAU7C,GAAA,IAAc,IAAIL,OAAe;AAI7C,QAAAmD,GACAC,IAA8C,MAC9CC,IAAuC,MACvCC,IAAmC,CAAC;AAExC,UAAMC,IAAkBC,EAAI;AAAA,MAC1B,KAAI3D,MAAAF,MAAA5H,KAAA0L,GAAmB,MAAnB,gBAAA1L,GAAsB,UAAtB,gBAAA4H,GAA6B,UAA7B,gBAAAE,GAAoC,UAAS,CAAA;AAAA,IAAC,CACnD;AAED,QAAI6D,IAAwB,IACxBC,IAAsD,MACtDC,IAA4B,MAE5BC,IAGE,CAAC;AAEP,UAAMC,IAAQ,CACZ5D,GACAC,GACA4D,MACG;AACH,UAAI,CAACb,EAAS;AAER,YAAAc,IAAa,CAACC,MAAoC;AACtD,QAAIA,EAAU,UACJ9D,EAAA,IAEQ4D,EAAA;AAAA,MAEpB;AAEQ,MAAAb,EAAA,SAAShD,GAAO8D,CAAU,GAClCH,EAAwB,KAAK,EAAE,OAAA3D,GAAO,SAAS8D,GAAY;AAAA,IAC7D,GAEME,IAAmB,MAAM;AACL,MAAAL,EAAA;AAAA,QAAQ,CAAC,EAAE,OAAA3D,GAAO,SAAAC,EAAA,MACxC+C,KAAA,gBAAAA,EAAS,WAAWhD,GAAOC;AAAA,MAC7B,GACA0D,IAA0B,CAAC;AAAA,IAC7B,GAEMM,IAAkB,MAAM;AACxB,UAAA,CAAC5D,EAAM,WAAW,OAAQ;AAC9B,YAAM6D,IAAc7D,EAAM,WAAW,IAAI,CAAC8D,MAASA,EAAK,UAAU;AAClE,MAAAD,EAAY,KAAK,CAACE,GAAGC,MAAMD,IAAIC,CAAC,GACpBH,EAAA,QAAQ,CAACI,GAAa5K,MAAU;AAC1C,cAAM6K,IAAa9D,GAAQ;AAAA,UACzB,aAAa,GAAG6D,CAAW;AAAA,QAAA,CAC5B;AACD,QAAAV;AAAA,UACEW;AAAA,UACA,MAAM;AACJ,YAAAjL,GAAW,QAAQgL;AAAA,UACrB;AAAA,UACA,MAAM;AACJ,YAAAhL,GAAW,QAAQI,MAAU,IAAI,SAAYwK,EAAYxK,IAAQ,CAAC;AAAA,UAAA;AAAA,QAEtE;AAAA,MAAA,CACD;AAAA,IACH,GAEM8K,IAAa,CAACtE,MAAkB;AAEpC,iBAAW,MAAM;AACf,QAAAA,EAAE,eAAe;AAAA,MAAA,CAClB;AACD,YAAMuE,IAAkB5K;AAAA,QACtBqG;AAAA,QACAwE,EAAS,MAAM;AAAA,QACfA,EAAS,MAAM;AAAA,MACjB;AACO,aAAA,OAAOlJ,EAAM,OAAOiJ,CAAe;AAAA,IAC5C,GAEME,IAAW,CAACzE,MAAkB;;AAC5B,YAAA0E,IAAgB9J,GAAiBoF,GAAG;AAAA,QACxC,GAAGwE,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,UAAS3D,IAAAgN,EAAe,UAAf,gBAAAhN,EAAsB;AAAA,QAC/B,QAAQiN,EAAc;AAAA,QACtB,iBAAiBtJ,EAAM,MAAM;AAAA,QAC7B,iBAAiBhD,EAAgB;AAAA,MAAA,CAClB;AACjB,UAAI,CAACoM,EAAe;AACpB,YAAM,EAAE,0BAA0BG,GAA6B,GAAGC,EAChE,IAAAJ;AACyB,MAAA3B,IAAA8B,GACpB,OAAA,OAAOvJ,EAAM,OAAOwJ,CAAI,GAC3B/B,MAA6B,UAC/BgC,EAAkBhC,CAAwB;AAAA,IAE9C,GAEMiC,IAAY,CAAChF,MAAkB;;AACpB,MAAAM,GAAA;AACf,YAAM,EAAE,gBAAAjF,GAAgB,GAAG4J,EAAe,IACxC1G,GAAkByB,GAAG;AAAA,QACnB,GAAGwE,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,UAAS3D,IAAAgN,EAAe,UAAf,gBAAAhN,EAAsB;AAAA,QAC/B,QAAQiN,EAAc;AAAA,QACtB,iBAAiBtJ,EAAM,MAAM;AAAA,QAC7B,iBAAiBhD,EAAgB;AAAA,QACjC,QAAQ,CAAC0H,MACPuB,EAAK,QAAQvB,CAAC;AAAA,QAChB,YAAY,CAACA,MACXuB,EAAK,SAASvB,CAAC;AAAA,MACD,CAAA,KAAM,CAAC;AAU3B,OARGwE,EAAS,MAAM,mBAAmBnJ,MAAmBpE,EAAe,MACrEoE,MAAmBpE,EAAe,QACjC,CAACuN,EAAS,MAAM,mBACfnJ,MAAmBpE,EAAe,QACpCoE,MAAmBpE,EAAe,UAElC+I,EAAE,eAAe,GAEdiF,MACDA,EAAe,YACO3B,IAAA,KAEnB,OAAA,OAAOhI,EAAM,OAAO2J,CAAc;AAAA,IAC3C,GAEMC,IAAO,MAAM;AACb,UAAAC;AACA,UAAAX,EAAS,MAAM;AACjB,QAAAW,IACE7J,EAAM,MAAM,yBAAyBkJ,EAAS,MAAM;AAAA,eAElD9G,GAAU;AACZ,QAAAyH,IACE7J,EAAM,MAAM,yBAAyBkJ,EAAS,MAAM;AAAA;AAE/C,eAAA;AAIX,MAAAO,EAAkBI,CAAS;AAAA,IAC7B,GAEMC,IAAQ,CACZC,IAA2D,SACxD;AACC,MAAA/J,EAAM,MAAM,kBACA,cAAAA,EAAM,MAAM,aAAa,GACvCA,EAAM,MAAM,gBAAgB;AAExB,YAAAgK,IAAchK,EAAM,MAAM;AAC5B,MAAA+J,MAActO,EAAY,SACtBuE,EAAA,MAAM,cAAcvE,EAAY,SAEtCsO,MAActO,EAAY,YACzBuO,MAAgBvO,EAAY,WAAWuO,MAAgBvO,EAAY,WAE9DuE,EAAA,MAAM,cAAcvE,EAAY,UAC7BuO,MAAgBvO,EAAY,UAC/BuE,EAAA,MAAM,cAAcvE,EAAY,UAC7BuO,MAAgB,SACzBhK,EAAM,MAAM,cAAc;AAAA,IAE9B,GAEMiK,IAAW,CAACC,MAAqD;AACjE,MAAAlK,EAAM,MAAM,iBACA,cAAAA,EAAM,MAAM,aAAa;AAEnC,YAAAgK,IAAchK,EAAM,MAAM;AAC5B,UAAAkK,MAAazO,EAAY;AAEzB,YAAAuO,MAAgBvO,EAAY,WAC5BuO,MAAgBvO,EAAY,WAC5BuO,MAAgBvO,EAAY;AAE5B;AAAA,iBAEOyO,MAAazO,EAAY;AAClC,YACEuO,MAAgBvO,EAAY,UAC5BuO,MAAgBvO,EAAY;AAE5B;AAAA,iBAEOyO,MAAazO,EAAY,SAEhCuO,MAAgBvO,EAAY,UAC5BuO,MAAgBvO,EAAY;AAE5B;AAGJ,MAAAuE,EAAM,MAAM,gBAAgB;AAAA,QAC1B4J;AAAA,QACAV,EAAS,MAAM,gBAAgB;AAAA,MACjC,GACMlJ,EAAA,MAAM,cAAcvE,EAAY;AAAA,IACxC,GAEM0O,IAAc,MAAM;AACxB,UAAIjB,EAAS,MAAM,kBAAkBI,EAAc,OAAO;AAClD,cAAAc,IAAoBd,EAAc,MAAM;AAAA,UAC5C;AAAA,QACF;AACA,YAAIe,IAAY;AACE,QAAAD,EAAA,QAAQ,CAACtD,MAAe;AACxC,UAAAuD,IAAY,KAAK,IAAIA,GAAWvD,EAAW,YAAY;AAAA,QAAA,CACxD,GACawC,EAAA,MAAM,MAAM,SAASe,IAAY;AAAA,MAAA;AAAA,IAEnD,GAEMC,KAAc,MAAM;AACxB,MAAIpB,EAAS,MAAM,YAAUY,EAAMrO,EAAY,OAAO;AAAA,IACxD,GAEM8O,IAAe,MAAM;AACzB,MACErB,EAAS,MAAM,YACflJ,EAAM,MAAM,gBAAgBvE,EAAY,WAExCwO,EAASxO,EAAY,KAAK;AAAA,IAC9B,GAEM+O,IAAwB,CAAC9F,MAAa;AAC1C,MAAIsD,MAA0B,OAC5BtD,EAAE,gBAAgB,GAClBA,EAAE,eAAe,IAEKsD,IAAA;AAAA,IAC1B,GAEMyC,KAA8B,CAAC,EAAE,OAAAvM,QAA+B;AAChE,MAACgL,EAAS,MAAM,iBACHwB,GAAA;AAAA,QACf,SAAS;AAAA,QACT,OAAAxM;AAAA,MAAA,CACD;AAAA,IACH,GAEMyM,KAA0B,CAACjG,MAAqB;AAChD,UAAA,CAACwE,EAAS,MAAM,cAAe;AACnC,YAAM0B,IAAa1O;AAAA,QACjBwI;AAAA,QACAwE,EAAS,MAAM;AAAA,QACfA,EAAS,MAAM;AAAA,MACjB;AACA,MAAK0B,KACYF,GAAA,EAAE,SAASE,GAA+B;AAAA,IAC7D,GAEMC,KAAwC,CAACnG,MAAkB;AAC3D,UAAA,CAACwE,EAAS,MAAM,UAAW;AAC/B,YAAM4B,IAASpG,EAAE;AACjB,MAAIoG,KAAA,QAAAA,EAAQ,UAAU,SAAS,eAC/B9B,EAAWtE,CAAC;AAAA,IACd,GAEMqG,KAAuC,CAACrG,MAAkB;AAC9D,UAAI,CAAC1E,EAAM,MAAM,YAAY,CAACkJ,EAAS,MAAM,UAAW;AACxD,YAAM4B,IAASpG,EAAE;AACjB,MAAIoG,KAAA,QAAAA,EAAQ,UAAU,SAAS,eAC/BpB,EAAUhF,CAAC;AAAA,IACb,GAEMsG,KAAoC,CAACtG,MAAkB;AACvD,MAACwE,EAAS,MAAM,aACpBC,EAASzE,CAAC;AAAA,IACZ,GAEMuG,KAA0C,CAACvG,MAAkB;AACjE,MAAI,CAAC1E,EAAM,MAAM,YAAY,CAACkJ,EAAS,MAAM,aAC7CC,EAASzE,CAAC;AAAA,IACZ,GAEMwG,KAAoC,MAAM;AAC1C,MAAChC,EAAS,MAAM,gBACRoB,GAAA;AAAA,IACd,GAEMa,KAA8B,MAAM;AACpC,MAACjC,EAAS,MAAM,gBACPqB,EAAA;AAAA,IACf,GAEMa,KAAiB,MAAM;AAC3B,MAAIlC,EAAS,MAAM,oBAAoBA,EAAS,MAAM,YACpDY,EAAMrO,EAAY,OAAO;AAAA,IAC7B,GACM4P,KAAkB,MAAM;AAE1B,MAAAnC,EAAS,MAAM,oBACfA,EAAS,MAAM,YACflJ,EAAM,MAAM,gBAAgBvE,EAAY,WAExCwO,EAASxO,EAAY,KAAK;AAAA,IAC9B,GAEM6P,KAAiB,CAAC,EAAE,OAAApN,QAA6B;AACpC,MAAAwM,GAAA;AAAA,QACf,SAAS;AAAA,QACT,OAAAxM;AAAA,MAAA,CACD;AAAA,IACH,GAEMqN,KAAwB,MAAM;AACjB,MAAAb,GAAA;AAAA,QACf,SAAS9O,EAAgB;AAAA,MAAA,CAC1B;AAAA,IACH,GAEM4P,KAAwB,MAAM;AACjB,MAAAd,GAAA;AAAA,QACf,SAAS9O,EAAgB;AAAA,MAAA,CAC1B;AAAA,IACH,GAEM8O,KAAmB,CACvBlO,GACAiP,IAAc,OACX;AACH,YAAMlP,IAAO;AAAA,QACX,GAAG2M,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,iBAAiBhD,EAAgB;AAAA,MACnC,GACMH,IAAwBP;AAAA,QAC5BC;AAAA,QACAC;AAAA,MACF;AACI,MAAuCK,KAA0B,QAErE4M;AAAA,QACE5M;AAAA,QACA4O,MAAgB,KAAO,KAAO;AAAA,MAChC;AAAA,IACF,GAEMhC,IAAoB,OAAOvL,GAAeuN,IAAc,OAAU;;AACtE,YAAM,EAAE,UAAAC,GAAU,OAAAC,EAAM,IAAIzC,EAAS,OAC/BjM,IAAyB+C,EAAM,MAAM,wBACrC4L,IAAStJ,GAAiB;AAAA,QAC9B,OAAApE;AAAA,QACA,GAAGgL,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,iBAAiBhD,EAAgB;AAAA,QACjC,UAASX,KAAAgN,EAAe,UAAf,gBAAAhN,GAAsB;AAAA,QAC/B,mBAAmB6M,EAAS,MAAM,qBAAqB,CAACuC;AAAA,MAAA,CAC1C;AAChB,UAAI,CAACG,EAAQ;AACP,YAAA,EAAE,cAAA/I,GAAc,mBAAAC,EAAA,IAAsB8I;AAC5C,MAAA3F;AAAA,QACE;AAAA,QACAhJ;AAAAA,QACA4F,EAAa;AAAA,MACf;AACM,YAAAgJ,MACJ5H,KAAApB,EAAa,mBAAb,gBAAAoB,GAA6B;AAAA,QAC3B,CAACkB,OAAkBnF,EAAM,MAAM,eAAe,QAAQmF,EAAK,IAAI;AAAA,YAC5D,CAAC;AAQR,MAPI0G,EAAa,UACf5F,EAAK,YAAY4F,CAAY,GAExB,OAAA,OAAO7L,EAAM,OAAO6C,CAAY,GACnC6I,KACAA,EAAoC,KAAKxN,CAAK,GAE7C4E,KACC,MAAA,IAAI,QAAc,CAACgJ,OAAY;AACnC,QAAApE,IAAuB,WAAW,MAAM;AACtC,gBAAM,EAAE,WAAAlF,IAAW,GAAGuJ,GAAA,IAAejJ;AACrC,WACEoG,EAAS,MAAM,kBACflJ,EAAM,MAAM,2BACV6C,EAAa,2BAER,OAAA,OAAO7C,EAAM,OAAO+L,EAAU,GAExBnE,EAAA;AAAA,YACb,WAAW,MAAM;AACT,cAAA5H,EAAA,MAAM,YAAYwC,MAAa;AAAA,YACtC,CAAA;AAAA,UACH,GACKyD,EAAA,eAAepD,EAAa,sBAAsB,GAChC6E,IAAA,MACfoE,GAAA;AAAA,WACPH,CAAK;AAAA,MAAA,CACT;AAAA,IACH,GAEMK,KAAc,CAACC,MAAkC;;AACrD,YAAMC,IAAelI,GAAe;AAAA,QAClC,GAAGkF,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,QAAQsJ,EAAc;AAAA,QACtB,UAASjN,IAAAgN,EAAe,UAAf,gBAAAhN,EAAsB;AAAA,QAC/B,QAAQ8P,GAAO;AAAA,MAAA,CAChB,GACK5P,IAAsB;AAAA,QAC1B,GAAG2M,EAAS;AAAA,QACZ,GAAGlJ;AAAA,QACH,GAAGkM;AAAA,QACH,UAASjI,IAAAoF,EAAe,UAAf,gBAAApF,EAAsB;AAAA,QAC/B,iBAAiBjH,EAAgB;AAAA,MACnC,GACM6E,IAAa1B,GAAa5D,CAAqB,GAC/C6P,IAAatL,GAAYvE,GAAuBsF,CAAU;AAChE,OAAIoK,KAAuBjP,EAAgB,UAAUT,EAAK,qBACxD2P,EAAa,aAAaE,IAErB,OAAA,OAAOpM,EAAM,OAAOkM,CAAY;AAAA,IACzC,GAEMG,KAAS,OACb7P,IAAuE;AAAA,MACrE,qBAAqB;AAAA,IAAA,MAEpB;AACH,MAAI,CAAC6M,EAAe,SAAS,CAACA,EAAe,MAAM,QAIjDH,EAAS,MAAM,mBAAmBrN,GAAe,UACjDW,EAAQ,kBAER,MAAM8P,GAAY,GAEpBN;AAAA,QACExP,EAAQ,uBACL0M,EAAS,MAAM,mBAAmBrN,GAAe,UAChDW,EAAQ;AAAA,MACd,GACIqI,EAAM,WACRoF,EAASxO,EAAY,MAAM,IAErBqO,EAAA;AAAA,IAEV,GAEMyC,KAAW,CAAC/P,MAGZ;AACJ,MAAAyL,KAAA,QAAAA,EAAiB,UACjBA,IAAkB7C,GAAS,MAAMiH,GAAO7P,CAAO,GAAG6K,EAAwB;AAAA,IAC5E,GAEMmF,KAAwB,MAC5BD,GAAS;AAAA,MACP,gBAAgB;AAAA,IAAA,CACjB,GAEGE,KAAoB,MAAM;AAC9B,MAAIvD,EAAS,MAAM,YAAUY,EAAMrO,EAAY,OAAO;AAAA,IACxD,GACMiR,KAAmB,MAAM;AAC7B,MACExD,EAAS,MAAM,YACflJ,EAAM,MAAM,gBAAgBvE,EAAY,WAExCwO,EAASxO,EAAY,IAAI;AAAA,IAC7B,GAEMkR,KAAsB,MAAM;AAChC,YAAMvI,IAAoB,CAAC,GACrB7H,IAAO,EAAE,GAAG2M,EAAS,OAAO,GAAGlJ,EAAM,MAAM,GAC3C4M,IAAkBtL,GAAmB;AAAA,QACzC,GAAG/E;AAAA,QACH,iBAAiBS,EAAgB;AAAA,MAAA,CAClC,GACK6P,IAAiBxL,EAAkB;AAAA,QACvC,GAAG9E;AAAA,QACH,iBAAiBS,EAAgB;AAAA,MAAA,CAClC;AAEK,eAAAkB,IAAQ8B,EAAM,MAAM,wBACxB9B,IAAQlB,EAAgB,QAAQ4P,GAChC1O;AAEA,YAAI8B,EAAM,MAAM,eAAe,QAAQ9B,CAAK,IAAI,GAAG;AACjD,UAAAkG,EAAkB,KAAKlG,CAAK;AAC5B;AAAA,QAAA;AAIE,eAAAA,IAAQ8B,EAAM,MAAM,yBAAyB,GACjD9B,KAAS,CAAC2O,GACV3O;AAEA,YAAI8B,EAAM,MAAM,eAAe,QAAQ9B,CAAK,IAAI,GAAG;AACjD,UAAAkG,EAAkB,KAAKlG,CAAK;AAC5B;AAAA,QAAA;AAGA,MAAAkG,EAAkB,SAAS,KAC7BpE,EAAM,MAAM,iBACVA,EAAM,MAAM,eAAe,OAAOoE,CAAiB,GACrD6B,EAAK,YAAY7B,CAAiB,KAE9BuD,MACF,cAAcA,CAAa,GACXA,IAAA;AAAA,IAGtB,GAEMmF,KAAkB,MAAM;;AACtB,YAAAC,KAAS1Q,IAAAiN,EAAc,UAAd,gBAAAjN,EAAqB;AAAA,QAClC;AAAA,SAEI2Q,KAAcD,KAAA,gBAAAA,EAAQ,WAAU;AACtC,UAAIE,IAAc;AACV,MAAAF,KAAA,QAAAA,EAAA,QAAQ,CAACG,MAAU;AACzB,cAAMzI,IAAU,MAAM;AAChB,UAAA,EAAEwI,KAAeD,KACVT,GAAA;AAAA,QAEb;AACI,YAAA,CAACW,EAAM;AACT,UAAAA,EAAM,UAAU,MAAM;;AAClB,aAAA7Q,IAAA6Q,EAAM,QAAQ,sBAAsB,MAApC,QAAA7Q,EAAuD;AAAA,UAC3D;AAAA,aACK;AACL,gBAAM8Q,IAAmBD,EAAM,QAAQ,KAAKA,CAAK;AAC3C,UAAAA,EAAA,UAAU,CAACxI,MAAM;;AACrB,YAAAyI,EAAiBzI,CAAC,IAChBrI,IAAA6Q,EAAM,QAAQ,sBAAsB,MAApC,QAAA7Q,EAAuD;AAAA,UAC3D;AAAA,QAAA;AAEE,YAAC6Q,EAAM;AAOT,UAAAA,EAAM,SAASzI,GACfyI,EAAM,UAAU,MAAM;AACZ,YAAAzI,EAAA,GACRwB,EAAK,eAAe;AAAA,UACtB;AAAA,aAXiB;AACb,cAAA,CAACiD,EAAS,MAAM,SAAU;AAC9B,UAAAgE,EAAM,SAAS,MAAM;AACP,YAAA/C,EAAA,GACZvC,EAAe,KAAK,WAAW2E,IAAUrD,EAAS,MAAM,KAAK,CAAC;AAAA,UAChE;AAAA,QAAA;AAAA,MAOF;AAAA,IAEJ,GAEMoD,KAAc,aAClBtM,EAAM,MAAM,iBAAiB,IACtB,IAAI;AAAA,MAAc,CAAC8L,MACxB,WAAW,MAAM;;AACR,eAAA,OAAOsB,GAAoB,OAAO;AAAA,UACvC,OAAO,IAAG/Q,IAAAgR,GAAkB,UAAlB,gBAAAhR,EAAyB,WAAW;AAAA,QAAA,CAC/C,GACD2D,EAAM,MAAM,iBAAiB,IACrB8L,EAAA;AAAA,MACT,CAAA;AAAA,IACH,IAGIwB,KAAU,MAAM;AACpB,YAAM/Q,IAAO;AAAA,QACX,GAAG2M,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,iBAAiBhD,EAAgB;AAAA,MACnC,GACMuQ,IAAYlM,EAAkB9E,CAAI,GAClCiR,IAAalM,GAAmB/E,CAAI;AACtC,UAAA2M,EAAS,MAAM,eAAe;AAChC,YAAInI,IAAa,IACf0M,IAAY,CAAC;AACf,cAAMC,IAA2B,CAAC;AACnB,QAAAC,GAAA,MAAM,QAAQ,CAAC7G,MAAe;AAC3C,cAAI8G,IAAW;AACJ,UAAA9G,EAAA,QAAQ,CAAC+G,OAAU;;AAC5B,kBAAM,EAAE,OAAAC,GAAM,MAAIzR,KAAAwR,GAAM,UAAN,gBAAAxR,GAAa,UAAS,CAAC;AACzC,YAAIyR,OAAOF,IAAW,KAAK,IAAIA,GAAUE,EAAK;AAAA,UAAA,CAC/C,GACDJ,EAAe,KAAKE,CAAQ,GAC5B7M,EAAW,KAAK6M,CAAQ;AAAA,QAAA,CACzB;AACD,iBAAS1G,IAAI,GAAGA,IAAIqG,GAAWrG;AAC7B,UAAAuG,EAAU,KAAKC,EAAeA,EAAe,SAAS,IAAIxG,CAAC,CAAC,GAC5DnG,EAAW,KAAK2M,EAAeA,EAAe,SAAS,IAAIxG,CAAC,CAAC;AAE/D,iBAASA,IAAI,GAAGA,IAAIsG,GAAYtG;AACnB,UAAAnG,EAAA,KAAK2M,EAAexG,CAAC,CAAC;AAEnC,iBAASA,IAAI,GAAGA,IAAIlH,EAAM,MAAM,wBAAwBkH;AAC5C,UAAAuG,EAAA,KAAKC,EAAexG,CAAC,CAAC;AAElC,QAAAnG,IAAaA,EAAW,OAAO,CAACgN,MAAMA,CAAC,GACvCN,IAAYA,EAAU,OAAO,CAACM,MAAMA,CAAC;AACrC,cAAM3B,IAAa;AAAA,UACjB,OAAO,QAAQrL,EAAW,KAAK,KAAK,CAAC;AAAA,UACrC,MAAM,QAAQ0M,EAAU,IAAI,CAACM,MAAM,IAAIA,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC;AAAA,QACzD;AACI,YAAA7E,EAAS,MAAM,YAAY;AAC7B,gBAAM8E,IAAeN,EAAe1N,EAAM,MAAM,sBAAsB;AACtE,UAAAoM,EAAW,OAAO,QAAQqB,EACvB,IAAI,CAACM,MAAM,IAAIA,CAAC,EAAE,EAClB,KAAK,KAAK,CAAC,cAAcC,CAAY;AAAA,QAAA;AAE1C,QAAAhO,EAAM,MAAM,aAAaoM;AAAA,MAAA,OACpB;AACC,cAAA6B,IAAmBV,IAAYC,IAAaxQ,EAAgB,OAC5D+D,IAAc,MAAMmI,EAAS,MAAM,eAAgB+E,GACnDzM,IAAkB,MAAMyM;AAC9B,YAAIR,IACD,CAACjM,KACC+L,IAAYvN,EAAM,MAAM,0BACzBe,IACF;AACE,QAAAmI,EAAS,MAAM,eACHuE,MAAA,MAAOjM,IAAkBT,IAAc,OAAO,IAExDf,EAAA,MAAM,kBAAkBwB,IAAkB,KAChDxB,EAAM,MAAM,aAAa;AAAA,UACvB,OAAOe,IAAa;AAAA,UACpB,MAAM0M,IAAY;AAAA,QACpB;AAAA,MAAA;AAAA,IAEJ,GAEM3P,KAAagK,EAAY,GAEzBuF,KAAoBvF,EAAiB,GACrCsF,KAAsBtF,EAAI,EAAE,GAC5BwB,IAAgBxB,EAAiB,GACjCuB,IAAiBvB,EAAsC,GAEvDoB,IAAW9C,EAAgB,MAAM;AAC/B,YAAA8H,IAAetJ,GAAgBC,CAAK;AAC1C,UAAIqE,IAAW,EAAE,GAAGvD,IAAmB,GAAGuI,EAAa;AACvD,UAAIpQ,GAAW,OAAO;AACd,cAAAqQ,IAAWtJ,EAAM,WAAW;AAAA,UAChC,CAAC8D,MAASA,EAAK,eAAe7K,GAAW;AAAA,QAC3C;AACAoL,QAAAA,IAAW;AAAA,UACT,GAAGA;AAAAA,UACH,GAAGiF,KAAA,gBAAAA,EAAU;AAAA,QACf;AAAA,MAAA;AAGF,aAAIjF,EAAS,eACPA,EAAS,iBAAiB,KAAK,QAAQ,IAAI,aAAa,gBAElD,QAAA;AAAA,QACN,oEAAoEA,EAAS,cAAc;AAAA,MAC7F,GAEFA,EAAS,iBAAiB,IAGxBA,EAAS,SACPA,EAAS,eAAe,KAAK,QAAQ,IAAI,aAAa,gBAEhD,QAAA;AAAA,QACN,4DAA4DA,EAAS,YAAY;AAAA,MACnF,GAEEA,EAAS,iBAAiB,KAAK,QAAQ,IAAI,aAAa,gBAElD,QAAA;AAAA,QACN,8DAA8DA,EAAS,cAAc;AAAA,MACvF,GAEFA,EAAS,eAAe,GACxBA,EAAS,iBAAiB,IAGxBA,EAAS,iBAAiB,MACxBA,EAAS,iBAAiB,QAAQ,IAAI,aAAa,gBAErD,QAAQ,KAAK,4DAA4D,GAE3EA,EAAS,gBAAgB,KAGvBA,EAAS,YAAYA,EAAS,QAC5B,QAAQ,IAAI,aAAa,gBAE3B,QAAQ,KAAK,2CAA2C,GAE1DA,EAAS,MAAM,KAGVA;AAAAA,IAAA,CACR,GAEK/G,KAAYiE;AAAA,MAAS,MACzBgI,GAAe;AAAA,QACb,GAAGlF,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,iBAAiBhD,EAAgB;AAAA,MAClC,CAAA;AAAA,IACH,GAEMoF,KAAYgE;AAAA,MAAS,MACzBiI,GAAe;AAAA,QACb,GAAGnF,EAAS;AAAA,QACZ,GAAGlJ,EAAM;AAAA,QACT,iBAAiBhD,EAAgB;AAAA,MAClC,CAAA;AAAA,IACH,GAEMsR,KAAYlI,EAAS,MAAM;AAC3B,UAAA8C,EAAS,MAAM;AACjB,eAAO,KAAK,KAAKlM,EAAgB,QAAQkM,EAAS,MAAM,cAAc;AAExE,UAAIoF,IACF,KAAK;AAAA,SACFtR,EAAgB,QAAQkM,EAAS,MAAM,gBACtCA,EAAS,MAAM;AAAA,MAAA,IACf;AAEJ,aAAA,CAACA,EAAS,MAAM,YAChBA,EAAS,MAAM,eAAe,KAC9BA,EAAS,MAAM,cAEfoF,KAEKA,IAAY,IAAI,IAAIA;AAAAA,IAAA,CAC5B,GAEKnC,KAASrE,EAAaR,EAAM,UAAUxL,GAAcwL,EAAM,SAAS,IAAI,EAAE,GAEzEtH,IAAQ8H,EAAI;AAAA,MAChB,GAAGlC,GAAuB;AAAA,MAC1B,wBAAwBsD,EAAS,MAAM;AAAA,IAAA,CACxC,GAEKjM,KAAyBmJ;AAAA,MAC7B,MAAMpG,EAAM,MAAM;AAAA,IACpB,GAEMuO,KAAsBnI,EAAS,MAAM8C,EAAS,MAAM,YAAY,GAEhElM,IAAkBoJ;AAAA,MAAS,MAC/BtC,GAAmBqI,GAAO,MAAM,QAAQjD,EAAS,MAAM,cAAc;AAAA,IACvE,GAEMyE,KAAiBvH,EAAoB,MAAM;AAC/C,YAAMzH,IAAyB,CAAC,GAC1B6P,IAAiBtF,EAAS,MAAM,gBAChCuF,IAAmBzR,EAAgB;AACzC,eAASkK,IAAI,GAAGA,IAAIuH,GAAkBvH,KAAK;AACzC,cAAMvG,IAAauG,IAAIsH,GACjB5N,IAAWD,IAAa6N;AAC9B,QAAA7P,EAAY,KAAKwN,GAAO,MAAM,MAAMxL,GAAYC,CAAQ,CAAC;AAAA,MAAA;AAEpD,aAAAjC;AAAA,IAAA,CACR;AAED,WAAA+P;AAAA,MACE,MAAM7J,EAAM;AAAA,MACZ,MAAM;AACa,QAAA2D,EAAA,GACDC,EAAA;AAAA,MAClB;AAAA,MACA,EAAE,MAAM,GAAK;AAAA,IACf,GAEAiG;AAAA,MACExF;AAAA,MACA,CAACyF,GAAoBC,MAAuB;AAC1C,YAAI3C,IAAsB;AAC1B,mBAAWnH,KAAO,OAAO,KAAKoE,EAAS,KAAK,GAAG;AAC7C,cAAI,CAACyF,EAAY,eAAe7J,CAAG,GAAG;AACd,YAAAmH,IAAA;AACtB;AAAA,UAAA;AAGA,cAAA,SAAO0C,EAAY7J,CAA+B,KAAM,YACxD,OAAO6J,EAAY7J,CAA+B,KAAM,eAKxD6J,EAAY7J,CAA+B,MAC3C8J,EAAY9J,CAA+B,GAC3C;AACsB,YAAAmH,IAAA;AACtB;AAAA,UAAA;AAAA,QACF;AAEF,QAAAD,GAAYC,CAAmB,GAC3BjM,EAAM,MAAM,0BAA0BhD,EAAgB,SACvC0N,GAAA;AAAA,UACf,SAAS;AAAA,UACT,OAAO1N,EAAgB,QAAQ2R,EAAY;AAAA,QAAA,CAC5C,GAECA,EAAY,WACd1E,EAASxO,EAAY,MAAM,IAE3BqO,EAAMrO,EAAY,MAAM;AAAA,MAE5B;AAAA,MACA;AAAA,QACE,MAAM;AAAA,MAAA;AAAA,IAEV,GAEAiT;AAAA,MACE;;AAAM,iBAAArS,IAAAiL,EAAM,YAAN,gBAAAjL,EAAA,KAAAiL,OAAqB,CAAC;AAAA;AAAA,MAC5B,CAACuH,MAAa;AACL,QAAA1C,GAAA,QAAQrQ,GAAc+S,CAAQ;AAAA,MAAA;AAAA,IAEzC,GAEAH;AAAA,MACE,MAAM;AAAA,QACJ1O,EAAM,MAAM;AAAA,QACZkJ,EAAS,MAAM;AAAA,QACfA,EAAS,MAAM;AAAA,QACfA,EAAS,MAAM;AAAA,MACjB;AAAA,MACA,CAAC,CAACxJ,GAAYlC,GAAYC,GAAemE,CAAQ,MAAM;AACrD,YAAIkN,IAAsB;AAAA,UACxB,QAAQ;AAAA,QACV;AACA,QAAIlN,MACoBkN,IAAA;AAAA,UACpB,QAAQ,GAAGpP,CAAU;AAAA,QACvB;AAGE,YAAAqP;AACJ,QAAKvR,IAIMoE,IACYmN,IAAA;AAAA,UACnB,SAAStR,IAAgB;AAAA,QAC3B,IAEqBsR,IAAA;AAAA,UACnB,SAAS,SAAStR;AAAA,QACpB,IAVqBsR,IAAA;AAAA,UACnB,SAAS;AAAA,QACX,GAUFlH,EAAgB,QAAQ;AAAA,UACtB,GAAGA,EAAgB;AAAA,UACnB,GAAGjD,GAAgBkK,CAAmB;AAAA,UACtC,GAAGC;AAAA,QACL;AAAA,MAAA;AAAA,IAEJ,GAEAL;AAAA,MACE,MAAM;AAAA,QACJxF,EAAS,MAAM;AAAA,QACflJ,EAAM,MAAM;AAAA,QACZkJ,EAAS,MAAM;AAAA,QACflM,EAAgB;AAAA,MAClB;AAAA,MACA,CAAC,CAACG,GAAU6R,GAAaC,GAAajS,CAAe,MAAM;AAEvD,QAAAG,KACC6R,KACEhS,IAA8BiS,IAAyB,KAG1CxF,EAAA6E,GAAU,QAAQ,CAAC;AAAA,MAAA;AAAA,IAEzC,GAEAI;AAAA,MACE,MAAM1O,EAAM,MAAM;AAAA,MAClB,CAACT,MAAa;AACR,QAAC+J,EAAc,UACf/J,KACF+J,EAAc,MAAM,cAAcyB,IAClCzB,EAAc,MAAM;AAAA,UAClB;AAAA,UACAyB;AAAA,UACA,EAAE,SAAS,GAAM;AAAA,QACnB,GACAzB,EAAc,MAAM,YAAY0B,IAChC1B,EAAc,MAAM,aAAa0B,IACjC1B,EAAc,MAAM,eAAe2B,IACnC3B,EAAc,MAAM,gBAClB2B,OAEF3B,EAAc,MAAM,cAAc,MAClCA,EAAc,MAAM;AAAA,UAClB;AAAA,UACAyB;AAAA,QACF,GACAzB,EAAc,MAAM,YAAY,MAChCA,EAAc,MAAM,aAAa,MACjCA,EAAc,MAAM,eAAe,MACnCA,EAAc,MAAM,gBAAgB;AAAA,MACtC;AAAA,IAEJ,GAEAoF;AAAA,MACE,MAAMJ,GAAU,SAAStO,EAAM,MAAM;AAAA,MACrC,CAAC+N,MAAM;AACL,QAAIA,MACF/N,EAAM,MAAM,yBAAyB;AAAA,MACvC;AAAA,IAEJ,GAEakP,EAAA;AAAA,MACX,MAAMzF;AAAA,MACN,MAAM,MAAM;AACV,QAAAA;AAAA,UACEzJ,EAAM,MAAM,yBAAyBkJ,EAAS,MAAM;AAAA,QACtD;AAAA,MACF;AAAA,MACA,MAAM,MAAM;AACV,QAAAO;AAAA,UACEzJ,EAAM,MAAM,yBAAyBkJ,EAAS,MAAM;AAAA,QACtD;AAAA,MACF;AAAA,MAAA,WACA9G;AAAAA,MAAA,WACAD;AAAAA,MACA,MAAAyH;AAAA,MACA,OAAAE;AAAA,MACA,UAAAG;AAAA,MACA,iBAAAjN;AAAA,MACA,wBAAAC;AAAA,MACA,qBAAAsR;AAAA,MACA,WAAAD;AAAA,IAAA,CACD,GAEDa,GAAU,YAAY;;AACb,aAAA,iBAAiB,UAAU3C,EAAqB,GACnDtD,EAAS,MAAM,mBAAmBrN,GAAe,UACnD,MAAMyQ,GAAY,GAEpBN,GAAY,EAAI,GACJ7B,EAAA,GACRjB,EAAS,MAAM,YACjBe,EAASxO,EAAY,MAAM,GAEzByN,EAAS,MAAM,aAAaxN,GAAa,gBAC3BiM,IAAA,YAAYgF,IAAqB,GAAI,IAElDzE,IAAA,IAAI,eAAe,MAAM;AACxB,QAAAlI,EAAM,MAAM,aACLuM,GAAA,EAAE,qBAAqB,IAAO,GACxB3E,EAAA,KAAK,WAAW,MAAM2E,MAAYrD,EAAS,MAAM,KAAK,CAAC,KAE7DqD,GAAA;AAAA,MACX,CACD,GACErE,EAAA,QAAQoB,EAAc,KAAgB,IACzCjN,IAAAiN,EAAc,UAAd,QAAAjN,EACI,iBAA8B,wBAC/B,QAAQ,CAACyK,MAAe;AACvB,QAAAA,EAAW,UAAUoC,EAAS,MAAM,eAChCuD,KACA,MACJ3F,EAAW,SAASoC,EAAS,MAAM,eAAewD,KAAmB;AAAA,MAAA;AAAA,IACtE,CACJ,GAED0C,GAAU,MAAM;AAGV,UAFYtC,GAAA,GAChB7G,EAAK,QAAQ,GACTiD,EAAS,MAAM,UAAU;AAC3B,cAAM9E,IAAoB3D,GAA2B;AAAA,UACnD,GAAGyI,EAAS;AAAA,UACZ,GAAGlJ,EAAM;AAAA,QAAA,CACV;AACD,QAAIoE,EAAkB,WACpBpE,EAAM,MAAM,iBACVA,EAAM,MAAM,eAAe,OAAOoE,CAAiB,GACrD6B,EAAK,YAAY7B,CAAiB;AAAA,MACpC;AAEU,MAAA+F,EAAA;AAAA,IAAA,CACb,GAEDkF,GAAgB,MAAM;AACb,aAAA,oBAAoB,UAAU7C,EAAqB,GACtDtE,KAAA,QAAAA,EAAA,UAAUoB,EAAc,QACxB5B,KACF,aAAaA,CAAoB,GAE/BC,KACF,cAAcA,CAAa,GAEzBC,EAAe,WACjBA,EAAe,QAAQ,CAAC0H,MAAU,aAAaA,CAAK,CAAC,GACrD1H,IAAiB,CAAC,IAEhB5H,EAAM,MAAM,iBACA,cAAAA,EAAM,MAAM,aAAa;AAAA,IACzC,CACD,GAEeyI,EAAA,GACR6E,GAAA,GACRrH,EAAK,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}