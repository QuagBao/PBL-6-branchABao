{"version":3,"file":"index.umd.js","sources":["../lib/types/enums.ts","../lib/utils/carousel-utils.ts","../lib/utils/match-media.ts","../lib/utils/index.ts","../lib/components/props.ts","../lib/components/VSlickArrow.vue","../lib/components/VSlickTrack.vue","../lib/components/VSlickDots.vue","../lib/components/VSlickCarousel.vue"],"sourcesContent":["export enum PlayingType {\n  play = 'play',\n  playing = 'playing',\n  paused = 'paused',\n  hovered = 'hovered',\n  focused = 'focused',\n  update = 'update',\n  leave = 'leave',\n  blur = 'blur'\n}\n\nexport enum LazyLoadType {\n  ondemand = 'ondemand',\n  progressive = 'progressive'\n}\n\nexport enum SwipeDirection {\n  left = 'left',\n  right = 'right',\n  up = 'up',\n  down = 'down',\n  vertical = 'vertical'\n}\n\nexport enum SlideNavigation {\n  next = 'next',\n  previous = 'previous'\n}\n\nexport enum WidthDetection {\n  auto = 'auto',\n  manual = 'manual'\n}\n","import { VNode } from 'vue'\r\nimport {\r\n  CloneInfoSpec,\r\n  GoNextSpec,\r\n  GoPrevSpec,\r\n  LazyInfoSpec,\r\n  NavigableSpec,\r\n  OnSlideSpec,\r\n  PlayingType,\r\n  SlideGroupChangeOptions,\r\n  SlideGroupChangeSpec,\r\n  SlideGroupCountSpec,\r\n  SlideNavigation,\r\n  SliderState,\r\n  SliderStateInfoSpec,\r\n  SwipeDirection,\r\n  SwipeEndSpec,\r\n  SwipeEndState,\r\n  SwipeEvent,\r\n  SwipeMoveSpec,\r\n  SwipeMoveState,\r\n  TouchObject,\r\n  TrackInfoSpec\r\n} from '../types'\r\nimport { MarkRequiredWithPartialBase } from '@lib/types/helpers'\r\n\r\nexport const extractSlides = (vnodes: VNode[]): VNode[] => {\r\n  return vnodes.flatMap((vnode) =>\r\n    isSlide(vnode)\r\n      ? [vnode]\r\n      : Array.isArray(vnode.children) && vnode.children.length > 0\r\n        ? extractSlides(vnode.children as VNode[])\r\n        : []\r\n  )\r\n}\r\n\r\nfunction isSlide(vnode: VNode): boolean {\r\n  return !vnode.type.toString().startsWith('Symbol')\r\n}\r\n\r\nexport const getNavigationOnKeyType = (\r\n  e: KeyboardEvent,\r\n  accessibility: boolean,\r\n  rtl: boolean\r\n) => {\r\n  if (\r\n    (e.target as HTMLElement)?.tagName.match('TEXTAREA|INPUT|SELECT') ||\r\n    !accessibility\r\n  )\r\n    return ''\r\n  if (e.key === 'ArrowLeft')\r\n    return rtl ? SlideNavigation.next : SlideNavigation.previous\r\n  if (e.key === 'ArrowRight')\r\n    return rtl ? SlideNavigation.previous : SlideNavigation.next\r\n  return ''\r\n}\r\n\r\nexport const getChangedSlideGroupIndex = (\r\n  spec: SlideGroupChangeSpec,\r\n  options: SlideGroupChangeOptions\r\n) => {\r\n  let indexOffset,\r\n    previousInt,\r\n    slideGroupOffset,\r\n    unevenOffset,\r\n    targetSlideGroupIndex\r\n  const {\r\n    groupsToScroll,\r\n    groupsToShow,\r\n    slideGroupCount,\r\n    currentSlideGroupIndex,\r\n    lazyLoad,\r\n    infinite\r\n  } = spec\r\n  unevenOffset = slideGroupCount % groupsToScroll !== 0\r\n  indexOffset = unevenOffset\r\n    ? 0\r\n    : (slideGroupCount - currentSlideGroupIndex) % groupsToScroll\r\n\r\n  if (options.message === SlideNavigation.previous) {\r\n    slideGroupOffset =\r\n      indexOffset === 0 ? groupsToScroll : groupsToShow - indexOffset\r\n    targetSlideGroupIndex = currentSlideGroupIndex - slideGroupOffset\r\n    if (lazyLoad && !infinite) {\r\n      previousInt = currentSlideGroupIndex - slideGroupOffset\r\n      targetSlideGroupIndex =\r\n        previousInt === -1 ? slideGroupCount - 1 : previousInt\r\n    }\r\n  } else if (options.message === SlideNavigation.next) {\r\n    slideGroupOffset = indexOffset === 0 ? groupsToScroll : indexOffset\r\n    targetSlideGroupIndex = currentSlideGroupIndex + slideGroupOffset\r\n    if (lazyLoad && !infinite) {\r\n      targetSlideGroupIndex =\r\n        ((currentSlideGroupIndex + groupsToScroll) % slideGroupCount) +\r\n        indexOffset\r\n    }\r\n  } else if (options.message === 'dots') {\r\n    // Click on dots\r\n    targetSlideGroupIndex = (options.index || 0) * groupsToScroll\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n  } else if (options.message === 'children') {\r\n    // Click on the slides\r\n    targetSlideGroupIndex = options.index || 0\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n    if (infinite) {\r\n      let direction = siblingDirection({ ...spec, targetSlideGroupIndex })\r\n      if (\r\n        targetSlideGroupIndex > currentSlideGroupIndex &&\r\n        direction === 'left'\r\n      ) {\r\n        targetSlideGroupIndex = targetSlideGroupIndex - slideGroupCount\r\n      } else if (\r\n        targetSlideGroupIndex < currentSlideGroupIndex &&\r\n        direction === 'right'\r\n      ) {\r\n        targetSlideGroupIndex = targetSlideGroupIndex + slideGroupCount\r\n      }\r\n    }\r\n  } else if (options.message === 'index') {\r\n    targetSlideGroupIndex = Number(options.index)\r\n    if (targetSlideGroupIndex === currentSlideGroupIndex) {\r\n      return null\r\n    }\r\n  }\r\n  return targetSlideGroupIndex\r\n}\r\n\r\nexport const siblingDirection = (\r\n  spec: SlideGroupChangeSpec & { targetSlideGroupIndex: number }\r\n) => {\r\n  if (spec.targetSlideGroupIndex > spec.currentSlideGroupIndex) {\r\n    if (\r\n      spec.targetSlideGroupIndex >\r\n      spec.currentSlideGroupIndex + totalVisibleGroupsOnRightOfCurrGroup(spec)\r\n    ) {\r\n      return 'left'\r\n    }\r\n    return 'right'\r\n  } else {\r\n    if (\r\n      spec.targetSlideGroupIndex <\r\n      spec.currentSlideGroupIndex - totalVisibleGroupsOnLeftOfCurrGroup(spec)\r\n    ) {\r\n      return 'right'\r\n    }\r\n    return 'left'\r\n  }\r\n}\r\n\r\nconst totalVisibleGroupsOnRightOfCurrGroup = ({\r\n  groupsToShow,\r\n  centerMode,\r\n  rtl,\r\n  centerPadding\r\n}: SlideGroupChangeSpec) => {\r\n  if (centerMode) {\r\n    let right = (groupsToShow - 1) / 2 + 1\r\n    if (parseInt(centerPadding) > 0) right += 1\r\n    if (rtl && groupsToShow % 2 === 0) right += 1\r\n    return right\r\n  }\r\n  if (rtl) {\r\n    return 0\r\n  }\r\n  return groupsToShow - 1\r\n}\r\n\r\nconst totalVisibleGroupsOnLeftOfCurrGroup = ({\r\n  groupsToShow,\r\n  centerMode,\r\n  rtl,\r\n  centerPadding\r\n}: SlideGroupChangeSpec) => {\r\n  if (centerMode) {\r\n    let left = (groupsToShow - 1) / 2 + 1\r\n    if (parseInt(centerPadding) > 0) left += 1\r\n    if (!rtl && groupsToShow % 2 === 0) left += 1\r\n    return left\r\n  }\r\n  if (rtl) {\r\n    return groupsToShow - 1\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getNavigableIndexes = (spec: NavigableSpec) => {\r\n  let max = spec.infinite ? spec.slideGroupCount * 2 : spec.slideGroupCount\r\n  let breakpoint = spec.infinite ? spec.groupsToShow * -1 : 0\r\n  let counter = spec.infinite ? spec.groupsToShow * -1 : 0\r\n  let indexes = []\r\n  while (breakpoint < max) {\r\n    indexes.push(breakpoint)\r\n    breakpoint = counter + spec.groupsToScroll\r\n    counter += Math.min(spec.groupsToScroll, spec.groupsToShow)\r\n  }\r\n  return indexes\r\n}\r\n\r\nexport const checkNavigable = (spec: NavigableSpec, index: number) => {\r\n  const navigables = getNavigableIndexes(spec)\r\n  let prevNavigable = 0\r\n  if (index > navigables[navigables.length - 1]) {\r\n    index = navigables[navigables.length - 1]\r\n  } else {\r\n    for (let n in navigables) {\r\n      if (index < navigables[n]) {\r\n        index = prevNavigable\r\n        break\r\n      }\r\n      prevNavigable = navigables[n]\r\n    }\r\n  }\r\n  return index\r\n}\r\n\r\nexport const getSwipeStartState = (\r\n  e: SwipeEvent,\r\n  swipe: boolean,\r\n  draggable: boolean\r\n) => {\r\n  if (!swipe || (!draggable && e.type.indexOf('mouse') !== -1)) return\r\n  return {\r\n    dragging: true,\r\n    touchObject: {\r\n      startX:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageX\r\n          : (e as MouseEvent).clientX,\r\n      startY:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageY\r\n          : (e as MouseEvent).clientY,\r\n      curX:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageX\r\n          : (e as MouseEvent).clientX,\r\n      curY:\r\n        window.TouchEvent && e instanceof TouchEvent\r\n          ? e.touches[0].pageY\r\n          : (e as MouseEvent).clientY\r\n    }\r\n  }\r\n}\r\n\r\nexport const getTraversedSlideGroupCount = (spec: SlideGroupCountSpec) => {\r\n  const centerOffset = spec.centerMode\r\n    ? +spec.slideGroupWidth * Math.floor(spec.groupsToShow / 2)\r\n    : 0\r\n  let swipedSlideGroup\r\n  const slickList = spec.listEl\r\n  const slideGroups = slickList.querySelectorAll<HTMLElement>(\r\n    '.v-slick-slide-group'\r\n  )\r\n  Array.from(slideGroups).every((grp) => {\r\n    if (!spec.vertical) {\r\n      if (\r\n        grp.offsetLeft - centerOffset + grp.offsetWidth / 2 >\r\n        spec.swipeLeft * -1\r\n      ) {\r\n        swipedSlideGroup = grp\r\n        return false\r\n      }\r\n    } else {\r\n      if (grp.offsetTop + grp.offsetHeight / 2 > spec.swipeLeft * -1) {\r\n        swipedSlideGroup = grp\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  })\r\n\r\n  if (!swipedSlideGroup) {\r\n    return 0\r\n  }\r\n  const currentIndex =\r\n    spec.rtl === true\r\n      ? spec.slideGroupCount - spec.currentSlideGroupIndex\r\n      : spec.currentSlideGroupIndex\r\n  const swipedSlideGroupIndex = (swipedSlideGroup as HTMLElement)?.dataset\r\n    ?.index\r\n  const groupsTraversed = Math.abs(\r\n    swipedSlideGroupIndex ? parseInt(swipedSlideGroupIndex) : 0 - currentIndex\r\n  )\r\n  return groupsTraversed\r\n}\r\n\r\nexport const getSwipeDirection = (\r\n  touchObject: TouchObject,\r\n  verticalSwiping = false\r\n): SwipeDirection => {\r\n  let xDist, yDist, r, swipeAngle\r\n  xDist = touchObject.startX - touchObject.curX\r\n  yDist = touchObject.startY - touchObject.curY\r\n  r = Math.atan2(yDist, xDist)\r\n  swipeAngle = Math.round((r * 180) / Math.PI)\r\n  if (swipeAngle < 0) {\r\n    swipeAngle = 360 - Math.abs(swipeAngle)\r\n  }\r\n  if (\r\n    (swipeAngle <= 45 && swipeAngle >= 0) ||\r\n    (swipeAngle <= 360 && swipeAngle >= 315)\r\n  ) {\r\n    return SwipeDirection.left\r\n  }\r\n  if (swipeAngle >= 135 && swipeAngle <= 225) {\r\n    return SwipeDirection.right\r\n  }\r\n  if (verticalSwiping === true) {\r\n    if (swipeAngle >= 35 && swipeAngle <= 135) {\r\n      return SwipeDirection.up\r\n    } else {\r\n      return SwipeDirection.down\r\n    }\r\n  }\r\n\r\n  return SwipeDirection.vertical\r\n}\r\n\r\nexport const getSwipeEndState = (\r\n  e: SwipeEvent,\r\n  spec: SwipeEndSpec\r\n): SwipeEndState | undefined => {\r\n  const {\r\n    dragging,\r\n    swipe,\r\n    touchObject,\r\n    listWidth,\r\n    touchThreshold,\r\n    verticalSwiping,\r\n    listHeight,\r\n    currentSlideGroupIndex,\r\n    swipeToSlide,\r\n    scrolling,\r\n    onSwipe,\r\n    rtl\r\n  } = spec\r\n  if (!dragging) {\r\n    if (swipe) e.preventDefault()\r\n    return\r\n  }\r\n  let minSwipe = verticalSwiping\r\n    ? listHeight / touchThreshold\r\n    : listWidth / touchThreshold\r\n  let swipeDirection = getSwipeDirection(touchObject, verticalSwiping)\r\n  if (rtl) {\r\n    if (swipeDirection === SwipeDirection.left) {\r\n      swipeDirection = SwipeDirection.right\r\n    } else if (swipeDirection === SwipeDirection.right) {\r\n      swipeDirection = SwipeDirection.left\r\n    }\r\n  }\r\n  // reset the state of touch related state variables.\r\n  let state: SwipeEndState = {\r\n    dragging: false,\r\n    edgeDragged: false,\r\n    scrolling: false,\r\n    swiping: false,\r\n    swiped: false,\r\n    swipeLeft: null,\r\n    touchObject: {}\r\n  }\r\n  if (scrolling) {\r\n    return state\r\n  }\r\n  if (!touchObject.swipeLength) {\r\n    return state\r\n  }\r\n  if (touchObject.swipeLength > minSwipe) {\r\n    e.preventDefault()\r\n    if (onSwipe) {\r\n      onSwipe(swipeDirection)\r\n    }\r\n    let slideGroupCount, newSlideGroupIndex\r\n    switch (swipeDirection) {\r\n      case 'left':\r\n      case 'up':\r\n        newSlideGroupIndex = spec.swipeToSlide\r\n          ? getTraversedSlideGroupCount(spec)\r\n          : currentSlideGroupIndex + spec.groupsToScroll\r\n        slideGroupCount = swipeToSlide\r\n          ? checkNavigable(spec, newSlideGroupIndex)\r\n          : newSlideGroupIndex\r\n        state.currentDirection = 0\r\n        break\r\n      case 'right':\r\n      case 'down':\r\n        newSlideGroupIndex = spec.swipeToSlide\r\n          ? getTraversedSlideGroupCount(spec)\r\n          : currentSlideGroupIndex - spec.groupsToScroll\r\n        slideGroupCount = swipeToSlide\r\n          ? checkNavigable(spec, newSlideGroupIndex)\r\n          : newSlideGroupIndex\r\n        state.currentDirection = 1\r\n        break\r\n      default:\r\n        slideGroupCount = currentSlideGroupIndex\r\n    }\r\n    state.triggerSlideGroupHandler = slideGroupCount\r\n  } else {\r\n    // Adjust the track back to its original position.\r\n    let currentLeft = getTrackLeft(spec)\r\n    state.trackStyle = getTrackAnimateCSS(spec, currentLeft)\r\n  }\r\n  return state\r\n}\r\n\r\nexport function getLazySlidesOnLeft(spec: LazyInfoSpec) {\r\n  return spec.centerMode\r\n    ? Math.floor(spec.groupsToShow / 2) +\r\n        (parseInt(spec.centerPadding) > 0 ? 1 : 0)\r\n    : 0\r\n}\r\n\r\nexport function getLazySlidesOnRight(spec: LazyInfoSpec) {\r\n  return spec.centerMode\r\n    ? Math.floor((spec.groupsToShow - 1) / 2) +\r\n        1 +\r\n        (parseInt(spec.centerPadding) > 0 ? 1 : 0)\r\n    : spec.groupsToShow\r\n}\r\n\r\nexport function getLazyStartIndex(spec: LazyInfoSpec) {\r\n  return spec.currentSlideGroupIndex - getLazySlidesOnLeft(spec)\r\n}\r\n\r\nexport function getLazyEndIndex(spec: LazyInfoSpec) {\r\n  return spec.currentSlideGroupIndex + getLazySlidesOnRight(spec)\r\n}\r\n\r\nexport function getOnDemandLazySlideGroups(spec: LazyInfoSpec) {\r\n  let onDemandSlideGroups = []\r\n  const startIndex = getLazyStartIndex(spec)\r\n  const endIndex = getLazyEndIndex(spec)\r\n  for (\r\n    let slideGroupIndex = startIndex;\r\n    slideGroupIndex < endIndex;\r\n    slideGroupIndex++\r\n  ) {\r\n    if (spec.lazyLoadedList?.indexOf(slideGroupIndex) < 0) {\r\n      onDemandSlideGroups.push(slideGroupIndex)\r\n    }\r\n  }\r\n  return onDemandSlideGroups\r\n}\r\n\r\nexport function getTrackCSS(spec: TrackInfoSpec, left: number) {\r\n  let trackWidth, trackHeight\r\n  const trackChildren = spec.slideGroupCount + 2 * spec.groupsToShow\r\n  if (!spec.vertical) {\r\n    trackWidth =\r\n      getTotalSlideGroups(spec) * parseInt(`${spec.slideGroupWidth || 0}`)\r\n  } else {\r\n    trackHeight = trackChildren * parseInt(`${spec.slideGroupHeight || 0}`)\r\n  }\r\n  let style: Record<string, string | number> = {\r\n    opacity: 1,\r\n    transition: ''\r\n  }\r\n  if (spec.useCSSTransform) {\r\n    let transform = !spec.vertical\r\n      ? 'translate3d(' + left + 'px, 0px, 0px)'\r\n      : 'translate3d(0px, ' + left + 'px, 0px)'\r\n    style = {\r\n      ...style,\r\n      transform\r\n    }\r\n  } else {\r\n    if (spec.vertical) {\r\n      style['top'] = left\r\n    } else {\r\n      style['left'] = left\r\n    }\r\n  }\r\n  if (spec.fade) style = { opacity: 1 }\r\n  if (trackWidth) style.width = trackWidth + 'px'\r\n  if (trackHeight) style.height = trackHeight + 'px'\r\n\r\n  return style\r\n}\r\n\r\nexport function getTotalSlideGroups(spec: TrackInfoSpec) {\r\n  return spec.slideGroupCount <= spec.groupsToShow\r\n    ? spec.slideGroupCount\r\n    : getTotalPreClones(spec) + spec.slideGroupCount + getTotalPostClones(spec)\r\n}\r\n\r\nexport function getTrackAnimateCSS(spec: TrackInfoSpec, left: number) {\r\n  let style = getTrackCSS(spec, left)\r\n  // useCSS is true by default so it can be undefined\r\n  if (spec.useCSSTransform) {\r\n    style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase\r\n  } else {\r\n    if (spec.vertical) {\r\n      style.transition = 'top ' + spec.speed + 'ms ' + spec.cssEase\r\n    } else {\r\n      style.transition = 'left ' + spec.speed + 'ms ' + spec.cssEase\r\n    }\r\n  }\r\n  if (spec.ignorePrefersReducedMotion) {\r\n    style.transition += ' !important'\r\n  }\r\n  return style\r\n}\r\n\r\nexport function getTrackLeft(spec: TrackInfoSpec) {\r\n  let {\r\n    centerPadding,\r\n    currentSlideGroupIndex,\r\n    trackEl,\r\n    infinite,\r\n    centerMode,\r\n    slideGroupCount,\r\n    groupsToShow,\r\n    groupsToScroll,\r\n    slideGroupWidth,\r\n    listWidth,\r\n    variableWidth,\r\n    slideGroupHeight,\r\n    fade,\r\n    vertical,\r\n    rtl\r\n  } = spec\r\n  listWidth = listWidth || 0\r\n  slideGroupWidth = slideGroupWidth || 0\r\n  slideGroupHeight = slideGroupHeight || 0\r\n\r\n  let slideGroupOffset = 0\r\n  let targetLeft\r\n  let targetSlide: HTMLElement | undefined\r\n  let verticalOffset = 0\r\n\r\n  if (fade || slideGroupCount === 1) {\r\n    return 0\r\n  }\r\n\r\n  let slidesToOffset = 0\r\n  if (infinite) {\r\n    slidesToOffset = -getTotalPreClones(spec) // bring active slide to the beginning of visible area\r\n    // if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting groupsToScroll children\r\n    if (\r\n      slideGroupCount % groupsToScroll !== 0 &&\r\n      currentSlideGroupIndex + groupsToScroll > slideGroupCount\r\n    ) {\r\n      slidesToOffset = -(currentSlideGroupIndex > slideGroupCount\r\n        ? groupsToShow - (currentSlideGroupIndex - slideGroupCount)\r\n        : slideGroupCount % groupsToScroll)\r\n    }\r\n    // in center mode, shift current slide group to the center of the frame\r\n    if (centerMode) {\r\n      slidesToOffset += Math.floor(groupsToShow / 2)\r\n    }\r\n  } else {\r\n    if (\r\n      slideGroupCount % groupsToScroll !== 0 &&\r\n      currentSlideGroupIndex + groupsToScroll > slideGroupCount\r\n    ) {\r\n      slidesToOffset = groupsToShow - (slideGroupCount % groupsToScroll)\r\n    }\r\n    if (centerMode) {\r\n      slidesToOffset = Math.floor(groupsToShow / 2)\r\n    }\r\n  }\r\n  slideGroupOffset = slidesToOffset * parseInt(`${slideGroupWidth}`)\r\n  verticalOffset = slidesToOffset * parseInt(`${slideGroupHeight}`)\r\n\r\n  if (!vertical) {\r\n    targetLeft =\r\n      currentSlideGroupIndex * parseInt(`${slideGroupWidth}`) * -1 +\r\n      slideGroupOffset\r\n  } else {\r\n    targetLeft =\r\n      currentSlideGroupIndex * parseInt(`${slideGroupHeight}`) * -1 +\r\n      verticalOffset\r\n  }\r\n\r\n  if (variableWidth === true) {\r\n    let targetSlideIndex\r\n    targetSlideIndex = currentSlideGroupIndex + getTotalPreClones(spec)\r\n    targetSlide =\r\n      trackEl && (trackEl.childNodes[targetSlideIndex] as HTMLElement)\r\n    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0\r\n    if (centerMode === true) {\r\n      targetSlideIndex = infinite\r\n        ? currentSlideGroupIndex + getTotalPreClones(spec)\r\n        : currentSlideGroupIndex\r\n      targetLeft = 0\r\n      if (trackEl) {\r\n        targetSlide = trackEl.children[targetSlideIndex] as HTMLElement\r\n        for (let slide = 0; slide < targetSlideIndex; slide++) {\r\n          if (!trackEl.children[slide]) continue\r\n          targetLeft -= (trackEl.children[slide] as HTMLElement).offsetWidth\r\n        }\r\n      }\r\n      targetLeft -= parseInt(centerPadding)\r\n      if (targetSlide) {\r\n        targetLeft += listWidth - targetSlide.offsetWidth / 2\r\n      }\r\n    }\r\n  }\r\n\r\n  if (rtl) targetLeft = -targetLeft\r\n\r\n  return targetLeft\r\n}\r\n\r\nexport const canGoPrev = (spec: GoPrevSpec) => {\r\n  return (\r\n    spec.infinite ||\r\n    (spec.currentSlideGroupIndex !== 0 &&\r\n      spec.slideGroupCount > spec.groupsToShow)\r\n  )\r\n}\r\n\r\nexport const canGoNext = (spec: GoNextSpec) => {\r\n  let canGo = true\r\n  if (!spec.infinite) {\r\n    if (spec.centerMode) {\r\n      canGo = spec.currentSlideGroupIndex < spec.slideGroupCount - 1\r\n    } else if (\r\n      spec.slideGroupCount <= spec.groupsToShow ||\r\n      spec.currentSlideGroupIndex >= spec.slideGroupCount - spec.groupsToShow\r\n    ) {\r\n      canGo = false\r\n    }\r\n  }\r\n  return canGo\r\n}\r\n\r\nexport const getStatesOnSlide = (spec: OnSlideSpec) => {\r\n  let {\r\n    waitForAnimate,\r\n    animating,\r\n    fade,\r\n    infinite,\r\n    index,\r\n    slideGroupCount,\r\n    lazyLoadedList,\r\n    lazyLoad,\r\n    currentSlideGroupIndex,\r\n    centerMode,\r\n    groupsToScroll,\r\n    groupsToShow,\r\n    useCSSTransitions\r\n  } = spec\r\n  if (\r\n    (waitForAnimate && animating) ||\r\n    (fade && !infinite && (index < 0 || index >= slideGroupCount))\r\n  )\r\n    return\r\n  let animationSlideGroupIndex = index,\r\n    finalSlideGroupIndex\r\n  let slidingState: Partial<SliderState> = {},\r\n    afterSlidingState: Partial<SliderState> = {}\r\n  if (fade) {\r\n    if (index < 0) {\r\n      animationSlideGroupIndex += slideGroupCount\r\n    } else if (index >= slideGroupCount) {\r\n      animationSlideGroupIndex -= slideGroupCount\r\n    }\r\n    if (lazyLoad && lazyLoadedList.indexOf(animationSlideGroupIndex) < 0) {\r\n      lazyLoadedList.push(animationSlideGroupIndex)\r\n    }\r\n    slidingState = {\r\n      animating: true,\r\n      currentSlideGroupIndex: animationSlideGroupIndex,\r\n      lazyLoadedList\r\n    }\r\n    afterSlidingState = { animating: false }\r\n    return {\r\n      slidingState,\r\n      afterSlidingState\r\n    }\r\n  }\r\n  finalSlideGroupIndex = animationSlideGroupIndex\r\n  if (animationSlideGroupIndex < 0) {\r\n    finalSlideGroupIndex = animationSlideGroupIndex + slideGroupCount\r\n    if (!infinite) finalSlideGroupIndex = 0\r\n    else if (slideGroupCount % groupsToScroll !== 0)\r\n      finalSlideGroupIndex =\r\n        slideGroupCount - (slideGroupCount % groupsToScroll)\r\n  } else if (\r\n    !canGoNext(spec) &&\r\n    animationSlideGroupIndex > currentSlideGroupIndex\r\n  ) {\r\n    animationSlideGroupIndex = finalSlideGroupIndex = currentSlideGroupIndex\r\n  } else if (centerMode && animationSlideGroupIndex >= slideGroupCount) {\r\n    animationSlideGroupIndex = infinite ? slideGroupCount : slideGroupCount - 1\r\n    finalSlideGroupIndex = infinite ? 0 : slideGroupCount - 1\r\n  } else if (animationSlideGroupIndex >= slideGroupCount) {\r\n    finalSlideGroupIndex = animationSlideGroupIndex - slideGroupCount\r\n    if (!infinite) finalSlideGroupIndex = slideGroupCount - groupsToShow\r\n    else if (slideGroupCount % groupsToScroll !== 0) finalSlideGroupIndex = 0\r\n  }\r\n  let finalLeft = getTrackLeft({\r\n    ...spec,\r\n    currentSlideGroupIndex: finalSlideGroupIndex\r\n  })\r\n  let animationLeft = getTrackLeft({\r\n    ...spec,\r\n    currentSlideGroupIndex: animationSlideGroupIndex\r\n  })\r\n  if (!infinite) {\r\n    if (animationLeft === finalLeft)\r\n      animationSlideGroupIndex = finalSlideGroupIndex\r\n    animationLeft = finalLeft\r\n  }\r\n  if (lazyLoad)\r\n    lazyLoadedList = lazyLoadedList.concat(\r\n      getOnDemandLazySlideGroups({\r\n        ...spec,\r\n        currentSlideGroupIndex: animationSlideGroupIndex\r\n      })\r\n    )\r\n  if (!useCSSTransitions) {\r\n    slidingState = {\r\n      currentSlideGroupIndex: finalSlideGroupIndex,\r\n      trackStyle: getTrackCSS(spec, finalLeft),\r\n      lazyLoadedList\r\n    }\r\n    return {\r\n      slidingState,\r\n      afterSlidingState\r\n    }\r\n  }\r\n  slidingState = {\r\n    animating: true,\r\n    currentSlideGroupIndex: finalSlideGroupIndex,\r\n    trackStyle: getTrackAnimateCSS(spec, animationLeft),\r\n    lazyLoadedList\r\n  }\r\n  afterSlidingState = {\r\n    animating: false,\r\n    currentSlideGroupIndex: finalSlideGroupIndex,\r\n    trackStyle: getTrackCSS(spec, finalLeft),\r\n    swipeLeft: undefined\r\n  }\r\n  return { slidingState, afterSlidingState }\r\n}\r\n\r\nexport function getTotalPreClones(spec: CloneInfoSpec) {\r\n  if (!spec.infinite) {\r\n    return 0\r\n  }\r\n  if (spec.variableWidth) {\r\n    return spec.slideGroupCount\r\n  }\r\n  return spec.groupsToShow + (spec.centerMode ? 1 : 0)\r\n}\r\n\r\nexport function getTotalPostClones(spec: CloneInfoSpec) {\r\n  if (!spec.infinite) {\r\n    return 0\r\n  }\r\n  return spec.slideGroupCount\r\n}\r\n\r\nexport const getSwipeMoveState = (\r\n  e: SwipeEvent,\r\n  spec: SwipeMoveSpec\r\n): SwipeMoveState | undefined => {\r\n  const {\r\n    scrolling,\r\n    animating,\r\n    vertical,\r\n    swipeToSlide,\r\n    verticalSwiping,\r\n    rtl,\r\n    currentSlideGroupIndex,\r\n    edgeFriction,\r\n    edgeDragged,\r\n    onEdge,\r\n    swiped,\r\n    swiping,\r\n    slideGroupCount,\r\n    groupsToScroll,\r\n    infinite,\r\n    touchObject,\r\n    swipeEvent,\r\n    listHeight,\r\n    listWidth\r\n  } = spec\r\n  if (scrolling) return\r\n  if (animating) {\r\n    e.preventDefault()\r\n    return\r\n  }\r\n  if (vertical && swipeToSlide && verticalSwiping) e.preventDefault()\r\n  let swipeLeft,\r\n    state: SwipeMoveState = {}\r\n  let curLeft = getTrackLeft(spec)\r\n  touchObject.curX =\r\n    window.TouchEvent && e instanceof TouchEvent\r\n      ? e.touches[0].pageX\r\n      : (e as MouseEvent).clientX\r\n  touchObject.curY =\r\n    window.TouchEvent && e instanceof TouchEvent\r\n      ? e.touches[0].pageY\r\n      : (e as MouseEvent).clientY\r\n  touchObject.swipeLength = Math.round(\r\n    Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2))\r\n  )\r\n  let verticalSwipeLength = Math.round(\r\n    Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2))\r\n  )\r\n  if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {\r\n    return { scrolling: true }\r\n  }\r\n  if (verticalSwiping) touchObject.swipeLength = verticalSwipeLength\r\n  let positionOffset =\r\n    (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1)\r\n  if (verticalSwiping)\r\n    positionOffset = touchObject.curY > touchObject.startY ? 1 : -1\r\n\r\n  let dotCount = Math.ceil(slideGroupCount / groupsToScroll)\r\n  let swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping)\r\n  let touchSwipeLength = touchObject.swipeLength\r\n  if (!infinite) {\r\n    if (\r\n      (currentSlideGroupIndex === 0 && swipeDirection === 'right') ||\r\n      (currentSlideGroupIndex + 1 >= dotCount && swipeDirection === 'left') ||\r\n      (!canGoNext(spec) && swipeDirection === 'left')\r\n    ) {\r\n      touchSwipeLength = Math.round(touchObject.swipeLength * edgeFriction)\r\n      if (edgeDragged === false && onEdge) {\r\n        onEdge(swipeDirection)\r\n        state.edgeDragged = true\r\n      }\r\n    }\r\n  }\r\n  if (!swiped && swipeEvent) {\r\n    swipeEvent(swipeDirection)\r\n    state.swiped = true\r\n  }\r\n  if (!vertical) {\r\n    if (!rtl) {\r\n      swipeLeft = curLeft + touchSwipeLength * positionOffset\r\n    } else {\r\n      swipeLeft = curLeft - touchSwipeLength * positionOffset\r\n    }\r\n  } else {\r\n    swipeLeft =\r\n      curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset\r\n  }\r\n  if (verticalSwiping) {\r\n    swipeLeft = curLeft + touchSwipeLength * positionOffset\r\n  }\r\n  state = {\r\n    ...state,\r\n    touchObject,\r\n    swipeLeft,\r\n    trackStyle: getTrackCSS(spec, swipeLeft),\r\n    swipeDirection\r\n  }\r\n  if (\r\n    Math.abs(touchObject.curX - touchObject.startX) <\r\n    Math.abs(touchObject.curY - touchObject.startY) * 0.8\r\n  ) {\r\n    return state\r\n  }\r\n  if (touchObject.swipeLength > 10) {\r\n    state.swiping = true\r\n    e.preventDefault()\r\n  }\r\n  return state\r\n}\r\n\r\nexport function getSlideGroupCount(slideCount: number, groupsToShow: number) {\r\n  return Math.ceil(slideCount / groupsToShow)\r\n}\r\n\r\nexport function getSliderState(spec: SliderStateInfoSpec) {\r\n  let slideGroupCount = getSlideGroupCount(\r\n    spec.slides.length,\r\n    spec.groupsToShow\r\n  )\r\n  let listWidth = Math.ceil(spec.listEl?.offsetWidth || 0)\r\n  let trackWidth = Math.ceil(spec.trackEl?.offsetWidth || 0)\r\n  let slideGroupWidth\r\n  if (!spec.vertical) {\r\n    let centerPaddingAdj = spec.centerMode\r\n      ? parseInt(spec.centerPadding) * 2\r\n      : 0\r\n    if (\r\n      typeof spec.centerPadding === 'string' &&\r\n      spec.centerPadding.slice(-1) === '%'\r\n    ) {\r\n      centerPaddingAdj *= listWidth / 100\r\n    }\r\n    slideGroupWidth = Math.ceil(\r\n      (listWidth - centerPaddingAdj) / spec.groupsToShow\r\n    )\r\n  } else {\r\n    slideGroupWidth = listWidth\r\n  }\r\n  let slideGroupHeight =\r\n    spec.listEl && spec.listEl.querySelector('[data-index=\"0\"]')\r\n      ? spec.listEl.querySelector<HTMLElement>('[data-index=\"0\"]')\r\n          ?.offsetHeight || 0\r\n      : 0\r\n  let listHeight = slideGroupHeight * spec.groupsToShow\r\n  let currentSlideGroupIndex =\r\n    spec.currentSlideGroupIndex === undefined\r\n      ? spec.initialGroupIndex\r\n      : spec.currentSlideGroupIndex\r\n  if (spec.rtl && spec.currentSlideGroupIndex === undefined) {\r\n    currentSlideGroupIndex = slideGroupCount - 1 - spec.initialGroupIndex\r\n  }\r\n  let lazyLoadedList = spec.lazyLoadedList || []\r\n  let slideGroupsToLoad = getOnDemandLazySlideGroups(spec as LazyInfoSpec)\r\n  lazyLoadedList.concat(slideGroupsToLoad)\r\n\r\n  let sliderState: MarkRequiredWithPartialBase<\r\n    SliderState,\r\n    | 'currentSlideGroupIndex'\r\n    | 'listWidth'\r\n    | 'slideGroupHeight'\r\n    | 'slideGroupWidth'\r\n  > & { slideGroupCount: number } = {\r\n    slideGroupCount,\r\n    slideGroupWidth,\r\n    listWidth,\r\n    trackWidth,\r\n    currentSlideGroupIndex,\r\n    slideGroupHeight,\r\n    listHeight,\r\n    lazyLoadedList\r\n  }\r\n\r\n  if (spec.autoplaying === null && spec.autoplay) {\r\n    sliderState.autoplaying = PlayingType.playing\r\n  }\r\n\r\n  return sliderState\r\n}\r\n","export class MatchMedia {\r\n  mqlRecords: Record<string, MediaQueryList> = {}\r\n\r\n  register(query: string, handler: (predicate: { matches: boolean }) => void) {\r\n    if (this.mqlRecords[query]) {\r\n      this.addMqlListener(query, handler)\r\n    } else {\r\n      this.mqlRecords[query] = window.matchMedia(query)\r\n      this.addMqlListener(query, handler)\r\n    }\r\n    if (this.mqlRecords[query].matches) {\r\n      handler({ matches: true })\r\n    }\r\n  }\r\n\r\n  unregister(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    if (this.mqlRecords[query]) {\r\n      this.removeMqlListener(query, handler)\r\n    }\r\n  }\r\n\r\n  private addMqlListener(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    try {\r\n      this.mqlRecords[query].addEventListener('change', handler)\r\n    } catch (_) {\r\n      try {\r\n        this.mqlRecords[query].addListener(handler)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n  }\r\n\r\n  private removeMqlListener(\r\n    query: string,\r\n    handler: (predicate: { matches: boolean }) => void\r\n  ) {\r\n    try {\r\n      this.mqlRecords[query].removeEventListener('change', handler)\r\n    } catch (_) {\r\n      try {\r\n        this.mqlRecords[query].removeListener(handler)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n  }\r\n}\r\n","export * from './carousel-utils'\r\nexport * from './match-media'\r\n\r\nexport const canUseDOM = () =>\r\n  !!(\r\n    typeof window !== 'undefined' &&\r\n    window.document &&\r\n    window.document.createElement\r\n  )\r\n\r\nexport const filterUndefined = <T extends object>(props: T) =>\r\n  Object.keys(props)\r\n    .filter((key) => props[key as keyof T] !== undefined)\r\n    .reduce((acc, key) => {\r\n      acc[key as keyof T] = props[key as keyof T]\r\n      return acc\r\n    }, {} as T)\r\n\r\nexport function clearSelection() {\r\n  if (!window.getSelection) return\r\n  if (window.getSelection()?.empty) {\r\n    window.getSelection()!.empty()\r\n  } else if (window.getSelection()?.removeAllRanges) {\r\n    window.getSelection()!.removeAllRanges()\r\n  }\r\n}\r\n\r\nexport function json2mq(obj: Record<string, any>) {\r\n  const conditions = Object.keys(obj).map((key) => {\r\n    let value = obj[key]\r\n    if (Array.isArray(value)) {\r\n      value = value.join(' and ')\r\n    }\r\n    return `(${key}: ${value})`\r\n  })\r\n  return conditions.join(' and ')\r\n}\r\n\r\nexport function debounce(\r\n  callback: () => Promise<void>,\r\n  wait: number\r\n): { cancel: () => void } {\r\n  const timeoutId = setTimeout(callback, wait)\r\n  return { cancel: () => clearTimeout(timeoutId) }\r\n}\r\n","import { PropType, VNode } from 'vue'\r\nimport {\r\n  ArrowProps,\r\n  DotsProps,\r\n  Props,\r\n  Responsive,\r\n  SlideNavigation,\r\n  SliderState,\r\n  TrackProps,\r\n  WidthDetection\r\n} from '../types'\r\n\r\ntype VuePropDef<T extends string> = Record<\r\n  T,\r\n  { type: PropType<unknown>; default: unknown }\r\n>\r\n\r\nconst makeDefaultProps = (selectFields?: string[]) => {\r\n  const defaultProps = {\r\n    accessibility: { type: Boolean, default: true },\r\n    adaptiveHeight: { type: Boolean, default: false },\r\n    arrows: { type: Boolean, default: true },\r\n    asNavFor: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    autoplay: { type: Boolean, default: false },\r\n    autoplaySpeed: { type: Number, default: 3000 },\r\n    centerMode: { type: Boolean, default: false },\r\n    centerPadding: { type: String, default: '50px' },\r\n    cssEase: { type: String, default: 'ease' },\r\n    dots: { type: Boolean, default: false },\r\n    draggable: { type: Boolean, default: true },\r\n    edgeFriction: { type: Number, default: 0.35 },\r\n    fade: { type: Boolean, default: false },\r\n    focusOnSelect: { type: Boolean, default: false },\r\n    ignorePrefersReducedMotion: { type: Boolean, default: false },\r\n    infinite: { type: Boolean, default: true },\r\n    initialGroupIndex: { type: Number, default: 0 },\r\n    lazyLoad: { type: String, default: null },\r\n    nextArrowLabel: { type: String, default: 'Next' },\r\n    pauseOnDotsHover: { type: Boolean, default: false },\r\n    pauseOnFocus: { type: Boolean, default: false },\r\n    pauseOnHover: { type: Boolean, default: true },\r\n    prevArrowLabel: { type: String, default: 'Previous' },\r\n    responsive: { type: Array as PropType<Responsive[]>, default: [] },\r\n    rtl: { type: Boolean, default: false },\r\n    slidesPerGroup: { type: Number, default: 1 },\r\n    groupsToScroll: { type: Number, default: 1 },\r\n    groupsToShow: { type: Number, default: 1 },\r\n    speed: { type: Number, default: 500 },\r\n    swipe: { type: Boolean, default: true },\r\n    swipeToSlide: { type: Boolean, default: false },\r\n    touchMove: { type: Boolean, default: true },\r\n    touchThreshold: { type: Number, default: 5 },\r\n    useCSSTransitions: { type: Boolean, default: true },\r\n    useCSSTransform: { type: Boolean, default: true },\r\n    variableWidth: { type: Boolean, default: false },\r\n    vertical: { type: Boolean, default: false },\r\n    verticalSwiping: { type: Boolean, default: false },\r\n    waitForAnimate: { type: Boolean, default: true },\r\n    widthDetection: { type: String, default: WidthDetection.auto }\r\n  } satisfies VuePropDef<keyof Props>\r\n  if (!selectFields) return defaultProps\r\n  return Object.keys(defaultProps).reduce<{\r\n    [key: string]: { type: PropType<unknown>; default: unknown }\r\n  }>((acc, key) => {\r\n    if (selectFields.includes(key)) {\r\n      acc[key as keyof Props] = (defaultProps as any)[key]\r\n    }\r\n    return acc\r\n  }, {}) as typeof defaultProps\r\n}\r\n\r\nexport const defaultProps = makeDefaultProps() satisfies VuePropDef<keyof Props>\r\n\r\nexport const defaultPropValues = Object.keys(defaultProps).reduce<{\r\n  [key: string]: unknown\r\n}>((acc, key) => {\r\n  acc[key] = (defaultProps as any)[key].default\r\n  return acc\r\n}, {}) as {\r\n  [K in keyof Props]: unknown\r\n} as Props\r\n\r\nexport const makeDefaultSliderState: () => SliderState = () => ({\r\n  animating: false,\r\n  autoplaying: null,\r\n  autoplayTimer: null,\r\n  currentDirection: 0,\r\n  currentLeft: null,\r\n  currentSlideGroupIndex: 0,\r\n  detectingWidth: false,\r\n  direction: 1,\r\n  dragging: false,\r\n  edgeDragged: false,\r\n  initialized: false,\r\n  lazyLoadedList: [],\r\n  listHeight: undefined,\r\n  listWidth: undefined,\r\n  scrolling: false,\r\n  slideGroupHeight: undefined,\r\n  slideGroupWidth: undefined,\r\n  swipeLeft: undefined,\r\n  swiped: false,\r\n  swiping: false,\r\n  touchObject: { startX: 0, startY: 0, curX: 0, curY: 0, swipeLength: 0 },\r\n  trackStyle: {},\r\n  trackWidth: 0\r\n})\r\n\r\nexport const defaultTrackProps = {\r\n  ...makeDefaultProps([\r\n    'centerMode',\r\n    'centerPadding',\r\n    'cssEase',\r\n    'fade',\r\n    'ignorePrefersReducedMotion',\r\n    'infinite',\r\n    'lazyLoad',\r\n    'rtl',\r\n    'groupsToScroll',\r\n    'groupsToShow',\r\n    'speed',\r\n    'variableWidth',\r\n    'vertical'\r\n  ]),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    detectingWidth: { type: Boolean, default: false },\r\n    lazyLoadedList: {\r\n      type: Array as PropType<number[]>,\r\n      default: []\r\n    },\r\n    listHeight: { type: Number, default: undefined },\r\n    trackStyle: { type: Object, default: {} },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    rawSlideGroups: { type: Array as PropType<VNode[][]>, default: [] },\r\n    slideGroupHeight: { type: [String, Number], default: undefined },\r\n    slideGroupWidth: { type: [String, Number], default: undefined }\r\n  }\r\n} satisfies VuePropDef<keyof TrackProps>\r\n\r\nexport const defaultArrowProps = {\r\n  ...makeDefaultProps([\r\n    'centerMode',\r\n    'infinite',\r\n    'groupsToShow',\r\n    'prevArrowLabel',\r\n    'nextArrowLabel'\r\n  ]),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    disabled: { type: Boolean, default: false },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    type: { type: String as PropType<SlideNavigation>, default: 'prev' }\r\n  }\r\n} satisfies VuePropDef<keyof ArrowProps>\r\n\r\nexport const defaultDotsProps = {\r\n  ...makeDefaultProps(['infinite', 'groupsToScroll', 'groupsToShow']),\r\n  ...{\r\n    currentSlideGroupIndex: { type: Number, default: 0 },\r\n    slideGroupCount: { type: Number, default: 0 },\r\n    pageCount: { type: Number, default: 0 }\r\n  }\r\n} satisfies VuePropDef<keyof DotsProps>\r\n","<template>\n  <template v-if=\"type === SlideNavigation.previous\">\n    <slot name=\"prevArrow\" v-bind=\"arrowSlotProps\">\n      <button\n        type=\"button\"\n        data-role=\"none\"\n        class=\"v-slick-arrow prev\"\n        :class=\"{ disabled }\"\n        @click=\"clickHandler\"\n      >\n        {{ prevArrowLabel }}\n      </button>\n    </slot>\n  </template>\n  <template v-else>\n    <slot name=\"nextArrow\" v-bind=\"arrowSlotProps\">\n      <button\n        type=\"button\"\n        data-role=\"none\"\n        class=\"v-slick-arrow next\"\n        :class=\"{ disabled }\"\n        @click=\"clickHandler\"\n      >\n        {{ nextArrowLabel }}\n      </button>\n    </slot>\n  </template>\n</template>\n<script setup lang=\"ts\">\nimport { ArrowSlotProps, SlideNavigation } from '@lib/types'\nimport { computed } from 'vue'\nimport { defaultArrowProps } from './props'\n\nconst props = defineProps(defaultArrowProps)\nconst emit = defineEmits([SlideNavigation.previous, SlideNavigation.next])\nconst clickHandler = computed(() => () => {\n  if (props.disabled) return\n  emit(props.type)\n})\nconst arrowSlotProps = computed<ArrowSlotProps>(() => ({\n  currentSlideGroupIndex: props.currentSlideGroupIndex,\n  slideGroupCount: props.slideGroupCount,\n  onClick: clickHandler.value,\n  disabled: !props.disabled\n}))\n</script>\n<style scoped>\n.v-slick-arrow {\n  display: block;\n}\n</style>\n","<template>\n  <div\n    class=\"v-slick-track\"\n    :class=\"{ center: centerMode, vertical: vertical }\"\n    :style=\"[trackStyle, detectingWidth ? { width: '0 !important' } : {}]\"\n  >\n    <div\n      v-for=\"(slideGroup, i) in preCloneSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      class=\"v-slick-slide-group clone\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n    <div\n      v-for=\"(slideGroup, i) in originalSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      class=\"v-slick-slide-group\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n    <div\n      v-for=\"(slideGroup, i) in postCloneSlideGroups\"\n      :key=\"slideGroup.key\"\n      tabindex=\"-1\"\n      :class=\"slideGroup.class\"\n      :style=\"slideGroup.style\"\n      class=\"v-slick-slide-group clone\"\n      v-bind=\"slideGroup.attrs\"\n      @click=\"slideGroup.onClick\"\n    >\n      <component\n        :is=\"slide\"\n        v-for=\"(slide, j) of slideGroup.slides\"\n        :key=\"`slide-${i}-${j}` + (slide.key ? `-${String(slide.key)}` : '')\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { defaultTrackProps } from './props'\nimport {\n  ChildClickPayload,\n  CloneInfoSpec,\n  LazyInfoSpec,\n  SlideGroup,\n  TrackProps\n} from '@lib/types'\nimport {\n  getLazyEndIndex,\n  getLazyStartIndex,\n  getTotalPreClones\n} from '@lib/utils'\n\nconst props = defineProps(defaultTrackProps) as TrackProps\nconst emit = defineEmits<{\n  childClick: [payload: ChildClickPayload]\n}>()\n\nconst getSlideGroupClasses = (index: number) => {\n  let isActive = false,\n    isCenter = false,\n    isCurrent = false,\n    centerOffset: number\n  if (props.centerMode) {\n    centerOffset = Math.floor(props.groupsToShow / 2)\n    isCenter =\n      (index - props.currentSlideGroupIndex) % props.slideGroupCount === 0\n    if (\n      index > props.currentSlideGroupIndex - centerOffset - 1 &&\n      index <= props.currentSlideGroupIndex + centerOffset\n    ) {\n      isActive = true\n    }\n  } else {\n    isActive =\n      props.currentSlideGroupIndex <= index &&\n      index < props.currentSlideGroupIndex + props.groupsToShow\n  }\n  isCurrent = index === props.currentSlideGroupIndex\n  return Object.entries({\n    active: isActive,\n    center: isCenter,\n    current: isCurrent\n  })\n    .filter(([, value]) => value)\n    .map(([key]) => key)\n}\n\nconst getSlideGroupStyle = (index: number) => {\n  let style: {\n    width?: string\n    position?: string\n    top?: string\n    left?: string\n    opacity?: number\n    transition?: string\n  } = {}\n\n  if (props.variableWidth === undefined || props.variableWidth === false) {\n    style.width =\n      typeof props.slideGroupWidth === 'number'\n        ? `${props.slideGroupWidth}px`\n        : props.slideGroupWidth\n  }\n\n  if (props.fade) {\n    style.position = 'relative'\n    if (props.vertical) {\n      const slideGroupHeight = !props.slideGroupHeight\n        ? 0\n        : typeof props.slideGroupHeight === 'string'\n          ? parseFloat(props.slideGroupHeight)\n          : props.slideGroupHeight\n      style.top = `${-index * slideGroupHeight}px`\n    } else {\n      const slideGroupWidth = !props.slideGroupWidth\n        ? 0\n        : typeof props.slideGroupWidth === 'string'\n          ? parseFloat(props.slideGroupWidth)\n          : props.slideGroupWidth\n\n      const left = props.rtl\n        ? index * slideGroupWidth\n        : -index * slideGroupWidth\n      style.left = `${left}px`\n    }\n    style.opacity = props.currentSlideGroupIndex === index ? 1 : 0\n    style.transition =\n      'opacity ' +\n      props.speed +\n      'ms ' +\n      props.cssEase +\n      ', ' +\n      'visibility ' +\n      props.speed +\n      'ms ' +\n      props.cssEase\n    if (props.ignorePrefersReducedMotion) {\n      style.transition += ' !important'\n    }\n  }\n\n  return style\n}\n\nconst originalSlideGroups = computed<SlideGroup[]>(() => {\n  const slideGroups = props.rawSlideGroups.map((rawSlideGroup, index) => {\n    const style = getSlideGroupStyle(index)\n    const classes = getSlideGroupClasses(index)\n    if (props.fade && classes.includes('active')) {\n      Object.assign(style, { zIndex: 1 })\n    }\n    const slideGroup: SlideGroup = {\n      slides: [],\n      key: `original-${index}`,\n      class: classes,\n      style,\n      attrs: {\n        'data-index': index,\n        'aria-hidden': `${!classes.includes('active')}`\n      },\n      onClick: () => {\n        emit('childClick', {\n          index:\n            props.rtl && props.infinite ? props.slideGroupCount + index : index\n        })\n      }\n    }\n    if (\n      !props.lazyLoad ||\n      (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n    ) {\n      slideGroup.slides = rawSlideGroup\n    }\n    return slideGroup\n  })\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n\nconst preCloneSlideGroups = computed<SlideGroup[]>(() => {\n  if (\n    !props.infinite ||\n    props.fade ||\n    props.slideGroupCount <= props.groupsToShow\n  ) {\n    return []\n  }\n  const slideGroups = props.rawSlideGroups\n    .map((rawSlideGroup, index) => {\n      const preCloneNo = props.slideGroupCount - index\n      if (preCloneNo > getTotalPreClones(props as CloneInfoSpec)) return\n      const key = -preCloneNo\n      const slideGroup: SlideGroup = {\n        slides: [],\n        key: `preclone-${key}`,\n        class: getSlideGroupClasses(key),\n        style: getSlideGroupStyle(index),\n        attrs: {\n          'data-index': key,\n          'aria-hidden': 'true'\n        },\n        onClick: () => {\n          emit('childClick', {\n            index: key\n          })\n        }\n      }\n      if (\n        key >= getLazyStartIndex(props as LazyInfoSpec) ||\n        !props.lazyLoad ||\n        (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n      ) {\n        slideGroup.slides = rawSlideGroup\n      }\n      return slideGroup\n    })\n    .filter((slideGroup) => slideGroup) as SlideGroup[]\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n\nconst postCloneSlideGroups = computed<SlideGroup[]>(() => {\n  if (\n    !props.infinite ||\n    props.fade ||\n    props.slideGroupCount <= props.groupsToShow\n  ) {\n    return []\n  }\n  const slideGroups = props.rawSlideGroups.map((rawSlideGroup, index) => {\n    const key = props.slideGroupCount + index\n    const slideGroup: SlideGroup = {\n      slides: [],\n      key: `postclone-${key}`,\n      class: getSlideGroupClasses(key),\n      style: getSlideGroupStyle(index),\n      attrs: {\n        'data-index': key,\n        'aria-hidden':\n          props.infinite &&\n          props.slideGroupCount - props.currentSlideGroupIndex <\n            props.groupsToShow &&\n          index <\n            props.groupsToShow -\n              (props.slideGroupCount - props.currentSlideGroupIndex)\n            ? 'false'\n            : 'true'\n      },\n      onClick: () => {\n        emit('childClick', {\n          index: props.rtl ? props.slideGroupCount + key : key\n        })\n      }\n    }\n    if (\n      key < getLazyEndIndex(props as LazyInfoSpec) ||\n      !props.lazyLoad ||\n      (props.lazyLoad && props.lazyLoadedList.indexOf(index) >= 0)\n    ) {\n      slideGroup.slides = rawSlideGroup\n    }\n    return slideGroup\n  })\n  // return props.rtl ? slideGroups.reverse() : slideGroups\n  return slideGroups\n})\n</script>\n\n<style scoped lang=\"scss\">\n.v-slick-track {\n  position: relative;\n  top: 0;\n  left: 0;\n  display: flex;\n  transform: translate3d(0, 0, 0);\n  &.center {\n    margin-left: auto;\n    margin-right: auto;\n  }\n  &.vertical {\n    flex-direction: column;\n    .v-slick-slide-group {\n      flex-direction: row;\n      height: auto;\n      & > * {\n        flex-grow: 1;\n      }\n    }\n  }\n  &.dragging img {\n    pointer-events: none;\n  }\n}\n.v-slick-slide-group {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  min-height: 1px;\n  flex-shrink: 0;\n  outline: none;\n}\n</style>\n","<template>\r\n  <ul\r\n    class=\"v-slick-dots\"\r\n    style=\"display: block\"\r\n    @mouseenter=\"$emit('dotsLeave')\"\r\n    @mouseleave=\"$emit('dotsLeave')\"\r\n    @mouseover=\"$emit('dotsOver')\"\r\n  >\r\n    <li\r\n      v-for=\"i in pageCount\"\r\n      :key=\"i\"\r\n      :class=\"{ active: isActive(i - 1) }\"\r\n      @click=\"\r\n        $emit('dotClick', {\r\n          index: i - 1,\r\n          groupsToScroll\r\n        })\r\n      \"\r\n    >\r\n      <slot name=\"customPaging\" :page=\"i - 1\">\r\n        <button>{{ i }}</button>\r\n      </slot>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script setup lang=\"ts\">\r\nimport { DotClickPayload } from '@lib/types'\r\nimport { defaultDotsProps } from './props'\r\n\r\ndefineEmits<{\r\n  dotClick: [payload: DotClickPayload]\r\n  dotsOver: []\r\n  dotsLeave: []\r\n}>()\r\nconst props = defineProps(defaultDotsProps)\r\nconst isActive = (i: number) => {\r\n  const leftBound = i * props.groupsToScroll\r\n  const rightBound = leftBound + props.groupsToScroll - 1\r\n  return (\r\n    props.currentSlideGroupIndex >= leftBound &&\r\n    props.currentSlideGroupIndex <= rightBound\r\n  )\r\n}\r\n</script>\r\n","<template>\r\n  <div\r\n    ref=\"vSlickCarouselRef\"\r\n    class=\"v-slick-carousel\"\r\n    :style=\"\r\n      widthDetection === WidthDetection.manual\r\n        ? state.detectingWidth\r\n          ? { width: '100%' }\r\n          : vSlickCarouselStyle\r\n        : {}\r\n    \"\r\n  >\r\n    <div class=\"v-slick-slider\" :dir=\"settings.rtl ? 'rtl' : 'ltr'\">\r\n      <VSlickArrow\r\n        v-if=\"settings.arrows\"\r\n        :type=\"SlideNavigation.previous\"\r\n        :center-mode=\"settings.centerMode\"\r\n        :infinite=\"settings.infinite\"\r\n        :groups-to-show=\"settings.groupsToShow\"\r\n        :slide-group-count=\"slideGroupCount\"\r\n        :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n        :disabled=\"!canGoPrev\"\r\n        @previous=\"handlePrevVSlickArrow\"\r\n      >\r\n        <template #prevArrow=\"arrowSlotProps\">\r\n          <slot name=\"prevArrow\" v-bind=\"arrowSlotProps\" />\r\n        </template>\r\n      </VSlickArrow>\r\n      <div\r\n        ref=\"vSlickListRef\"\r\n        class=\"v-slick-list\"\r\n        :class=\"{ dragging: state.dragging }\"\r\n        :style=\"vSlickListStyle\"\r\n        @click=\"handleClickVSlickList\"\r\n        @mousedown=\"handleMouseDownOrTouchStartVSlickList\"\r\n        @touchstart=\"handleMouseDownOrTouchStartVSlickList\"\r\n        @keydown=\"handleKeyDownVSlickList\"\r\n      >\r\n        <VSlickTrack\r\n          ref=\"vSlickTrackRef\"\r\n          :center-mode=\"settings.centerMode\"\r\n          :center-padding=\"settings.centerPadding\"\r\n          :raw-slide-groups=\"rawSlideGroups\"\r\n          :css-ease=\"cssEase\"\r\n          :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n          :detecting-width=\"state.detectingWidth\"\r\n          :fade=\"settings.fade\"\r\n          :ignore-prefers-reduced-motion=\"settings.ignorePrefersReducedMotion\"\r\n          :infinite=\"settings.infinite\"\r\n          :lazy-load=\"settings.lazyLoad\"\r\n          :lazy-loaded-list=\"state.lazyLoadedList\"\r\n          :list-height=\"state.listHeight\"\r\n          :rtl=\"settings.rtl\"\r\n          :slide-group-count=\"slideGroupCount\"\r\n          :slide-group-height=\"state.slideGroupHeight\"\r\n          :slide-group-width=\"state.slideGroupWidth\"\r\n          :groups-to-scroll=\"settings.groupsToScroll\"\r\n          :groups-to-show=\"settings.groupsToShow\"\r\n          :speed=\"settings.speed\"\r\n          :track-style=\"state.trackStyle\"\r\n          :variable-width=\"settings.variableWidth\"\r\n          :vertical=\"settings.vertical\"\r\n          @mouseenter=\"handleMouseEnterOrOverVSlickTrack\"\r\n          @mouseleave=\"handleMouseLeaveVSlickTrack\"\r\n          @mouseover=\"handleMouseEnterOrOverVSlickTrack\"\r\n          @child-click=\"handleChildClickVSlickTrack\"\r\n        />\r\n      </div>\r\n      <VSlickArrow\r\n        v-if=\"settings.arrows\"\r\n        :type=\"SlideNavigation.next\"\r\n        :center-mode=\"settings.centerMode\"\r\n        :infinite=\"settings.infinite\"\r\n        :groups-to-show=\"settings.groupsToShow\"\r\n        :slide-group-count=\"slideGroupCount\"\r\n        :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n        :disabled=\"!canGoNext\"\r\n        @next=\"handleNextVSlickArrow\"\r\n      >\r\n        <template #nextArrow=\"arrowSlotProps\">\r\n          <slot name=\"nextArrow\" v-bind=\"arrowSlotProps\" />\r\n        </template>\r\n      </VSlickArrow>\r\n    </div>\r\n    <VSlickDots\r\n      v-if=\"settings.dots\"\r\n      :current-slide-group-index=\"state.currentSlideGroupIndex\"\r\n      :infinite=\"settings.infinite\"\r\n      :slide-group-count=\"slideGroupCount\"\r\n      :groups-to-scroll=\"settings.groupsToScroll\"\r\n      :groups-to-show=\"settings.groupsToShow\"\r\n      :page-count=\"pageCount\"\r\n      @dot-click=\"handleClickDot\"\r\n      @dots-over=\"handleOverDots\"\r\n      @dots-leave=\"handleLeaveDots\"\r\n    >\r\n      <template #customPaging=\"paging\">\r\n        <slot name=\"customPaging\" v-bind=\"paging\" />\r\n      </template>\r\n    </VSlickDots>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  computed,\r\n  watch,\r\n  VNode,\r\n  useSlots,\r\n  getCurrentInstance,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n  onUpdated\r\n} from 'vue'\r\nimport {\r\n  ChildClickPayload,\r\n  DotClickPayload,\r\n  LazyLoadType,\r\n  PlayingType,\r\n  Props,\r\n  SwipeDirection,\r\n  SwipeEndSpec,\r\n  SwipeMoveSpec,\r\n  TrackInfoSpec,\r\n  VSlickCarouselInstance,\r\n  SwipeEvent,\r\n  SlideNavigation,\r\n  SlideGroupChangeOptions,\r\n  SlideGroupChangeSpec,\r\n  OnSlideSpec,\r\n  WidthDetection\r\n} from '@lib/types'\r\nimport {\r\n  canUseDOM,\r\n  clearSelection,\r\n  filterUndefined,\r\n  getChangedSlideGroupIndex,\r\n  json2mq,\r\n  MatchMedia,\r\n  debounce\r\n} from '@lib/utils'\r\nimport {\r\n  defaultPropValues,\r\n  defaultProps,\r\n  makeDefaultSliderState\r\n} from './props'\r\nimport VSlickArrow from './VSlickArrow.vue'\r\nimport VSlickTrack from './VSlickTrack.vue'\r\nimport VSlickDots from './VSlickDots.vue'\r\nimport {\r\n  canGoNext as checkCanGoNext,\r\n  canGoPrev as checkCanGoPrev,\r\n  extractSlides,\r\n  getNavigationOnKeyType,\r\n  getOnDemandLazySlideGroups,\r\n  getSlideGroupCount,\r\n  getSliderState,\r\n  getStatesOnSlide,\r\n  getSwipeEndState,\r\n  getSwipeMoveState,\r\n  getSwipeStartState,\r\n  getTotalPostClones,\r\n  getTotalPreClones,\r\n  getTrackCSS,\r\n  getTrackLeft\r\n} from '@lib/utils/carousel-utils'\r\n\r\nconst props = defineProps(defaultProps) as Props\r\ndefineOptions({ inheritAttrs: false })\r\n\r\nconst emit = defineEmits([\r\n  'init',\r\n  'beforeChange',\r\n  'afterChange',\r\n  'lazyLoad',\r\n  'lazyLoadError',\r\n  'reInit',\r\n  'edge',\r\n  'swipe'\r\n])\r\n\r\nconst slots = useSlots()\r\nconst enquire = canUseDOM() ? new MatchMedia() : undefined\r\n\r\nconst DEBOUNCE_RESIZE_DURATION = 50\r\n\r\nlet triggerSlideGroupHandler: number | undefined\r\nlet animationEndCallback: NodeJS.Timeout | null = null\r\nlet lazyLoadTimer: NodeJS.Timeout | null = null\r\nlet callbackTimers: NodeJS.Timeout[] = []\r\n\r\nconst vSlickListStyle = ref({\r\n  ...(getCurrentInstance()?.vnode?.props?.style || {})\r\n})\r\n\r\nlet isVSlickListClickable = true\r\nlet debouncedResize: ReturnType<typeof debounce> | null = null\r\nlet ro: ResizeObserver | null = null\r\n\r\nlet responsiveMediaHandlers: {\r\n  query: string\r\n  handler: (predicate: { matches: boolean }) => void\r\n}[] = []\r\n\r\nconst media = (\r\n  query: string,\r\n  handler: () => void,\r\n  previousHandler: () => void\r\n) => {\r\n  if (!enquire) return\r\n\r\n  const newHandler = (predicate: { matches: boolean }) => {\r\n    if (predicate.matches) {\r\n      handler()\r\n    } else {\r\n      previousHandler()\r\n    }\r\n  }\r\n\r\n  enquire.register(query, newHandler)\r\n  responsiveMediaHandlers.push({ query, handler: newHandler })\r\n}\r\n\r\nconst clearBreakpoints = () => {\r\n  responsiveMediaHandlers.forEach(({ query, handler }) =>\r\n    enquire?.unregister(query, handler)\r\n  )\r\n  responsiveMediaHandlers = []\r\n}\r\n\r\nconst makeBreakpoints = () => {\r\n  if (!props.responsive.length) return\r\n  const breakpoints = props.responsive.map((item) => item.breakpoint)\r\n  breakpoints.sort((a, b) => a - b)\r\n  breakpoints.forEach((_breakpoint, index) => {\r\n    const mediaQuery = json2mq({\r\n      'min-width': `${_breakpoint}px`\r\n    })\r\n    media(\r\n      mediaQuery,\r\n      () => {\r\n        breakpoint.value = _breakpoint\r\n      },\r\n      () => {\r\n        breakpoint.value = index === 0 ? undefined : breakpoints[index - 1]\r\n      }\r\n    )\r\n  })\r\n}\r\n\r\nconst swipeStart = (e: SwipeEvent) => {\r\n  // setTimout is used here to prevent disabling the scroll prematurely\r\n  setTimeout(() => {\r\n    e.preventDefault()\r\n  })\r\n  const swipeStartState = getSwipeStartState(\r\n    e,\r\n    settings.value.swipe,\r\n    settings.value.draggable\r\n  )\r\n  Object.assign(state.value, swipeStartState)\r\n}\r\n\r\nconst swipeEnd = (e: SwipeEvent) => {\r\n  const swipeEndState = getSwipeEndState(e, {\r\n    ...settings.value,\r\n    ...state.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    listEl: vSlickListRef.value,\r\n    slideGroupIndex: state.value.currentSlideGroupIndex,\r\n    slideGroupCount: slideGroupCount.value\r\n  } as SwipeEndSpec)\r\n  if (!swipeEndState) return\r\n  const { triggerSlideGroupHandler: newTriggerSlideGroupHandler, ...rest } =\r\n    swipeEndState\r\n  triggerSlideGroupHandler = newTriggerSlideGroupHandler\r\n  Object.assign(state.value, rest)\r\n  if (triggerSlideGroupHandler !== undefined) {\r\n    slideGroupHandler(triggerSlideGroupHandler)\r\n  }\r\n}\r\n\r\nconst swipeMove = (e: SwipeEvent) => {\r\n  clearSelection()\r\n  const { swipeDirection, ...swipeMoveState } =\r\n    getSwipeMoveState(e, {\r\n      ...settings.value,\r\n      ...state.value,\r\n      trackEl: vSlickTrackRef.value?.$el,\r\n      listEl: vSlickListRef.value,\r\n      slideGroupIndex: state.value.currentSlideGroupIndex,\r\n      slideGroupCount: slideGroupCount.value,\r\n      onEdge: (e: SwipeDirection | keyof typeof SwipeDirection) =>\r\n        emit('edge', e),\r\n      swipeEvent: (e: SwipeDirection | keyof typeof SwipeDirection) =>\r\n        emit('swipe', e)\r\n    } as SwipeMoveSpec) || ({} as any)\r\n  if (\r\n    (settings.value.verticalSwiping && swipeDirection === SwipeDirection.up) ||\r\n    swipeDirection === SwipeDirection.down ||\r\n    (!settings.value.verticalSwiping &&\r\n      swipeDirection === SwipeDirection.left) ||\r\n    swipeDirection === SwipeDirection.right\r\n  ) {\r\n    e.preventDefault()\r\n  }\r\n  if (!swipeMoveState) return\r\n  if (swipeMoveState.swiping) {\r\n    isVSlickListClickable = false\r\n  }\r\n  Object.assign(state.value, swipeMoveState)\r\n}\r\n\r\nconst play = () => {\r\n  let nextIndex\r\n  if (settings.value.rtl) {\r\n    nextIndex =\r\n      state.value.currentSlideGroupIndex - settings.value.groupsToScroll\r\n  } else {\r\n    if (canGoNext.value) {\r\n      nextIndex =\r\n        state.value.currentSlideGroupIndex + settings.value.groupsToScroll\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  slideGroupHandler(nextIndex)\r\n}\r\n\r\nconst pause = (\r\n  pauseType: null | PlayingType | keyof typeof PlayingType = null\r\n) => {\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n    state.value.autoplayTimer = null\r\n  }\r\n  const autoplaying = state.value.autoplaying\r\n  if (pauseType === PlayingType.paused) {\r\n    state.value.autoplaying = PlayingType.paused\r\n  } else if (\r\n    pauseType === PlayingType.focused &&\r\n    (autoplaying === PlayingType.hovered || autoplaying === PlayingType.playing)\r\n  ) {\r\n    state.value.autoplaying = PlayingType.focused\r\n  } else if (autoplaying === PlayingType.playing) {\r\n    state.value.autoplaying = PlayingType.hovered\r\n  } else if (autoplaying === null) {\r\n    state.value.autoplaying = null\r\n  }\r\n}\r\n\r\nconst autoPlay = (playType: PlayingType | keyof typeof PlayingType) => {\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n  }\r\n  const autoplaying = state.value.autoplaying\r\n  if (playType === PlayingType.update) {\r\n    if (\r\n      autoplaying === PlayingType.hovered ||\r\n      autoplaying === PlayingType.focused ||\r\n      autoplaying === PlayingType.paused\r\n    ) {\r\n      return\r\n    }\r\n  } else if (playType === PlayingType.leave) {\r\n    if (\r\n      autoplaying === PlayingType.paused ||\r\n      autoplaying === PlayingType.focused\r\n    ) {\r\n      return\r\n    }\r\n  } else if (playType === PlayingType.blur) {\r\n    if (\r\n      autoplaying === PlayingType.paused ||\r\n      autoplaying === PlayingType.hovered\r\n    ) {\r\n      return\r\n    }\r\n  }\r\n  state.value.autoplayTimer = setInterval(\r\n    play,\r\n    settings.value.autoplaySpeed + 50\r\n  )\r\n  state.value.autoplaying = PlayingType.playing\r\n}\r\n\r\nconst adaptHeight = () => {\r\n  if (settings.value.adaptiveHeight && vSlickListRef.value) {\r\n    const activeSlideGroups = vSlickListRef.value.querySelectorAll<HTMLElement>(\r\n      '.v-slick-slide-group.active'\r\n    )\r\n    let maxHeight = 0\r\n    activeSlideGroups.forEach((slideGroup) => {\r\n      maxHeight = Math.max(maxHeight, slideGroup.offsetHeight)\r\n    })\r\n    vSlickListRef.value.style.height = maxHeight + 'px'\r\n  }\r\n}\r\n\r\nconst onTrackOver = () => {\r\n  if (settings.value.autoplay) pause(PlayingType.hovered)\r\n}\r\n\r\nconst onTrackLeave = () => {\r\n  if (\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.hovered\r\n  )\r\n    autoPlay(PlayingType.leave)\r\n}\r\n\r\nconst handleClickVSlickList = (e: Event) => {\r\n  if (isVSlickListClickable === false) {\r\n    e.stopPropagation()\r\n    e.preventDefault()\r\n  }\r\n  isVSlickListClickable = true\r\n}\r\n\r\nconst handleChildClickVSlickTrack = ({ index }: ChildClickPayload) => {\r\n  if (!settings.value.focusOnSelect) return\r\n  changeSlideGroup({\r\n    message: 'children',\r\n    index\r\n  })\r\n}\r\n\r\nconst handleKeyDownVSlickList = (e: KeyboardEvent) => {\r\n  if (!settings.value.accessibility) return\r\n  const navigation = getNavigationOnKeyType(\r\n    e,\r\n    settings.value.accessibility,\r\n    settings.value.rtl\r\n  )\r\n  if (!navigation) return\r\n  changeSlideGroup({ message: navigation as SlideNavigation })\r\n}\r\n\r\nconst handleMouseDownOrTouchStartVSlickList = (e: SwipeEvent) => {\r\n  if (!settings.value.touchMove) return\r\n  const target = e.target as HTMLElement | null\r\n  if (target?.classList.contains('no-swipe')) return\r\n  swipeStart(e)\r\n}\r\n\r\nconst handleMouseMoveOrTouchMoveVSlickList = (e: SwipeEvent) => {\r\n  if (!state.value.dragging || !settings.value.touchMove) return\r\n  const target = e.target as HTMLElement | null\r\n  if (target?.classList.contains('no-swipe')) return\r\n  swipeMove(e)\r\n}\r\n\r\nconst handleMouseUpOrTouchEndVSlickList = (e: SwipeEvent) => {\r\n  if (!settings.value.touchMove) return\r\n  swipeEnd(e)\r\n}\r\n\r\nconst handleMouseLeaveOrTouchCancelVSlickList = (e: SwipeEvent) => {\r\n  if (!state.value.dragging || !settings.value.touchMove) return\r\n  swipeEnd(e)\r\n}\r\n\r\nconst handleMouseEnterOrOverVSlickTrack = () => {\r\n  if (!settings.value.pauseOnHover) return\r\n  onTrackOver()\r\n}\r\n\r\nconst handleMouseLeaveVSlickTrack = () => {\r\n  if (!settings.value.pauseOnHover) return\r\n  onTrackLeave()\r\n}\r\n\r\nconst handleOverDots = () => {\r\n  if (settings.value.pauseOnDotsHover && settings.value.autoplay)\r\n    pause(PlayingType.hovered)\r\n}\r\nconst handleLeaveDots = () => {\r\n  if (\r\n    settings.value.pauseOnDotsHover &&\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.hovered\r\n  )\r\n    autoPlay(PlayingType.leave)\r\n}\r\n\r\nconst handleClickDot = ({ index }: DotClickPayload) => {\r\n  changeSlideGroup({\r\n    message: 'dots',\r\n    index\r\n  })\r\n}\r\n\r\nconst handleNextVSlickArrow = () => {\r\n  changeSlideGroup({\r\n    message: SlideNavigation.next\r\n  })\r\n}\r\n\r\nconst handlePrevVSlickArrow = () => {\r\n  changeSlideGroup({\r\n    message: SlideNavigation.previous\r\n  })\r\n}\r\n\r\nconst changeSlideGroup = (\r\n  options: SlideGroupChangeOptions,\r\n  dontAnimate = false\r\n) => {\r\n  const spec = {\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const targetSlideGroupIndex = getChangedSlideGroupIndex(\r\n    spec as SlideGroupChangeSpec,\r\n    options\r\n  )\r\n  if (targetSlideGroupIndex === undefined || targetSlideGroupIndex === null)\r\n    return\r\n  slideGroupHandler(\r\n    targetSlideGroupIndex,\r\n    dontAnimate === true ? true : undefined\r\n  )\r\n}\r\n\r\nconst slideGroupHandler = async (index: number, dontAnimate = false) => {\r\n  const { asNavFor, speed } = settings.value\r\n  const currentSlideGroupIndex = state.value.currentSlideGroupIndex\r\n  const states = getStatesOnSlide({\r\n    index,\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    useCSSTransitions: settings.value.useCSSTransitions && !dontAnimate\r\n  } as OnSlideSpec)\r\n  if (!states) return\r\n  const { slidingState, afterSlidingState } = states\r\n  emit(\r\n    'beforeChange',\r\n    currentSlideGroupIndex,\r\n    slidingState.currentSlideGroupIndex\r\n  )\r\n  const slidesToLoad =\r\n    slidingState.lazyLoadedList?.filter(\r\n      (value: number) => state.value.lazyLoadedList.indexOf(value) < 0\r\n    ) || []\r\n  if (slidesToLoad.length) {\r\n    emit('lazyLoad', slidesToLoad)\r\n  }\r\n  Object.assign(state.value, slidingState)\r\n  if (asNavFor) {\r\n    ;(asNavFor as VSlickCarouselInstance).goTo(index)\r\n  }\r\n  if (!afterSlidingState) return\r\n  await new Promise<void>((resolve) => {\r\n    animationEndCallback = setTimeout(() => {\r\n      const { animating, ...firstBatch } = afterSlidingState!\r\n      if (\r\n        settings.value.waitForAnimate ||\r\n        state.value.currentSlideGroupIndex ===\r\n          slidingState.currentSlideGroupIndex\r\n      ) {\r\n        Object.assign(state.value, firstBatch)\r\n      }\r\n      callbackTimers.push(\r\n        setTimeout(() => {\r\n          state.value.animating = animating || false\r\n        })\r\n      )\r\n      emit('afterChange', slidingState.currentSlideGroupIndex)\r\n      animationEndCallback = null\r\n      resolve()\r\n    }, speed)\r\n  })\r\n}\r\n\r\nconst updateState = (shouldSetTrackStyle?: boolean) => {\r\n  const updatedState = getSliderState({\r\n    ...settings.value,\r\n    ...state.value,\r\n    listEl: vSlickListRef.value,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    slides: slides.value\r\n  })\r\n  const spec: TrackInfoSpec = {\r\n    ...settings.value,\r\n    ...state,\r\n    ...updatedState,\r\n    trackEl: vSlickTrackRef.value?.$el,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const targetLeft = getTrackLeft(spec as TrackInfoSpec)\r\n  const trackStyle = getTrackCSS(spec as TrackInfoSpec, targetLeft)\r\n  if (shouldSetTrackStyle || slideGroupCount.value !== spec.slideGroupCount) {\r\n    updatedState.trackStyle = trackStyle\r\n  }\r\n  Object.assign(state.value, updatedState)\r\n}\r\n\r\nconst resize = async (\r\n  options: { shouldSetTrackStyle?: boolean; isWindowResize?: boolean } = {\r\n    shouldSetTrackStyle: true\r\n  }\r\n) => {\r\n  if (!vSlickTrackRef.value || !vSlickTrackRef.value.$el) {\r\n    return\r\n  }\r\n  if (\r\n    settings.value.widthDetection === WidthDetection.manual &&\r\n    options.isWindowResize\r\n  ) {\r\n    await detectWidth()\r\n  }\r\n  updateState(\r\n    options.shouldSetTrackStyle ||\r\n      (settings.value.widthDetection === WidthDetection.manual &&\r\n        options.isWindowResize)\r\n  )\r\n  if (props.autoplay) {\r\n    autoPlay(PlayingType.update)\r\n  } else {\r\n    pause()\r\n  }\r\n}\r\n\r\nconst onResize = (options?: {\r\n  shouldSetTrackStyle?: boolean\r\n  isWindowResize?: boolean\r\n}) => {\r\n  debouncedResize?.cancel()\r\n  debouncedResize = debounce(() => resize(options), DEBOUNCE_RESIZE_DURATION)\r\n}\r\n\r\nconst onResizeEventListener = () =>\r\n  onResize({\r\n    isWindowResize: true\r\n  })\r\n\r\nconst onSlideGroupFocus = () => {\r\n  if (settings.value.autoplay) pause(PlayingType.focused)\r\n}\r\nconst onSlideGroupBlur = () => {\r\n  if (\r\n    settings.value.autoplay &&\r\n    state.value.autoplaying === PlayingType.focused\r\n  )\r\n    autoPlay(PlayingType.blur)\r\n}\r\n\r\nconst progressiveLazyLoad = () => {\r\n  const slideGroupsToLoad = []\r\n  const spec = { ...settings.value, ...state.value }\r\n  const totalPostClones = getTotalPostClones({\r\n    ...spec,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n  const totalPreClones = getTotalPreClones({\r\n    ...spec,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n  for (\r\n    let index = state.value.currentSlideGroupIndex;\r\n    index < slideGroupCount.value + totalPostClones;\r\n    index++\r\n  ) {\r\n    if (state.value.lazyLoadedList.indexOf(index) < 0) {\r\n      slideGroupsToLoad.push(index)\r\n      break\r\n    }\r\n  }\r\n  for (\r\n    let index = state.value.currentSlideGroupIndex - 1;\r\n    index >= -totalPreClones;\r\n    index--\r\n  ) {\r\n    if (state.value.lazyLoadedList.indexOf(index) < 0) {\r\n      slideGroupsToLoad.push(index)\r\n      break\r\n    }\r\n  }\r\n  if (slideGroupsToLoad.length > 0) {\r\n    state.value.lazyLoadedList =\r\n      state.value.lazyLoadedList.concat(slideGroupsToLoad)\r\n    emit('lazyLoad', slideGroupsToLoad)\r\n  } else {\r\n    if (lazyLoadTimer) {\r\n      clearInterval(lazyLoadTimer)\r\n      lazyLoadTimer = null\r\n    }\r\n  }\r\n}\r\n\r\nconst checkImagesLoad = () => {\r\n  const images = vSlickListRef.value?.querySelectorAll<HTMLImageElement>(\r\n    '.v-slick-slide-group img'\r\n  )\r\n  const imagesCount = images?.length || 0\r\n  let loadedCount = 0\r\n  images?.forEach((image) => {\r\n    const handler = () => {\r\n      if (++loadedCount >= imagesCount) {\r\n        onResize()\r\n      }\r\n    }\r\n    if (!image.onclick) {\r\n      image.onclick = () => {\r\n        ;(image.closest('.v-slick-slide-group') as HTMLElement)?.focus()\r\n      }\r\n    } else {\r\n      const prevClickHandler = image.onclick.bind(image)\r\n      image.onclick = (e) => {\r\n        prevClickHandler(e)\r\n        ;(image.closest('.v-slick-slide-group') as HTMLElement)?.focus()\r\n      }\r\n    }\r\n    if (!image.onload) {\r\n      if (!settings.value.lazyLoad) return\r\n      image.onload = () => {\r\n        adaptHeight()\r\n        callbackTimers.push(setTimeout(onResize, settings.value.speed))\r\n      }\r\n    } else {\r\n      image.onload = handler\r\n      image.onerror = () => {\r\n        handler()\r\n        emit('lazyLoadError')\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nconst detectWidth = async () => {\r\n  state.value.detectingWidth = true\r\n  return new Promise<void>((resolve) =>\r\n    setTimeout(() => {\r\n      Object.assign(vSlickCarouselStyle.value, {\r\n        width: `${vSlickCarouselRef.value?.offsetWidth}px`\r\n      })\r\n      state.value.detectingWidth = false\r\n      resolve()\r\n    })\r\n  )\r\n}\r\n\r\nconst ssrInit = () => {\r\n  const spec = {\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  }\r\n  const preClones = getTotalPreClones(spec)\r\n  const postClones = getTotalPostClones(spec)\r\n  if (settings.value.variableWidth) {\r\n    let trackWidth = [],\r\n      trackLeft = []\r\n    const childrenWidths: number[] = []\r\n    rawSlideGroups.value.forEach((slideGroup) => {\r\n      let maxWidth = 0\r\n      slideGroup.forEach((child) => {\r\n        const { width } = child.props?.style || {}\r\n        if (width) maxWidth = Math.max(maxWidth, width)\r\n      })\r\n      childrenWidths.push(maxWidth)\r\n      trackWidth.push(maxWidth)\r\n    })\r\n    for (let i = 0; i < preClones; i++) {\r\n      trackLeft.push(childrenWidths[childrenWidths.length - 1 - i])\r\n      trackWidth.push(childrenWidths[childrenWidths.length - 1 - i])\r\n    }\r\n    for (let i = 0; i < postClones; i++) {\r\n      trackWidth.push(childrenWidths[i])\r\n    }\r\n    for (let i = 0; i < state.value.currentSlideGroupIndex; i++) {\r\n      trackLeft.push(childrenWidths[i])\r\n    }\r\n    trackWidth = trackWidth.filter((o) => o)\r\n    trackLeft = trackLeft.filter((o) => o)\r\n    const trackStyle = {\r\n      width: `calc(${trackWidth.join(' + ')})`,\r\n      left: `calc(${trackLeft.map((o) => `-${o}`).join(' + ')})`\r\n    }\r\n    if (settings.value.centerMode) {\r\n      const currentWidth = childrenWidths[state.value.currentSlideGroupIndex]\r\n      trackStyle.left = `calc(${trackLeft\r\n        .map((o) => `-${o}`)\r\n        .join(' + ')} + (100% - ${currentWidth}) / 2 )`\r\n    }\r\n    state.value.trackStyle = trackStyle\r\n  } else {\r\n    const _slideGroupCount = preClones + postClones + slideGroupCount.value\r\n    const trackWidth = (100 / settings.value.groupsToShow) * _slideGroupCount\r\n    const slideGroupWidth = 100 / _slideGroupCount\r\n    let trackLeft =\r\n      (-slideGroupWidth *\r\n        (preClones + state.value.currentSlideGroupIndex) *\r\n        trackWidth) /\r\n      100\r\n    if (settings.value.centerMode) {\r\n      trackLeft += (100 - (slideGroupWidth * trackWidth) / 100) / 2\r\n    }\r\n    state.value.slideGroupWidth = slideGroupWidth + '%'\r\n    state.value.trackStyle = {\r\n      width: trackWidth + '%',\r\n      left: trackLeft + '%'\r\n    }\r\n  }\r\n}\r\n\r\nconst breakpoint = ref<number>()\r\n\r\nconst vSlickCarouselRef = ref<HTMLElement>()\r\nconst vSlickCarouselStyle = ref({})\r\nconst vSlickListRef = ref<HTMLElement>()\r\nconst vSlickTrackRef = ref<InstanceType<typeof VSlickTrack>>()\r\n\r\nconst settings = computed<Props>(() => {\r\n  const definedProps = filterUndefined(props)\r\n  let settings = { ...defaultPropValues, ...definedProps }\r\n  if (breakpoint.value) {\r\n    const newProps = props.responsive.find(\r\n      (item) => item.breakpoint === breakpoint.value\r\n    )\r\n    settings = {\r\n      ...settings,\r\n      ...newProps?.settings\r\n    }\r\n  }\r\n  // force scrolling by one group if 'centerMode' is enabled\r\n  if (settings.centerMode) {\r\n    if (settings.groupsToScroll > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `centerMode is enabled: groupsToScroll should be 1; you are using ${settings.groupsToScroll}`\r\n      )\r\n    }\r\n    settings.groupsToScroll = 1\r\n  }\r\n  // force showing one group and scrolling by one if `fade` is enabled\r\n  if (settings.fade) {\r\n    if (settings.groupsToShow > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `fade is enabled: groupsToShow should be 1; you are using ${settings.groupsToShow}`\r\n      )\r\n    }\r\n    if (settings.groupsToScroll > 1 && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `fade is enabled: groupsToScroll should be 1; you are using ${settings.groupsToScroll}`\r\n      )\r\n    }\r\n    settings.groupsToShow = 1\r\n    settings.groupsToScroll = 1\r\n  }\r\n  // force disabling `variableWidth` if `slidesPerGroup` is bigger than 1\r\n  if (settings.slidesPerGroup > 1) {\r\n    if (settings.variableWidth && process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`slidesPerGroup is bigger than 1: variableWidth is disabled`)\r\n    }\r\n    settings.variableWidth = false\r\n  }\r\n\r\n  if (settings.vertical && settings.rtl) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`vertical mode is enabled: rtl is disabled`)\r\n    }\r\n    settings.rtl = false\r\n  }\r\n\r\n  return settings\r\n})\r\n\r\nconst canGoPrev = computed(() =>\r\n  checkCanGoPrev({\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n)\r\n\r\nconst canGoNext = computed(() =>\r\n  checkCanGoNext({\r\n    ...settings.value,\r\n    ...state.value,\r\n    slideGroupCount: slideGroupCount.value\r\n  })\r\n)\r\n\r\nconst pageCount = computed(() => {\r\n  if (settings.value.infinite) {\r\n    return Math.ceil(slideGroupCount.value / settings.value.groupsToScroll)\r\n  }\r\n  let pageCount =\r\n    Math.ceil(\r\n      (slideGroupCount.value - settings.value.groupsToShow) /\r\n        settings.value.groupsToScroll\r\n    ) + 1\r\n  if (\r\n    !settings.value.infinite &&\r\n    settings.value.groupsToShow > 1 &&\r\n    settings.value.centerMode\r\n  ) {\r\n    pageCount++\r\n  }\r\n  return pageCount < 0 ? 0 : pageCount\r\n})\r\n\r\nconst slides = ref<VNode[]>(slots.default ? extractSlides(slots.default()) : [])\r\n\r\nconst state = ref({\r\n  ...makeDefaultSliderState(),\r\n  currentSlideGroupIndex: settings.value.initialGroupIndex\r\n})\r\n\r\nconst currentSlideGroupIndex = computed(\r\n  () => state.value.currentSlideGroupIndex\r\n)\r\n\r\nconst currentGroupsToShow = computed(() => settings.value.groupsToShow)\r\n\r\nconst slideGroupCount = computed(() =>\r\n  getSlideGroupCount(slides.value.length, settings.value.slidesPerGroup)\r\n)\r\n\r\nconst rawSlideGroups = computed<VNode[][]>(() => {\r\n  const slideGroups: VNode[][] = []\r\n  const slidesPerGroup = settings.value.slidesPerGroup\r\n  const slideGroupsCount = slideGroupCount.value\r\n  for (let i = 0; i < slideGroupsCount; i++) {\r\n    const startIndex = i * slidesPerGroup\r\n    const endIndex = startIndex + slidesPerGroup\r\n    slideGroups.push(slides.value.slice(startIndex, endIndex))\r\n  }\r\n  return slideGroups\r\n})\r\n\r\nwatch(\r\n  () => props.responsive,\r\n  () => {\r\n    clearBreakpoints()\r\n    makeBreakpoints()\r\n  },\r\n  { deep: true }\r\n)\r\n\r\nwatch(\r\n  settings,\r\n  (newSettings: Props, oldSettings: Props) => {\r\n    let shouldSetTrackStyle = false\r\n    for (const key of Object.keys(settings.value)) {\r\n      if (!newSettings.hasOwnProperty(key)) {\r\n        shouldSetTrackStyle = true\r\n        break\r\n      }\r\n      if (\r\n        typeof newSettings[key as keyof typeof newSettings] === 'object' ||\r\n        typeof newSettings[key as keyof typeof newSettings] === 'function'\r\n      ) {\r\n        continue\r\n      }\r\n      if (\r\n        newSettings[key as keyof typeof newSettings] !==\r\n        oldSettings[key as keyof typeof newSettings]\r\n      ) {\r\n        shouldSetTrackStyle = true\r\n        break\r\n      }\r\n    }\r\n    updateState(shouldSetTrackStyle)\r\n    if (state.value.currentSlideGroupIndex >= slideGroupCount.value) {\r\n      changeSlideGroup({\r\n        message: 'index',\r\n        index: slideGroupCount.value - newSettings.groupsToShow\r\n      })\r\n    }\r\n    if (newSettings.autoplay) {\r\n      autoPlay(PlayingType.update)\r\n    } else {\r\n      pause(PlayingType.paused)\r\n    }\r\n  },\r\n  {\r\n    deep: true\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => slots.default?.() || [],\r\n  (newSlots) => {\r\n    slides.value = extractSlides(newSlots)\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => [\r\n    state.value.listHeight,\r\n    settings.value.centerMode,\r\n    settings.value.centerPadding,\r\n    settings.value.vertical\r\n  ],\r\n  ([listHeight, centerMode, centerPadding, vertical]) => {\r\n    let verticalHeightStyle = {\r\n      height: 'auto'\r\n    }\r\n    if (vertical) {\r\n      verticalHeightStyle = {\r\n        height: `${listHeight}px`\r\n      }\r\n    }\r\n\r\n    let centerPaddingStyle\r\n    if (!centerMode) {\r\n      centerPaddingStyle = {\r\n        padding: '0'\r\n      }\r\n    } else if (vertical) {\r\n      centerPaddingStyle = {\r\n        padding: centerPadding + ' 0px'\r\n      }\r\n    } else {\r\n      centerPaddingStyle = {\r\n        padding: '0px ' + centerPadding\r\n      }\r\n    }\r\n    vSlickListStyle.value = {\r\n      ...vSlickListStyle.value,\r\n      ...filterUndefined(verticalHeightStyle),\r\n      ...centerPaddingStyle\r\n    }\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => [\r\n    settings.value.infinite,\r\n    state.value.currentSlideGroupIndex,\r\n    settings.value.groupsToShow,\r\n    slideGroupCount.value\r\n  ],\r\n  ([infinite, groupsIndex, groupToShow, slideGroupCount]) => {\r\n    if (\r\n      infinite ||\r\n      (groupsIndex as number) <=\r\n        (slideGroupCount as number) - (groupToShow as number) + 1\r\n    )\r\n      return\r\n    slideGroupHandler(pageCount.value - 1)\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => state.value.dragging,\r\n  (dragging) => {\r\n    if (!vSlickListRef.value) return\r\n    if (dragging) {\r\n      vSlickListRef.value.onmousemove = handleMouseMoveOrTouchMoveVSlickList\r\n      vSlickListRef.value.addEventListener(\r\n        'touchmove',\r\n        handleMouseMoveOrTouchMoveVSlickList,\r\n        { passive: false }\r\n      )\r\n      vSlickListRef.value.onmouseup = handleMouseUpOrTouchEndVSlickList\r\n      vSlickListRef.value.ontouchend = handleMouseUpOrTouchEndVSlickList\r\n      vSlickListRef.value.onmouseleave = handleMouseLeaveOrTouchCancelVSlickList\r\n      vSlickListRef.value.ontouchcancel =\r\n        handleMouseLeaveOrTouchCancelVSlickList\r\n    } else {\r\n      vSlickListRef.value.onmousemove = null\r\n      vSlickListRef.value.removeEventListener(\r\n        'touchmove',\r\n        handleMouseMoveOrTouchMoveVSlickList\r\n      )\r\n      vSlickListRef.value.onmouseup = null\r\n      vSlickListRef.value.ontouchend = null\r\n      vSlickListRef.value.onmouseleave = null\r\n      vSlickListRef.value.ontouchcancel = null\r\n    }\r\n  }\r\n)\r\n\r\nwatch(\r\n  () => pageCount.value <= state.value.currentSlideGroupIndex,\r\n  (o) => {\r\n    if (o) {\r\n      state.value.currentSlideGroupIndex = 0\r\n    }\r\n  }\r\n)\r\n\r\ndefineExpose({\r\n  goTo: slideGroupHandler,\r\n  next: () => {\r\n    slideGroupHandler(\r\n      state.value.currentSlideGroupIndex + settings.value.groupsToScroll\r\n    )\r\n  },\r\n  prev: () => {\r\n    slideGroupHandler(\r\n      state.value.currentSlideGroupIndex - settings.value.groupsToScroll\r\n    )\r\n  },\r\n  canGoNext,\r\n  canGoPrev,\r\n  play,\r\n  pause,\r\n  autoPlay,\r\n  slideGroupCount,\r\n  currentSlideGroupIndex,\r\n  currentGroupsToShow,\r\n  pageCount\r\n})\r\n\r\nonMounted(async () => {\r\n  window.addEventListener('resize', onResizeEventListener)\r\n  if (settings.value.widthDetection === WidthDetection.manual) {\r\n    await detectWidth()\r\n  }\r\n  updateState(true)\r\n  adaptHeight()\r\n  if (settings.value.autoplay) {\r\n    autoPlay(PlayingType.update)\r\n  }\r\n  if (settings.value.lazyLoad === LazyLoadType.progressive) {\r\n    lazyLoadTimer = setInterval(progressiveLazyLoad, 1000)\r\n  }\r\n  ro = new ResizeObserver(() => {\r\n    if (state.value.animating) {\r\n      onResize({ shouldSetTrackStyle: false }) // do not set trackStyle so as to not break the animation\r\n      callbackTimers.push(setTimeout(() => onResize(), settings.value.speed))\r\n    } else {\r\n      onResize()\r\n    }\r\n  })\r\n  ro.observe(vSlickListRef.value as Element)\r\n  vSlickListRef.value\r\n    ?.querySelectorAll<HTMLElement>('.v-slick-slide-group')\r\n    .forEach((slideGroup) => {\r\n      slideGroup.onfocus = settings.value.pauseOnFocus\r\n        ? onSlideGroupFocus\r\n        : null\r\n      slideGroup.onblur = settings.value.pauseOnFocus ? onSlideGroupBlur : null\r\n    })\r\n})\r\n\r\nonUpdated(() => {\r\n  checkImagesLoad()\r\n  emit('reInit')\r\n  if (settings.value.lazyLoad) {\r\n    const slideGroupsToLoad = getOnDemandLazySlideGroups({\r\n      ...settings.value,\r\n      ...state.value\r\n    })\r\n    if (slideGroupsToLoad.length) {\r\n      state.value.lazyLoadedList =\r\n        state.value.lazyLoadedList.concat(slideGroupsToLoad)\r\n      emit('lazyLoad', slideGroupsToLoad)\r\n    }\r\n  }\r\n  adaptHeight()\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener('resize', onResizeEventListener)\r\n  ro?.unobserve(vSlickListRef.value as Element)\r\n  if (animationEndCallback) {\r\n    clearTimeout(animationEndCallback)\r\n  }\r\n  if (lazyLoadTimer) {\r\n    clearInterval(lazyLoadTimer)\r\n  }\r\n  if (callbackTimers.length) {\r\n    callbackTimers.forEach((timer) => clearTimeout(timer))\r\n    callbackTimers = []\r\n  }\r\n  if (state.value.autoplayTimer) {\r\n    clearInterval(state.value.autoplayTimer)\r\n  }\r\n})\r\n\r\nmakeBreakpoints()\r\nssrInit()\r\nemit('init')\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.v-slick-slider {\r\n  position: relative;\r\n  display: block;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.v-slick-list {\r\n  position: relative;\r\n  display: block;\r\n  overflow: hidden;\r\n  margin: 0;\r\n  padding: 0;\r\n  transform: translate3d(0, 0, 0);\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &.dragging {\r\n    cursor: pointer;\r\n    cursor: hand;\r\n  }\r\n}\r\n</style>\r\n"],"names":["PlayingType","LazyLoadType","SwipeDirection","SlideNavigation","WidthDetection","extractSlides","vnodes","vnode","isSlide","getNavigationOnKeyType","accessibility","rtl","_a","getChangedSlideGroupIndex","spec","options","indexOffset","previousInt","slideGroupOffset","unevenOffset","targetSlideGroupIndex","groupsToScroll","groupsToShow","slideGroupCount","currentSlideGroupIndex","lazyLoad","infinite","direction","siblingDirection","totalVisibleGroupsOnRightOfCurrGroup","totalVisibleGroupsOnLeftOfCurrGroup","centerMode","centerPadding","right","left","getNavigableIndexes","max","breakpoint","counter","indexes","checkNavigable","index","navigables","prevNavigable","n","getSwipeStartState","swipe","draggable","getTraversedSlideGroupCount","centerOffset","swipedSlideGroup","slideGroups","grp","currentIndex","swipedSlideGroupIndex","getSwipeDirection","touchObject","verticalSwiping","xDist","yDist","r","swipeAngle","getSwipeEndState","dragging","listWidth","touchThreshold","listHeight","swipeToSlide","scrolling","onSwipe","minSwipe","swipeDirection","state","newSlideGroupIndex","currentLeft","getTrackLeft","getTrackAnimateCSS","getLazySlidesOnLeft","getLazySlidesOnRight","getLazyStartIndex","getLazyEndIndex","getOnDemandLazySlideGroups","onDemandSlideGroups","startIndex","endIndex","slideGroupIndex","getTrackCSS","trackWidth","trackHeight","trackChildren","getTotalSlideGroups","style","transform","getTotalPreClones","getTotalPostClones","trackEl","slideGroupWidth","variableWidth","slideGroupHeight","fade","vertical","targetLeft","targetSlide","verticalOffset","slidesToOffset","targetSlideIndex","slide","canGoPrev","canGoNext","canGo","getStatesOnSlide","waitForAnimate","animating","lazyLoadedList","useCSSTransitions","animationSlideGroupIndex","finalSlideGroupIndex","slidingState","afterSlidingState","finalLeft","animationLeft","getSwipeMoveState","edgeFriction","edgeDragged","onEdge","swiped","swiping","swipeEvent","swipeLeft","curLeft","verticalSwipeLength","positionOffset","dotCount","touchSwipeLength","getSlideGroupCount","slideCount","getSliderState","_b","centerPaddingAdj","_c","slideGroupsToLoad","sliderState","MatchMedia","__publicField","query","handler","e","canUseDOM","filterUndefined","props","key","acc","clearSelection","json2mq","obj","value","debounce","callback","wait","timeoutId","makeDefaultProps","selectFields","defaultProps","defaultPropValues","makeDefaultSliderState","defaultTrackProps","defaultArrowProps","defaultDotsProps","__props","emit","__emit","clickHandler","computed","arrowSlotProps","getSlideGroupClasses","isActive","isCenter","isCurrent","getSlideGroupStyle","originalSlideGroups","rawSlideGroup","classes","slideGroup","preCloneSlideGroups","preCloneNo","postCloneSlideGroups","i","leftBound","rightBound","DEBOUNCE_RESIZE_DURATION","slots","useSlots","enquire","triggerSlideGroupHandler","animationEndCallback","lazyLoadTimer","callbackTimers","vSlickListStyle","ref","getCurrentInstance","isVSlickListClickable","debouncedResize","ro","responsiveMediaHandlers","media","previousHandler","newHandler","predicate","clearBreakpoints","makeBreakpoints","breakpoints","item","a","b","_breakpoint","mediaQuery","swipeStart","swipeStartState","settings","swipeEnd","swipeEndState","vSlickTrackRef","vSlickListRef","newTriggerSlideGroupHandler","rest","slideGroupHandler","swipeMove","swipeMoveState","play","nextIndex","pause","pauseType","autoplaying","autoPlay","playType","adaptHeight","activeSlideGroups","maxHeight","onTrackOver","onTrackLeave","handleClickVSlickList","handleChildClickVSlickTrack","changeSlideGroup","handleKeyDownVSlickList","navigation","handleMouseDownOrTouchStartVSlickList","target","handleMouseMoveOrTouchMoveVSlickList","handleMouseUpOrTouchEndVSlickList","handleMouseLeaveOrTouchCancelVSlickList","handleMouseEnterOrOverVSlickTrack","handleMouseLeaveVSlickTrack","handleOverDots","handleLeaveDots","handleClickDot","handleNextVSlickArrow","handlePrevVSlickArrow","dontAnimate","asNavFor","speed","states","slidesToLoad","resolve","firstBatch","updateState","shouldSetTrackStyle","updatedState","slides","trackStyle","resize","detectWidth","onResize","onResizeEventListener","onSlideGroupFocus","onSlideGroupBlur","progressiveLazyLoad","totalPostClones","totalPreClones","checkImagesLoad","images","imagesCount","loadedCount","image","prevClickHandler","vSlickCarouselStyle","vSlickCarouselRef","ssrInit","preClones","postClones","trackLeft","childrenWidths","rawSlideGroups","maxWidth","child","width","o","currentWidth","_slideGroupCount","definedProps","newProps","checkCanGoPrev","checkCanGoNext","pageCount","currentGroupsToShow","slidesPerGroup","slideGroupsCount","watch","newSettings","oldSettings","newSlots","verticalHeightStyle","centerPaddingStyle","groupsIndex","groupToShow","__expose","onMounted","onUpdated","onBeforeUnmount","timer"],"mappings":"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"}